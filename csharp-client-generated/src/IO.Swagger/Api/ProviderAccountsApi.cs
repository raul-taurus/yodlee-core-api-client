/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProviderAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Provider Account
        /// </summary>
        /// <remarks>
        /// The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns></returns>
        void DeleteProviderAccount (long? providerAccountId);

        /// <summary>
        /// Delete Provider Account
        /// </summary>
        /// <remarks>
        /// The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProviderAccountWithHttpInfo (long? providerAccountId);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountIds">comma separated providerAccountIds</param>
        /// <param name="body">loginForm or field entity (optional)</param>
        /// <returns>UpdatedProviderAccountResponse</returns>
        UpdatedProviderAccountResponse EditCredentialsOrRefreshProviderAccount (string providerAccountIds, ProviderAccountRequest body = null);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountIds">comma separated providerAccountIds</param>
        /// <param name="body">loginForm or field entity (optional)</param>
        /// <returns>ApiResponse of UpdatedProviderAccountResponse</returns>
        ApiResponse<UpdatedProviderAccountResponse> EditCredentialsOrRefreshProviderAccountWithHttpInfo (string providerAccountIds, ProviderAccountRequest body = null);
        /// <summary>
        /// Get Provider Accounts
        /// </summary>
        /// <remarks>
        /// The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">include (optional)</param>
        /// <param name="providerIds">Comma separated providerIds. (optional)</param>
        /// <returns>ProviderAccountResponse</returns>
        ProviderAccountResponse GetAllProviderAccounts (string include = null, string providerIds = null);

        /// <summary>
        /// Get Provider Accounts
        /// </summary>
        /// <remarks>
        /// The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">include (optional)</param>
        /// <param name="providerIds">Comma separated providerIds. (optional)</param>
        /// <returns>ApiResponse of ProviderAccountResponse</returns>
        ApiResponse<ProviderAccountResponse> GetAllProviderAccountsWithHttpInfo (string include = null, string providerIds = null);
        /// <summary>
        /// Get Provider Account Details
        /// </summary>
        /// <remarks>
        /// The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <param name="include">include credentials,questions (optional)</param>
        /// <param name="requestId">The unique identifier for the request that returns contextual data (optional)</param>
        /// <returns>ProviderAccountDetailResponse</returns>
        ProviderAccountDetailResponse GetProviderAccount (long? providerAccountId, string include = null, string requestId = null);

        /// <summary>
        /// Get Provider Account Details
        /// </summary>
        /// <remarks>
        /// The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <param name="include">include credentials,questions (optional)</param>
        /// <param name="requestId">The unique identifier for the request that returns contextual data (optional)</param>
        /// <returns>ApiResponse of ProviderAccountDetailResponse</returns>
        ApiResponse<ProviderAccountDetailResponse> GetProviderAccountWithHttpInfo (long? providerAccountId, string include = null, string requestId = null);
        /// <summary>
        /// Get User Profile Details
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">Comma separated providerAccountIds. (optional)</param>
        /// <returns>ProviderAccountUserProfileResponse</returns>
        ProviderAccountUserProfileResponse GetProviderAccountProfiles (string providerAccountId = null);

        /// <summary>
        /// Get User Profile Details
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">Comma separated providerAccountIds. (optional)</param>
        /// <returns>ApiResponse of ProviderAccountUserProfileResponse</returns>
        ApiResponse<ProviderAccountUserProfileResponse> GetProviderAccountProfilesWithHttpInfo (string providerAccountId = null);
        /// <summary>
        /// Refresh Provider Account
        /// </summary>
        /// <remarks>
        /// This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">refreshRequest</param>
        /// <returns>RefreshProviderAccountResponse</returns>
        RefreshProviderAccountResponse RefreshProviderAccount (ProviderAccountRefreshRequest body);

        /// <summary>
        /// Refresh Provider Account
        /// </summary>
        /// <remarks>
        /// This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">refreshRequest</param>
        /// <returns>ApiResponse of RefreshProviderAccountResponse</returns>
        ApiResponse<RefreshProviderAccountResponse> RefreshProviderAccountWithHttpInfo (ProviderAccountRefreshRequest body);
        /// <summary>
        /// Update Preferences
        /// </summary>
        /// <remarks>
        /// This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">preferences</param>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns></returns>
        void UpdatePreferences (ProviderAccountPreferencesRequest body, long? providerAccountId);

        /// <summary>
        /// Update Preferences
        /// </summary>
        /// <remarks>
        /// This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">preferences</param>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePreferencesWithHttpInfo (ProviderAccountPreferencesRequest body, long? providerAccountId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Provider Account
        /// </summary>
        /// <remarks>
        /// The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProviderAccountAsync (long? providerAccountId);

        /// <summary>
        /// Delete Provider Account
        /// </summary>
        /// <remarks>
        /// The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProviderAccountAsyncWithHttpInfo (long? providerAccountId);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountIds">comma separated providerAccountIds</param>
        /// <param name="body">loginForm or field entity (optional)</param>
        /// <returns>Task of UpdatedProviderAccountResponse</returns>
        System.Threading.Tasks.Task<UpdatedProviderAccountResponse> EditCredentialsOrRefreshProviderAccountAsync (string providerAccountIds, ProviderAccountRequest body = null);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountIds">comma separated providerAccountIds</param>
        /// <param name="body">loginForm or field entity (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedProviderAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedProviderAccountResponse>> EditCredentialsOrRefreshProviderAccountAsyncWithHttpInfo (string providerAccountIds, ProviderAccountRequest body = null);
        /// <summary>
        /// Get Provider Accounts
        /// </summary>
        /// <remarks>
        /// The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">include (optional)</param>
        /// <param name="providerIds">Comma separated providerIds. (optional)</param>
        /// <returns>Task of ProviderAccountResponse</returns>
        System.Threading.Tasks.Task<ProviderAccountResponse> GetAllProviderAccountsAsync (string include = null, string providerIds = null);

        /// <summary>
        /// Get Provider Accounts
        /// </summary>
        /// <remarks>
        /// The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">include (optional)</param>
        /// <param name="providerIds">Comma separated providerIds. (optional)</param>
        /// <returns>Task of ApiResponse (ProviderAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProviderAccountResponse>> GetAllProviderAccountsAsyncWithHttpInfo (string include = null, string providerIds = null);
        /// <summary>
        /// Get Provider Account Details
        /// </summary>
        /// <remarks>
        /// The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <param name="include">include credentials,questions (optional)</param>
        /// <param name="requestId">The unique identifier for the request that returns contextual data (optional)</param>
        /// <returns>Task of ProviderAccountDetailResponse</returns>
        System.Threading.Tasks.Task<ProviderAccountDetailResponse> GetProviderAccountAsync (long? providerAccountId, string include = null, string requestId = null);

        /// <summary>
        /// Get Provider Account Details
        /// </summary>
        /// <remarks>
        /// The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <param name="include">include credentials,questions (optional)</param>
        /// <param name="requestId">The unique identifier for the request that returns contextual data (optional)</param>
        /// <returns>Task of ApiResponse (ProviderAccountDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProviderAccountDetailResponse>> GetProviderAccountAsyncWithHttpInfo (long? providerAccountId, string include = null, string requestId = null);
        /// <summary>
        /// Get User Profile Details
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">Comma separated providerAccountIds. (optional)</param>
        /// <returns>Task of ProviderAccountUserProfileResponse</returns>
        System.Threading.Tasks.Task<ProviderAccountUserProfileResponse> GetProviderAccountProfilesAsync (string providerAccountId = null);

        /// <summary>
        /// Get User Profile Details
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">Comma separated providerAccountIds. (optional)</param>
        /// <returns>Task of ApiResponse (ProviderAccountUserProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProviderAccountUserProfileResponse>> GetProviderAccountProfilesAsyncWithHttpInfo (string providerAccountId = null);
        /// <summary>
        /// Refresh Provider Account
        /// </summary>
        /// <remarks>
        /// This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">refreshRequest</param>
        /// <returns>Task of RefreshProviderAccountResponse</returns>
        System.Threading.Tasks.Task<RefreshProviderAccountResponse> RefreshProviderAccountAsync (ProviderAccountRefreshRequest body);

        /// <summary>
        /// Refresh Provider Account
        /// </summary>
        /// <remarks>
        /// This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">refreshRequest</param>
        /// <returns>Task of ApiResponse (RefreshProviderAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefreshProviderAccountResponse>> RefreshProviderAccountAsyncWithHttpInfo (ProviderAccountRefreshRequest body);
        /// <summary>
        /// Update Preferences
        /// </summary>
        /// <remarks>
        /// This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">preferences</param>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePreferencesAsync (ProviderAccountPreferencesRequest body, long? providerAccountId);

        /// <summary>
        /// Update Preferences
        /// </summary>
        /// <remarks>
        /// This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">preferences</param>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePreferencesAsyncWithHttpInfo (ProviderAccountPreferencesRequest body, long? providerAccountId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProviderAccountsApi : IProviderAccountsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProviderAccountsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderAccountsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProviderAccountsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderAccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProviderAccountsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Provider Account The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns></returns>
        public void DeleteProviderAccount (long? providerAccountId)
        {
             DeleteProviderAccountWithHttpInfo(providerAccountId);
        }

        /// <summary>
        /// Delete Provider Account The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProviderAccountWithHttpInfo (long? providerAccountId)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling ProviderAccountsApi->DeleteProviderAccount");

            var localVarPath = "/providerAccounts/{providerAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountId != null) localVarPathParams.Add("providerAccountId", this.Configuration.ApiClient.ParameterToString(providerAccountId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProviderAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Provider Account The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProviderAccountAsync (long? providerAccountId)
        {
             await DeleteProviderAccountAsyncWithHttpInfo(providerAccountId);

        }

        /// <summary>
        /// Delete Provider Account The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProviderAccountAsyncWithHttpInfo (long? providerAccountId)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling ProviderAccountsApi->DeleteProviderAccount");

            var localVarPath = "/providerAccounts/{providerAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountId != null) localVarPathParams.Add("providerAccountId", this.Configuration.ApiClient.ParameterToString(providerAccountId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProviderAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Account &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountIds">comma separated providerAccountIds</param>
        /// <param name="body">loginForm or field entity (optional)</param>
        /// <returns>UpdatedProviderAccountResponse</returns>
        public UpdatedProviderAccountResponse EditCredentialsOrRefreshProviderAccount (string providerAccountIds, ProviderAccountRequest body = null)
        {
             ApiResponse<UpdatedProviderAccountResponse> localVarResponse = EditCredentialsOrRefreshProviderAccountWithHttpInfo(providerAccountIds, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Account &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountIds">comma separated providerAccountIds</param>
        /// <param name="body">loginForm or field entity (optional)</param>
        /// <returns>ApiResponse of UpdatedProviderAccountResponse</returns>
        public ApiResponse< UpdatedProviderAccountResponse > EditCredentialsOrRefreshProviderAccountWithHttpInfo (string providerAccountIds, ProviderAccountRequest body = null)
        {
            // verify the required parameter 'providerAccountIds' is set
            if (providerAccountIds == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountIds' when calling ProviderAccountsApi->EditCredentialsOrRefreshProviderAccount");

            var localVarPath = "/providerAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountIds", providerAccountIds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditCredentialsOrRefreshProviderAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedProviderAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatedProviderAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedProviderAccountResponse)));
        }

        /// <summary>
        /// Update Account &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountIds">comma separated providerAccountIds</param>
        /// <param name="body">loginForm or field entity (optional)</param>
        /// <returns>Task of UpdatedProviderAccountResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedProviderAccountResponse> EditCredentialsOrRefreshProviderAccountAsync (string providerAccountIds, ProviderAccountRequest body = null)
        {
             ApiResponse<UpdatedProviderAccountResponse> localVarResponse = await EditCredentialsOrRefreshProviderAccountAsyncWithHttpInfo(providerAccountIds, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Account &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountIds">comma separated providerAccountIds</param>
        /// <param name="body">loginForm or field entity (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedProviderAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedProviderAccountResponse>> EditCredentialsOrRefreshProviderAccountAsyncWithHttpInfo (string providerAccountIds, ProviderAccountRequest body = null)
        {
            // verify the required parameter 'providerAccountIds' is set
            if (providerAccountIds == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountIds' when calling ProviderAccountsApi->EditCredentialsOrRefreshProviderAccount");

            var localVarPath = "/providerAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountIds", providerAccountIds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditCredentialsOrRefreshProviderAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedProviderAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatedProviderAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedProviderAccountResponse)));
        }

        /// <summary>
        /// Get Provider Accounts The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">include (optional)</param>
        /// <param name="providerIds">Comma separated providerIds. (optional)</param>
        /// <returns>ProviderAccountResponse</returns>
        public ProviderAccountResponse GetAllProviderAccounts (string include = null, string providerIds = null)
        {
             ApiResponse<ProviderAccountResponse> localVarResponse = GetAllProviderAccountsWithHttpInfo(include, providerIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Provider Accounts The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">include (optional)</param>
        /// <param name="providerIds">Comma separated providerIds. (optional)</param>
        /// <returns>ApiResponse of ProviderAccountResponse</returns>
        public ApiResponse< ProviderAccountResponse > GetAllProviderAccountsWithHttpInfo (string include = null, string providerIds = null)
        {

            var localVarPath = "/providerAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (providerIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerIds", providerIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllProviderAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderAccountResponse)));
        }

        /// <summary>
        /// Get Provider Accounts The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">include (optional)</param>
        /// <param name="providerIds">Comma separated providerIds. (optional)</param>
        /// <returns>Task of ProviderAccountResponse</returns>
        public async System.Threading.Tasks.Task<ProviderAccountResponse> GetAllProviderAccountsAsync (string include = null, string providerIds = null)
        {
             ApiResponse<ProviderAccountResponse> localVarResponse = await GetAllProviderAccountsAsyncWithHttpInfo(include, providerIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Provider Accounts The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">include (optional)</param>
        /// <param name="providerIds">Comma separated providerIds. (optional)</param>
        /// <returns>Task of ApiResponse (ProviderAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProviderAccountResponse>> GetAllProviderAccountsAsyncWithHttpInfo (string include = null, string providerIds = null)
        {

            var localVarPath = "/providerAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (providerIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerIds", providerIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllProviderAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderAccountResponse)));
        }

        /// <summary>
        /// Get Provider Account Details The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <param name="include">include credentials,questions (optional)</param>
        /// <param name="requestId">The unique identifier for the request that returns contextual data (optional)</param>
        /// <returns>ProviderAccountDetailResponse</returns>
        public ProviderAccountDetailResponse GetProviderAccount (long? providerAccountId, string include = null, string requestId = null)
        {
             ApiResponse<ProviderAccountDetailResponse> localVarResponse = GetProviderAccountWithHttpInfo(providerAccountId, include, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Provider Account Details The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <param name="include">include credentials,questions (optional)</param>
        /// <param name="requestId">The unique identifier for the request that returns contextual data (optional)</param>
        /// <returns>ApiResponse of ProviderAccountDetailResponse</returns>
        public ApiResponse< ProviderAccountDetailResponse > GetProviderAccountWithHttpInfo (long? providerAccountId, string include = null, string requestId = null)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling ProviderAccountsApi->GetProviderAccount");

            var localVarPath = "/providerAccounts/{providerAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountId != null) localVarPathParams.Add("providerAccountId", this.Configuration.ApiClient.ParameterToString(providerAccountId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (requestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestId", requestId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviderAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderAccountDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderAccountDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderAccountDetailResponse)));
        }

        /// <summary>
        /// Get Provider Account Details The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <param name="include">include credentials,questions (optional)</param>
        /// <param name="requestId">The unique identifier for the request that returns contextual data (optional)</param>
        /// <returns>Task of ProviderAccountDetailResponse</returns>
        public async System.Threading.Tasks.Task<ProviderAccountDetailResponse> GetProviderAccountAsync (long? providerAccountId, string include = null, string requestId = null)
        {
             ApiResponse<ProviderAccountDetailResponse> localVarResponse = await GetProviderAccountAsyncWithHttpInfo(providerAccountId, include, requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Provider Account Details The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <param name="include">include credentials,questions (optional)</param>
        /// <param name="requestId">The unique identifier for the request that returns contextual data (optional)</param>
        /// <returns>Task of ApiResponse (ProviderAccountDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProviderAccountDetailResponse>> GetProviderAccountAsyncWithHttpInfo (long? providerAccountId, string include = null, string requestId = null)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling ProviderAccountsApi->GetProviderAccount");

            var localVarPath = "/providerAccounts/{providerAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountId != null) localVarPathParams.Add("providerAccountId", this.Configuration.ApiClient.ParameterToString(providerAccountId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (requestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestId", requestId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviderAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderAccountDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderAccountDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderAccountDetailResponse)));
        }

        /// <summary>
        /// Get User Profile Details &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">Comma separated providerAccountIds. (optional)</param>
        /// <returns>ProviderAccountUserProfileResponse</returns>
        public ProviderAccountUserProfileResponse GetProviderAccountProfiles (string providerAccountId = null)
        {
             ApiResponse<ProviderAccountUserProfileResponse> localVarResponse = GetProviderAccountProfilesWithHttpInfo(providerAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Profile Details &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">Comma separated providerAccountIds. (optional)</param>
        /// <returns>ApiResponse of ProviderAccountUserProfileResponse</returns>
        public ApiResponse< ProviderAccountUserProfileResponse > GetProviderAccountProfilesWithHttpInfo (string providerAccountId = null)
        {

            var localVarPath = "/providerAccounts/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviderAccountProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderAccountUserProfileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderAccountUserProfileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderAccountUserProfileResponse)));
        }

        /// <summary>
        /// Get User Profile Details &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">Comma separated providerAccountIds. (optional)</param>
        /// <returns>Task of ProviderAccountUserProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProviderAccountUserProfileResponse> GetProviderAccountProfilesAsync (string providerAccountId = null)
        {
             ApiResponse<ProviderAccountUserProfileResponse> localVarResponse = await GetProviderAccountProfilesAsyncWithHttpInfo(providerAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Profile Details &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">Comma separated providerAccountIds. (optional)</param>
        /// <returns>Task of ApiResponse (ProviderAccountUserProfileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProviderAccountUserProfileResponse>> GetProviderAccountProfilesAsyncWithHttpInfo (string providerAccountId = null)
        {

            var localVarPath = "/providerAccounts/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviderAccountProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderAccountUserProfileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderAccountUserProfileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderAccountUserProfileResponse)));
        }

        /// <summary>
        /// Refresh Provider Account This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">refreshRequest</param>
        /// <returns>RefreshProviderAccountResponse</returns>
        public RefreshProviderAccountResponse RefreshProviderAccount (ProviderAccountRefreshRequest body)
        {
             ApiResponse<RefreshProviderAccountResponse> localVarResponse = RefreshProviderAccountWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Provider Account This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">refreshRequest</param>
        /// <returns>ApiResponse of RefreshProviderAccountResponse</returns>
        public ApiResponse< RefreshProviderAccountResponse > RefreshProviderAccountWithHttpInfo (ProviderAccountRefreshRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProviderAccountsApi->RefreshProviderAccount");

            var localVarPath = "/providerAccounts/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshProviderAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefreshProviderAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RefreshProviderAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefreshProviderAccountResponse)));
        }

        /// <summary>
        /// Refresh Provider Account This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">refreshRequest</param>
        /// <returns>Task of RefreshProviderAccountResponse</returns>
        public async System.Threading.Tasks.Task<RefreshProviderAccountResponse> RefreshProviderAccountAsync (ProviderAccountRefreshRequest body)
        {
             ApiResponse<RefreshProviderAccountResponse> localVarResponse = await RefreshProviderAccountAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refresh Provider Account This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">refreshRequest</param>
        /// <returns>Task of ApiResponse (RefreshProviderAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RefreshProviderAccountResponse>> RefreshProviderAccountAsyncWithHttpInfo (ProviderAccountRefreshRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProviderAccountsApi->RefreshProviderAccount");

            var localVarPath = "/providerAccounts/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshProviderAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefreshProviderAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RefreshProviderAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefreshProviderAccountResponse)));
        }

        /// <summary>
        /// Update Preferences This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">preferences</param>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns></returns>
        public void UpdatePreferences (ProviderAccountPreferencesRequest body, long? providerAccountId)
        {
             UpdatePreferencesWithHttpInfo(body, providerAccountId);
        }

        /// <summary>
        /// Update Preferences This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">preferences</param>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePreferencesWithHttpInfo (ProviderAccountPreferencesRequest body, long? providerAccountId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProviderAccountsApi->UpdatePreferences");
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling ProviderAccountsApi->UpdatePreferences");

            var localVarPath = "/providerAccounts/{providerAccountId}/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountId != null) localVarPathParams.Add("providerAccountId", this.Configuration.ApiClient.ParameterToString(providerAccountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Preferences This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">preferences</param>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePreferencesAsync (ProviderAccountPreferencesRequest body, long? providerAccountId)
        {
             await UpdatePreferencesAsyncWithHttpInfo(body, providerAccountId);

        }

        /// <summary>
        /// Update Preferences This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">preferences</param>
        /// <param name="providerAccountId">providerAccountId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePreferencesAsyncWithHttpInfo (ProviderAccountPreferencesRequest body, long? providerAccountId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProviderAccountsApi->UpdatePreferences");
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling ProviderAccountsApi->UpdatePreferences");

            var localVarPath = "/providerAccounts/{providerAccountId}/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerAccountId != null) localVarPathParams.Add("providerAccountId", this.Configuration.ApiClient.ParameterToString(providerAccountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
