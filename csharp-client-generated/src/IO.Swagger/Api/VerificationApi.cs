/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IVerificationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Holder Profile
        /// </summary>
        /// <remarks>
        /// The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <returns>HolderProfileResponse</returns>
        HolderProfileResponse GetHolderProfile (string providerAccountId, string accountId = null);

        /// <summary>
        /// Get Holder Profile
        /// </summary>
        /// <remarks>
        /// The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <returns>ApiResponse of HolderProfileResponse</returns>
        ApiResponse<HolderProfileResponse> GetHolderProfileWithHttpInfo (string providerAccountId, string accountId = null);
        /// <summary>
        /// Get Verification Status
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <returns>VerificationStatusResponse</returns>
        VerificationStatusResponse GetVerificationStatus (string accountId = null, string providerAccountId = null, string verificationType = null);

        /// <summary>
        /// Get Verification Status
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <returns>ApiResponse of VerificationStatusResponse</returns>
        ApiResponse<VerificationStatusResponse> GetVerificationStatusWithHttpInfo (string accountId = null, string providerAccountId = null, string verificationType = null);
        /// <summary>
        /// Get Verified Accounts
        /// </summary>
        /// <remarks>
        /// The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <returns>VerifiedAccountResponse</returns>
        VerifiedAccountResponse GetVerifiedAccounts (string providerAccountId, string accountId = null, string isSelected = null, string verificationStatus = null);

        /// <summary>
        /// Get Verified Accounts
        /// </summary>
        /// <remarks>
        /// The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <returns>ApiResponse of VerifiedAccountResponse</returns>
        ApiResponse<VerifiedAccountResponse> GetVerifiedAccountsWithHttpInfo (string providerAccountId, string accountId = null, string isSelected = null, string verificationStatus = null);
        /// <summary>
        /// Initiaite Challenge Deposit
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>VerificationResponse</returns>
        VerificationResponse InitiateMatchingOrChallengeDepositeVerification (VerificationRequest body);

        /// <summary>
        /// Initiaite Challenge Deposit
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>ApiResponse of VerificationResponse</returns>
        ApiResponse<VerificationResponse> InitiateMatchingOrChallengeDepositeVerificationWithHttpInfo (VerificationRequest body);
        /// <summary>
        /// Verify Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>VerificationResponse</returns>
        VerificationResponse VerifyChallengeDeposit (UpdateVerificationRequest body);

        /// <summary>
        /// Verify Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>ApiResponse of VerificationResponse</returns>
        ApiResponse<VerificationResponse> VerifyChallengeDepositWithHttpInfo (UpdateVerificationRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Holder Profile
        /// </summary>
        /// <remarks>
        /// The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <returns>Task of HolderProfileResponse</returns>
        System.Threading.Tasks.Task<HolderProfileResponse> GetHolderProfileAsync (string providerAccountId, string accountId = null);

        /// <summary>
        /// Get Holder Profile
        /// </summary>
        /// <remarks>
        /// The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <returns>Task of ApiResponse (HolderProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HolderProfileResponse>> GetHolderProfileAsyncWithHttpInfo (string providerAccountId, string accountId = null);
        /// <summary>
        /// Get Verification Status
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <returns>Task of VerificationStatusResponse</returns>
        System.Threading.Tasks.Task<VerificationStatusResponse> GetVerificationStatusAsync (string accountId = null, string providerAccountId = null, string verificationType = null);

        /// <summary>
        /// Get Verification Status
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <returns>Task of ApiResponse (VerificationStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerificationStatusResponse>> GetVerificationStatusAsyncWithHttpInfo (string accountId = null, string providerAccountId = null, string verificationType = null);
        /// <summary>
        /// Get Verified Accounts
        /// </summary>
        /// <remarks>
        /// The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <returns>Task of VerifiedAccountResponse</returns>
        System.Threading.Tasks.Task<VerifiedAccountResponse> GetVerifiedAccountsAsync (string providerAccountId, string accountId = null, string isSelected = null, string verificationStatus = null);

        /// <summary>
        /// Get Verified Accounts
        /// </summary>
        /// <remarks>
        /// The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <returns>Task of ApiResponse (VerifiedAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifiedAccountResponse>> GetVerifiedAccountsAsyncWithHttpInfo (string providerAccountId, string accountId = null, string isSelected = null, string verificationStatus = null);
        /// <summary>
        /// Initiaite Challenge Deposit
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>Task of VerificationResponse</returns>
        System.Threading.Tasks.Task<VerificationResponse> InitiateMatchingOrChallengeDepositeVerificationAsync (VerificationRequest body);

        /// <summary>
        /// Initiaite Challenge Deposit
        /// </summary>
        /// <remarks>
        /// &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>Task of ApiResponse (VerificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerificationResponse>> InitiateMatchingOrChallengeDepositeVerificationAsyncWithHttpInfo (VerificationRequest body);
        /// <summary>
        /// Verify Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>Task of VerificationResponse</returns>
        System.Threading.Tasks.Task<VerificationResponse> VerifyChallengeDepositAsync (UpdateVerificationRequest body);

        /// <summary>
        /// Verify Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>Task of ApiResponse (VerificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerificationResponse>> VerifyChallengeDepositAsyncWithHttpInfo (UpdateVerificationRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class VerificationApi : IVerificationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VerificationApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class
        /// </summary>
        /// <returns></returns>
        public VerificationApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VerificationApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Holder Profile The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <returns>HolderProfileResponse</returns>
        public HolderProfileResponse GetHolderProfile (string providerAccountId, string accountId = null)
        {
             ApiResponse<HolderProfileResponse> localVarResponse = GetHolderProfileWithHttpInfo(providerAccountId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holder Profile The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <returns>ApiResponse of HolderProfileResponse</returns>
        public ApiResponse< HolderProfileResponse > GetHolderProfileWithHttpInfo (string providerAccountId, string accountId = null)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling VerificationApi->GetHolderProfile");

            var localVarPath = "/verification/holderProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHolderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HolderProfileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HolderProfileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HolderProfileResponse)));
        }

        /// <summary>
        /// Get Holder Profile The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <returns>Task of HolderProfileResponse</returns>
        public async System.Threading.Tasks.Task<HolderProfileResponse> GetHolderProfileAsync (string providerAccountId, string accountId = null)
        {
             ApiResponse<HolderProfileResponse> localVarResponse = await GetHolderProfileAsyncWithHttpInfo(providerAccountId, accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Holder Profile The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <returns>Task of ApiResponse (HolderProfileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HolderProfileResponse>> GetHolderProfileAsyncWithHttpInfo (string providerAccountId, string accountId = null)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling VerificationApi->GetHolderProfile");

            var localVarPath = "/verification/holderProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHolderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HolderProfileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HolderProfileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HolderProfileResponse)));
        }

        /// <summary>
        /// Get Verification Status &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <returns>VerificationStatusResponse</returns>
        public VerificationStatusResponse GetVerificationStatus (string accountId = null, string providerAccountId = null, string verificationType = null)
        {
             ApiResponse<VerificationStatusResponse> localVarResponse = GetVerificationStatusWithHttpInfo(accountId, providerAccountId, verificationType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Verification Status &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <returns>ApiResponse of VerificationStatusResponse</returns>
        public ApiResponse< VerificationStatusResponse > GetVerificationStatusWithHttpInfo (string accountId = null, string providerAccountId = null, string verificationType = null)
        {

            var localVarPath = "/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter
            if (verificationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verificationType", verificationType)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerificationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerificationStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerificationStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerificationStatusResponse)));
        }

        /// <summary>
        /// Get Verification Status &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <returns>Task of VerificationStatusResponse</returns>
        public async System.Threading.Tasks.Task<VerificationStatusResponse> GetVerificationStatusAsync (string accountId = null, string providerAccountId = null, string verificationType = null)
        {
             ApiResponse<VerificationStatusResponse> localVarResponse = await GetVerificationStatusAsyncWithHttpInfo(accountId, providerAccountId, verificationType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Verification Status &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <returns>Task of ApiResponse (VerificationStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerificationStatusResponse>> GetVerificationStatusAsyncWithHttpInfo (string accountId = null, string providerAccountId = null, string verificationType = null)
        {

            var localVarPath = "/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter
            if (verificationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verificationType", verificationType)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerificationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerificationStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerificationStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerificationStatusResponse)));
        }

        /// <summary>
        /// Get Verified Accounts The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <returns>VerifiedAccountResponse</returns>
        public VerifiedAccountResponse GetVerifiedAccounts (string providerAccountId, string accountId = null, string isSelected = null, string verificationStatus = null)
        {
             ApiResponse<VerifiedAccountResponse> localVarResponse = GetVerifiedAccountsWithHttpInfo(providerAccountId, accountId, isSelected, verificationStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Verified Accounts The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <returns>ApiResponse of VerifiedAccountResponse</returns>
        public ApiResponse< VerifiedAccountResponse > GetVerifiedAccountsWithHttpInfo (string providerAccountId, string accountId = null, string isSelected = null, string verificationStatus = null)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling VerificationApi->GetVerifiedAccounts");

            var localVarPath = "/verification/verifiedAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (isSelected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSelected", isSelected)); // query parameter
            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter
            if (verificationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verificationStatus", verificationStatus)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerifiedAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifiedAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifiedAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifiedAccountResponse)));
        }

        /// <summary>
        /// Get Verified Accounts The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <returns>Task of VerifiedAccountResponse</returns>
        public async System.Threading.Tasks.Task<VerifiedAccountResponse> GetVerifiedAccountsAsync (string providerAccountId, string accountId = null, string isSelected = null, string verificationStatus = null)
        {
             ApiResponse<VerifiedAccountResponse> localVarResponse = await GetVerifiedAccountsAsyncWithHttpInfo(providerAccountId, accountId, isSelected, verificationStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Verified Accounts The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <returns>Task of ApiResponse (VerifiedAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifiedAccountResponse>> GetVerifiedAccountsAsyncWithHttpInfo (string providerAccountId, string accountId = null, string isSelected = null, string verificationStatus = null)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
                throw new ApiException(400, "Missing required parameter 'providerAccountId' when calling VerificationApi->GetVerifiedAccounts");

            var localVarPath = "/verification/verifiedAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (isSelected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSelected", isSelected)); // query parameter
            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter
            if (verificationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verificationStatus", verificationStatus)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerifiedAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifiedAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifiedAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifiedAccountResponse)));
        }

        /// <summary>
        /// Initiaite Challenge Deposit &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>VerificationResponse</returns>
        public VerificationResponse InitiateMatchingOrChallengeDepositeVerification (VerificationRequest body)
        {
             ApiResponse<VerificationResponse> localVarResponse = InitiateMatchingOrChallengeDepositeVerificationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiaite Challenge Deposit &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>ApiResponse of VerificationResponse</returns>
        public ApiResponse< VerificationResponse > InitiateMatchingOrChallengeDepositeVerificationWithHttpInfo (VerificationRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VerificationApi->InitiateMatchingOrChallengeDepositeVerification");

            var localVarPath = "/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateMatchingOrChallengeDepositeVerification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerificationResponse)));
        }

        /// <summary>
        /// Initiaite Challenge Deposit &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>Task of VerificationResponse</returns>
        public async System.Threading.Tasks.Task<VerificationResponse> InitiateMatchingOrChallengeDepositeVerificationAsync (VerificationRequest body)
        {
             ApiResponse<VerificationResponse> localVarResponse = await InitiateMatchingOrChallengeDepositeVerificationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiaite Challenge Deposit &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>Task of ApiResponse (VerificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerificationResponse>> InitiateMatchingOrChallengeDepositeVerificationAsyncWithHttpInfo (VerificationRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VerificationApi->InitiateMatchingOrChallengeDepositeVerification");

            var localVarPath = "/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateMatchingOrChallengeDepositeVerification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerificationResponse)));
        }

        /// <summary>
        /// Verify Challenge Deposit The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>VerificationResponse</returns>
        public VerificationResponse VerifyChallengeDeposit (UpdateVerificationRequest body)
        {
             ApiResponse<VerificationResponse> localVarResponse = VerifyChallengeDepositWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Challenge Deposit The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>ApiResponse of VerificationResponse</returns>
        public ApiResponse< VerificationResponse > VerifyChallengeDepositWithHttpInfo (UpdateVerificationRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VerificationApi->VerifyChallengeDeposit");

            var localVarPath = "/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyChallengeDeposit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerificationResponse)));
        }

        /// <summary>
        /// Verify Challenge Deposit The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>Task of VerificationResponse</returns>
        public async System.Threading.Tasks.Task<VerificationResponse> VerifyChallengeDepositAsync (UpdateVerificationRequest body)
        {
             ApiResponse<VerificationResponse> localVarResponse = await VerifyChallengeDepositAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify Challenge Deposit The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">verification information</param>
        /// <returns>Task of ApiResponse (VerificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerificationResponse>> VerifyChallengeDepositAsyncWithHttpInfo (UpdateVerificationRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VerificationApi->VerifyChallengeDeposit");

            var localVarPath = "/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyChallengeDeposit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerificationResponse)));
        }

    }
}
