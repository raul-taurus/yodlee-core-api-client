/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDerivedApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Holding Summary
        /// </summary>
        /// <remarks>
        /// The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <returns>DerivedHoldingSummaryResponse</returns>
        DerivedHoldingSummaryResponse GetHoldingSummary (string accountIds = null, string classificationType = null, string include = null);

        /// <summary>
        /// Get Holding Summary
        /// </summary>
        /// <remarks>
        /// The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <returns>ApiResponse of DerivedHoldingSummaryResponse</returns>
        ApiResponse<DerivedHoldingSummaryResponse> GetHoldingSummaryWithHttpInfo (string accountIds = null, string classificationType = null, string include = null);
        /// <summary>
        /// Get Networth Summary
        /// </summary>
        /// <remarks>
        /// The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <returns>DerivedNetworthResponse</returns>
        DerivedNetworthResponse GetNetworth (string accountIds = null, string container = null, string fromDate = null, string include = null, string interval = null, int? skip = null, string toDate = null, int? top = null);

        /// <summary>
        /// Get Networth Summary
        /// </summary>
        /// <remarks>
        /// The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <returns>ApiResponse of DerivedNetworthResponse</returns>
        ApiResponse<DerivedNetworthResponse> GetNetworthWithHttpInfo (string accountIds = null, string container = null, string fromDate = null, string include = null, string interval = null, int? skip = null, string toDate = null, int? top = null);
        /// <summary>
        /// Get Transaction Summary
        /// </summary>
        /// <remarks>
        /// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <returns>DerivedTransactionSummaryResponse</returns>
        DerivedTransactionSummaryResponse GetTransactionSummary (string groupBy, string accountId = null, string categoryId = null, string categoryType = null, string fromDate = null, string include = null, bool? includeUserCategory = null, string interval = null, string toDate = null);

        /// <summary>
        /// Get Transaction Summary
        /// </summary>
        /// <remarks>
        /// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <returns>ApiResponse of DerivedTransactionSummaryResponse</returns>
        ApiResponse<DerivedTransactionSummaryResponse> GetTransactionSummaryWithHttpInfo (string groupBy, string accountId = null, string categoryId = null, string categoryType = null, string fromDate = null, string include = null, bool? includeUserCategory = null, string interval = null, string toDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Holding Summary
        /// </summary>
        /// <remarks>
        /// The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <returns>Task of DerivedHoldingSummaryResponse</returns>
        System.Threading.Tasks.Task<DerivedHoldingSummaryResponse> GetHoldingSummaryAsync (string accountIds = null, string classificationType = null, string include = null);

        /// <summary>
        /// Get Holding Summary
        /// </summary>
        /// <remarks>
        /// The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <returns>Task of ApiResponse (DerivedHoldingSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DerivedHoldingSummaryResponse>> GetHoldingSummaryAsyncWithHttpInfo (string accountIds = null, string classificationType = null, string include = null);
        /// <summary>
        /// Get Networth Summary
        /// </summary>
        /// <remarks>
        /// The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <returns>Task of DerivedNetworthResponse</returns>
        System.Threading.Tasks.Task<DerivedNetworthResponse> GetNetworthAsync (string accountIds = null, string container = null, string fromDate = null, string include = null, string interval = null, int? skip = null, string toDate = null, int? top = null);

        /// <summary>
        /// Get Networth Summary
        /// </summary>
        /// <remarks>
        /// The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <returns>Task of ApiResponse (DerivedNetworthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DerivedNetworthResponse>> GetNetworthAsyncWithHttpInfo (string accountIds = null, string container = null, string fromDate = null, string include = null, string interval = null, int? skip = null, string toDate = null, int? top = null);
        /// <summary>
        /// Get Transaction Summary
        /// </summary>
        /// <remarks>
        /// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <returns>Task of DerivedTransactionSummaryResponse</returns>
        System.Threading.Tasks.Task<DerivedTransactionSummaryResponse> GetTransactionSummaryAsync (string groupBy, string accountId = null, string categoryId = null, string categoryType = null, string fromDate = null, string include = null, bool? includeUserCategory = null, string interval = null, string toDate = null);

        /// <summary>
        /// Get Transaction Summary
        /// </summary>
        /// <remarks>
        /// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <returns>Task of ApiResponse (DerivedTransactionSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DerivedTransactionSummaryResponse>> GetTransactionSummaryAsyncWithHttpInfo (string groupBy, string accountId = null, string categoryId = null, string categoryType = null, string fromDate = null, string include = null, bool? includeUserCategory = null, string interval = null, string toDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DerivedApi : IDerivedApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DerivedApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedApi"/> class
        /// </summary>
        /// <returns></returns>
        public DerivedApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DerivedApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Holding Summary The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <returns>DerivedHoldingSummaryResponse</returns>
        public DerivedHoldingSummaryResponse GetHoldingSummary (string accountIds = null, string classificationType = null, string include = null)
        {
             ApiResponse<DerivedHoldingSummaryResponse> localVarResponse = GetHoldingSummaryWithHttpInfo(accountIds, classificationType, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holding Summary The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <returns>ApiResponse of DerivedHoldingSummaryResponse</returns>
        public ApiResponse< DerivedHoldingSummaryResponse > GetHoldingSummaryWithHttpInfo (string accountIds = null, string classificationType = null, string include = null)
        {

            var localVarPath = "/derived/holdingSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountIds", accountIds)); // query parameter
            if (classificationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classificationType", classificationType)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldingSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DerivedHoldingSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DerivedHoldingSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DerivedHoldingSummaryResponse)));
        }

        /// <summary>
        /// Get Holding Summary The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <returns>Task of DerivedHoldingSummaryResponse</returns>
        public async System.Threading.Tasks.Task<DerivedHoldingSummaryResponse> GetHoldingSummaryAsync (string accountIds = null, string classificationType = null, string include = null)
        {
             ApiResponse<DerivedHoldingSummaryResponse> localVarResponse = await GetHoldingSummaryAsyncWithHttpInfo(accountIds, classificationType, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Holding Summary The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <returns>Task of ApiResponse (DerivedHoldingSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DerivedHoldingSummaryResponse>> GetHoldingSummaryAsyncWithHttpInfo (string accountIds = null, string classificationType = null, string include = null)
        {

            var localVarPath = "/derived/holdingSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountIds", accountIds)); // query parameter
            if (classificationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classificationType", classificationType)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldingSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DerivedHoldingSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DerivedHoldingSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DerivedHoldingSummaryResponse)));
        }

        /// <summary>
        /// Get Networth Summary The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <returns>DerivedNetworthResponse</returns>
        public DerivedNetworthResponse GetNetworth (string accountIds = null, string container = null, string fromDate = null, string include = null, string interval = null, int? skip = null, string toDate = null, int? top = null)
        {
             ApiResponse<DerivedNetworthResponse> localVarResponse = GetNetworthWithHttpInfo(accountIds, container, fromDate, include, interval, skip, toDate, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Networth Summary The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <returns>ApiResponse of DerivedNetworthResponse</returns>
        public ApiResponse< DerivedNetworthResponse > GetNetworthWithHttpInfo (string accountIds = null, string container = null, string fromDate = null, string include = null, string interval = null, int? skip = null, string toDate = null, int? top = null)
        {

            var localVarPath = "/derived/networth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountIds", accountIds)); // query parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "top", top)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNetworth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DerivedNetworthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DerivedNetworthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DerivedNetworthResponse)));
        }

        /// <summary>
        /// Get Networth Summary The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <returns>Task of DerivedNetworthResponse</returns>
        public async System.Threading.Tasks.Task<DerivedNetworthResponse> GetNetworthAsync (string accountIds = null, string container = null, string fromDate = null, string include = null, string interval = null, int? skip = null, string toDate = null, int? top = null)
        {
             ApiResponse<DerivedNetworthResponse> localVarResponse = await GetNetworthAsyncWithHttpInfo(accountIds, container, fromDate, include, interval, skip, toDate, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Networth Summary The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <returns>Task of ApiResponse (DerivedNetworthResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DerivedNetworthResponse>> GetNetworthAsyncWithHttpInfo (string accountIds = null, string container = null, string fromDate = null, string include = null, string interval = null, int? skip = null, string toDate = null, int? top = null)
        {

            var localVarPath = "/derived/networth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountIds", accountIds)); // query parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "top", top)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNetworth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DerivedNetworthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DerivedNetworthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DerivedNetworthResponse)));
        }

        /// <summary>
        /// Get Transaction Summary The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <returns>DerivedTransactionSummaryResponse</returns>
        public DerivedTransactionSummaryResponse GetTransactionSummary (string groupBy, string accountId = null, string categoryId = null, string categoryType = null, string fromDate = null, string include = null, bool? includeUserCategory = null, string interval = null, string toDate = null)
        {
             ApiResponse<DerivedTransactionSummaryResponse> localVarResponse = GetTransactionSummaryWithHttpInfo(groupBy, accountId, categoryId, categoryType, fromDate, include, includeUserCategory, interval, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Summary The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <returns>ApiResponse of DerivedTransactionSummaryResponse</returns>
        public ApiResponse< DerivedTransactionSummaryResponse > GetTransactionSummaryWithHttpInfo (string groupBy, string accountId = null, string categoryId = null, string categoryType = null, string fromDate = null, string include = null, bool? includeUserCategory = null, string interval = null, string toDate = null)
        {
            // verify the required parameter 'groupBy' is set
            if (groupBy == null)
                throw new ApiException(400, "Missing required parameter 'groupBy' when calling DerivedApi->GetTransactionSummary");

            var localVarPath = "/derived/transactionSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (categoryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryType", categoryType)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupBy", groupBy)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (includeUserCategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeUserCategory", includeUserCategory)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DerivedTransactionSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DerivedTransactionSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DerivedTransactionSummaryResponse)));
        }

        /// <summary>
        /// Get Transaction Summary The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <returns>Task of DerivedTransactionSummaryResponse</returns>
        public async System.Threading.Tasks.Task<DerivedTransactionSummaryResponse> GetTransactionSummaryAsync (string groupBy, string accountId = null, string categoryId = null, string categoryType = null, string fromDate = null, string include = null, bool? includeUserCategory = null, string interval = null, string toDate = null)
        {
             ApiResponse<DerivedTransactionSummaryResponse> localVarResponse = await GetTransactionSummaryAsyncWithHttpInfo(groupBy, accountId, categoryId, categoryType, fromDate, include, includeUserCategory, interval, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Transaction Summary The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <returns>Task of ApiResponse (DerivedTransactionSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DerivedTransactionSummaryResponse>> GetTransactionSummaryAsyncWithHttpInfo (string groupBy, string accountId = null, string categoryId = null, string categoryType = null, string fromDate = null, string include = null, bool? includeUserCategory = null, string interval = null, string toDate = null)
        {
            // verify the required parameter 'groupBy' is set
            if (groupBy == null)
                throw new ApiException(400, "Missing required parameter 'groupBy' when calling DerivedApi->GetTransactionSummary");

            var localVarPath = "/derived/transactionSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (categoryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryType", categoryType)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupBy", groupBy)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (includeUserCategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeUserCategory", includeUserCategory)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DerivedTransactionSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DerivedTransactionSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DerivedTransactionSummaryResponse)));
        }

    }
}
