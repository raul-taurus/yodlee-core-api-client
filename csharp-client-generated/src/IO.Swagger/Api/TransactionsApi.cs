/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITransactionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <returns></returns>
        void CreateOrRunTransactionCategorizationRules (string action = null, string ruleParam = null);

        /// <summary>
        /// Create or Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateOrRunTransactionCategorizationRulesWithHttpInfo (string action = null, string ruleParam = null);
        /// <summary>
        /// Create Category
        /// </summary>
        /// <remarks>
        /// The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User Transaction Category in JSON format</param>
        /// <returns></returns>
        void CreateTransactionCategory (TransactionCategoryRequest body);

        /// <summary>
        /// Create Category
        /// </summary>
        /// <remarks>
        /// The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User Transaction Category in JSON format</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateTransactionCategoryWithHttpInfo (TransactionCategoryRequest body);
        /// <summary>
        /// Delete Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <returns></returns>
        void DeleteTransactionCategorizationRule (long? ruleId);

        /// <summary>
        /// Delete Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransactionCategorizationRuleWithHttpInfo (long? ruleId);
        /// <summary>
        /// Delete Category
        /// </summary>
        /// <remarks>
        /// The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <returns></returns>
        void DeleteTransactionCategory (long? categoryId);

        /// <summary>
        /// Delete Category
        /// </summary>
        /// <remarks>
        /// The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransactionCategoryWithHttpInfo (long? categoryId);
        /// <summary>
        /// Get Transaction Category List
        /// </summary>
        /// <remarks>
        /// The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionCategoryResponse</returns>
        TransactionCategoryResponse GetTransactionCategories ();

        /// <summary>
        /// Get Transaction Category List
        /// </summary>
        /// <remarks>
        /// The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionCategoryResponse</returns>
        ApiResponse<TransactionCategoryResponse> GetTransactionCategoriesWithHttpInfo ();
        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionCategorizationRuleResponse</returns>
        TransactionCategorizationRuleResponse GetTransactionCategorizationRules ();

        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionCategorizationRuleResponse</returns>
        ApiResponse<TransactionCategorizationRuleResponse> GetTransactionCategorizationRulesWithHttpInfo ();
        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TransactionCategorizationRule&gt;</returns>
        List<TransactionCategorizationRule> GetTransactionCategorizationRulesDeprecated ();

        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TransactionCategorizationRule&gt;</returns>
        ApiResponse<List<TransactionCategorizationRule>> GetTransactionCategorizationRulesDeprecatedWithHttpInfo ();
        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#x27;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#x27;&#x27;U&#x27;&#x27;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/transaction-data-enrichment/docs\&quot;&gt;Transaction Data Enrichment (TDE)&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse GetTransactions (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, int? skip = null, string toDate = null, int? top = null, string type = null);

        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#x27;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#x27;&#x27;U&#x27;&#x27;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/transaction-data-enrichment/docs\&quot;&gt;Transaction Data Enrichment (TDE)&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> GetTransactionsWithHttpInfo (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, int? skip = null, string toDate = null, int? top = null, string type = null);
        /// <summary>
        /// Get Transactions Count
        /// </summary>
        /// <remarks>
        /// The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <returns>TransactionCountResponse</returns>
        TransactionCountResponse GetTransactionsCount (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, string toDate = null, string type = null);

        /// <summary>
        /// Get Transactions Count
        /// </summary>
        /// <remarks>
        /// The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <returns>ApiResponse of TransactionCountResponse</returns>
        ApiResponse<TransactionCountResponse> GetTransactionsCountWithHttpInfo (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, string toDate = null, string type = null);
        /// <summary>
        /// Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <returns></returns>
        void RunTransactionCategorizationRule (string action, long? ruleId);

        /// <summary>
        /// Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RunTransactionCategorizationRuleWithHttpInfo (string action, long? ruleId);
        /// <summary>
        /// Update Transaction
        /// </summary>
        /// <remarks>
        /// The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionRequest</param>
        /// <param name="transactionId">transactionId</param>
        /// <returns></returns>
        void UpdateTransaction (TransactionRequest body, long? transactionId);

        /// <summary>
        /// Update Transaction
        /// </summary>
        /// <remarks>
        /// The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionRequest</param>
        /// <param name="transactionId">transactionId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTransactionWithHttpInfo (TransactionRequest body, long? transactionId);
        /// <summary>
        /// Update Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionCategoriesRuleRequest</param>
        /// <param name="ruleId">ruleId</param>
        /// <returns></returns>
        void UpdateTransactionCategorizationRule (TransactionCategorizationRuleRequest body, long? ruleId);

        /// <summary>
        /// Update Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionCategoriesRuleRequest</param>
        /// <param name="ruleId">ruleId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTransactionCategorizationRuleWithHttpInfo (TransactionCategorizationRuleRequest body, long? ruleId);
        /// <summary>
        /// Update Category
        /// </summary>
        /// <remarks>
        /// The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">updateCategoryRequest</param>
        /// <returns></returns>
        void UpdateTransactionCategory (UpdateCategoryRequest body);

        /// <summary>
        /// Update Category
        /// </summary>
        /// <remarks>
        /// The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">updateCategoryRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTransactionCategoryWithHttpInfo (UpdateCategoryRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create or Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateOrRunTransactionCategorizationRulesAsync (string action = null, string ruleParam = null);

        /// <summary>
        /// Create or Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrRunTransactionCategorizationRulesAsyncWithHttpInfo (string action = null, string ruleParam = null);
        /// <summary>
        /// Create Category
        /// </summary>
        /// <remarks>
        /// The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User Transaction Category in JSON format</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateTransactionCategoryAsync (TransactionCategoryRequest body);

        /// <summary>
        /// Create Category
        /// </summary>
        /// <remarks>
        /// The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User Transaction Category in JSON format</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTransactionCategoryAsyncWithHttpInfo (TransactionCategoryRequest body);
        /// <summary>
        /// Delete Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransactionCategorizationRuleAsync (long? ruleId);

        /// <summary>
        /// Delete Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionCategorizationRuleAsyncWithHttpInfo (long? ruleId);
        /// <summary>
        /// Delete Category
        /// </summary>
        /// <remarks>
        /// The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransactionCategoryAsync (long? categoryId);

        /// <summary>
        /// Delete Category
        /// </summary>
        /// <remarks>
        /// The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionCategoryAsyncWithHttpInfo (long? categoryId);
        /// <summary>
        /// Get Transaction Category List
        /// </summary>
        /// <remarks>
        /// The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionCategoryResponse</returns>
        System.Threading.Tasks.Task<TransactionCategoryResponse> GetTransactionCategoriesAsync ();

        /// <summary>
        /// Get Transaction Category List
        /// </summary>
        /// <remarks>
        /// The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCategoryResponse>> GetTransactionCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionCategorizationRuleResponse</returns>
        System.Threading.Tasks.Task<TransactionCategorizationRuleResponse> GetTransactionCategorizationRulesAsync ();

        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionCategorizationRuleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCategorizationRuleResponse>> GetTransactionCategorizationRulesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TransactionCategorizationRule&gt;</returns>
        System.Threading.Tasks.Task<List<TransactionCategorizationRule>> GetTransactionCategorizationRulesDeprecatedAsync ();

        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TransactionCategorizationRule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionCategorizationRule>>> GetTransactionCategorizationRulesDeprecatedAsyncWithHttpInfo ();
        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#x27;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#x27;&#x27;U&#x27;&#x27;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/transaction-data-enrichment/docs\&quot;&gt;Transaction Data Enrichment (TDE)&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> GetTransactionsAsync (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, int? skip = null, string toDate = null, int? top = null, string type = null);

        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#x27;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#x27;&#x27;U&#x27;&#x27;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/transaction-data-enrichment/docs\&quot;&gt;Transaction Data Enrichment (TDE)&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> GetTransactionsAsyncWithHttpInfo (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, int? skip = null, string toDate = null, int? top = null, string type = null);
        /// <summary>
        /// Get Transactions Count
        /// </summary>
        /// <remarks>
        /// The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <returns>Task of TransactionCountResponse</returns>
        System.Threading.Tasks.Task<TransactionCountResponse> GetTransactionsCountAsync (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, string toDate = null, string type = null);

        /// <summary>
        /// Get Transactions Count
        /// </summary>
        /// <remarks>
        /// The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <returns>Task of ApiResponse (TransactionCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCountResponse>> GetTransactionsCountAsyncWithHttpInfo (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, string toDate = null, string type = null);
        /// <summary>
        /// Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RunTransactionCategorizationRuleAsync (string action, long? ruleId);

        /// <summary>
        /// Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunTransactionCategorizationRuleAsyncWithHttpInfo (string action, long? ruleId);
        /// <summary>
        /// Update Transaction
        /// </summary>
        /// <remarks>
        /// The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionRequest</param>
        /// <param name="transactionId">transactionId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTransactionAsync (TransactionRequest body, long? transactionId);

        /// <summary>
        /// Update Transaction
        /// </summary>
        /// <remarks>
        /// The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionRequest</param>
        /// <param name="transactionId">transactionId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionAsyncWithHttpInfo (TransactionRequest body, long? transactionId);
        /// <summary>
        /// Update Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionCategoriesRuleRequest</param>
        /// <param name="ruleId">ruleId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTransactionCategorizationRuleAsync (TransactionCategorizationRuleRequest body, long? ruleId);

        /// <summary>
        /// Update Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionCategoriesRuleRequest</param>
        /// <param name="ruleId">ruleId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionCategorizationRuleAsyncWithHttpInfo (TransactionCategorizationRuleRequest body, long? ruleId);
        /// <summary>
        /// Update Category
        /// </summary>
        /// <remarks>
        /// The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">updateCategoryRequest</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTransactionCategoryAsync (UpdateCategoryRequest body);

        /// <summary>
        /// Update Category
        /// </summary>
        /// <remarks>
        /// The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">updateCategoryRequest</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionCategoryAsyncWithHttpInfo (UpdateCategoryRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TransactionsApi : ITransactionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransactionsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create or Run Transaction Categorization Rule The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <returns></returns>
        public void CreateOrRunTransactionCategorizationRules (string action = null, string ruleParam = null)
        {
             CreateOrRunTransactionCategorizationRulesWithHttpInfo(action, ruleParam);
        }

        /// <summary>
        /// Create or Run Transaction Categorization Rule The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateOrRunTransactionCategorizationRulesWithHttpInfo (string action = null, string ruleParam = null)
        {

            var localVarPath = "/transactions/categories/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (ruleParam != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ruleParam", ruleParam)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrRunTransactionCategorizationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create or Run Transaction Categorization Rule The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateOrRunTransactionCategorizationRulesAsync (string action = null, string ruleParam = null)
        {
             await CreateOrRunTransactionCategorizationRulesAsyncWithHttpInfo(action, ruleParam);

        }

        /// <summary>
        /// Create or Run Transaction Categorization Rule The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrRunTransactionCategorizationRulesAsyncWithHttpInfo (string action = null, string ruleParam = null)
        {

            var localVarPath = "/transactions/categories/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (ruleParam != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ruleParam", ruleParam)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrRunTransactionCategorizationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Category The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User Transaction Category in JSON format</param>
        /// <returns></returns>
        public void CreateTransactionCategory (TransactionCategoryRequest body)
        {
             CreateTransactionCategoryWithHttpInfo(body);
        }

        /// <summary>
        /// Create Category The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User Transaction Category in JSON format</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateTransactionCategoryWithHttpInfo (TransactionCategoryRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->CreateTransactionCategory");

            var localVarPath = "/transactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransactionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Category The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User Transaction Category in JSON format</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateTransactionCategoryAsync (TransactionCategoryRequest body)
        {
             await CreateTransactionCategoryAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Category The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User Transaction Category in JSON format</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTransactionCategoryAsyncWithHttpInfo (TransactionCategoryRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->CreateTransactionCategory");

            var localVarPath = "/transactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransactionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Transaction Categorization Rule The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <returns></returns>
        public void DeleteTransactionCategorizationRule (long? ruleId)
        {
             DeleteTransactionCategorizationRuleWithHttpInfo(ruleId);
        }

        /// <summary>
        /// Delete Transaction Categorization Rule The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTransactionCategorizationRuleWithHttpInfo (long? ruleId)
        {
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling TransactionsApi->DeleteTransactionCategorizationRule");

            var localVarPath = "/transactions/categories/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTransactionCategorizationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Transaction Categorization Rule The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransactionCategorizationRuleAsync (long? ruleId)
        {
             await DeleteTransactionCategorizationRuleAsyncWithHttpInfo(ruleId);

        }

        /// <summary>
        /// Delete Transaction Categorization Rule The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionCategorizationRuleAsyncWithHttpInfo (long? ruleId)
        {
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling TransactionsApi->DeleteTransactionCategorizationRule");

            var localVarPath = "/transactions/categories/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTransactionCategorizationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Category The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <returns></returns>
        public void DeleteTransactionCategory (long? categoryId)
        {
             DeleteTransactionCategoryWithHttpInfo(categoryId);
        }

        /// <summary>
        /// Delete Category The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTransactionCategoryWithHttpInfo (long? categoryId)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling TransactionsApi->DeleteTransactionCategory");

            var localVarPath = "/transactions/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTransactionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Category The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransactionCategoryAsync (long? categoryId)
        {
             await DeleteTransactionCategoryAsyncWithHttpInfo(categoryId);

        }

        /// <summary>
        /// Delete Category The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionCategoryAsyncWithHttpInfo (long? categoryId)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling TransactionsApi->DeleteTransactionCategory");

            var localVarPath = "/transactions/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTransactionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Transaction Category List The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionCategoryResponse</returns>
        public TransactionCategoryResponse GetTransactionCategories ()
        {
             ApiResponse<TransactionCategoryResponse> localVarResponse = GetTransactionCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Category List The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionCategoryResponse</returns>
        public ApiResponse< TransactionCategoryResponse > GetTransactionCategoriesWithHttpInfo ()
        {

            var localVarPath = "/transactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCategoryResponse)));
        }

        /// <summary>
        /// Get Transaction Category List The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionCategoryResponse</returns>
        public async System.Threading.Tasks.Task<TransactionCategoryResponse> GetTransactionCategoriesAsync ()
        {
             ApiResponse<TransactionCategoryResponse> localVarResponse = await GetTransactionCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Transaction Category List The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionCategoryResponse>> GetTransactionCategoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/transactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCategoryResponse)));
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionCategorizationRuleResponse</returns>
        public TransactionCategorizationRuleResponse GetTransactionCategorizationRules ()
        {
             ApiResponse<TransactionCategorizationRuleResponse> localVarResponse = GetTransactionCategorizationRulesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionCategorizationRuleResponse</returns>
        public ApiResponse< TransactionCategorizationRuleResponse > GetTransactionCategorizationRulesWithHttpInfo ()
        {

            var localVarPath = "/transactions/categories/txnRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCategorizationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCategorizationRuleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionCategorizationRuleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCategorizationRuleResponse)));
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionCategorizationRuleResponse</returns>
        public async System.Threading.Tasks.Task<TransactionCategorizationRuleResponse> GetTransactionCategorizationRulesAsync ()
        {
             ApiResponse<TransactionCategorizationRuleResponse> localVarResponse = await GetTransactionCategorizationRulesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionCategorizationRuleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionCategorizationRuleResponse>> GetTransactionCategorizationRulesAsyncWithHttpInfo ()
        {

            var localVarPath = "/transactions/categories/txnRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCategorizationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCategorizationRuleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionCategorizationRuleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCategorizationRuleResponse)));
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TransactionCategorizationRule&gt;</returns>
        public List<TransactionCategorizationRule> GetTransactionCategorizationRulesDeprecated ()
        {
             ApiResponse<List<TransactionCategorizationRule>> localVarResponse = GetTransactionCategorizationRulesDeprecatedWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TransactionCategorizationRule&gt;</returns>
        public ApiResponse< List<TransactionCategorizationRule> > GetTransactionCategorizationRulesDeprecatedWithHttpInfo ()
        {

            var localVarPath = "/transactions/categories/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCategorizationRulesDeprecated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionCategorizationRule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionCategorizationRule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionCategorizationRule>)));
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TransactionCategorizationRule&gt;</returns>
        public async System.Threading.Tasks.Task<List<TransactionCategorizationRule>> GetTransactionCategorizationRulesDeprecatedAsync ()
        {
             ApiResponse<List<TransactionCategorizationRule>> localVarResponse = await GetTransactionCategorizationRulesDeprecatedAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TransactionCategorizationRule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionCategorizationRule>>> GetTransactionCategorizationRulesDeprecatedAsyncWithHttpInfo ()
        {

            var localVarPath = "/transactions/categories/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCategorizationRulesDeprecated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionCategorizationRule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionCategorizationRule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionCategorizationRule>)));
        }

        /// <summary>
        /// Get Transactions The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#x27;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#x27;&#x27;U&#x27;&#x27;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/transaction-data-enrichment/docs\&quot;&gt;Transaction Data Enrichment (TDE)&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse GetTransactions (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, int? skip = null, string toDate = null, int? top = null, string type = null)
        {
             ApiResponse<TransactionResponse> localVarResponse = GetTransactionsWithHttpInfo(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transactions The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#x27;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#x27;&#x27;U&#x27;&#x27;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/transaction-data-enrichment/docs\&quot;&gt;Transaction Data Enrichment (TDE)&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse< TransactionResponse > GetTransactionsWithHttpInfo (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, int? skip = null, string toDate = null, int? top = null, string type = null)
        {

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (baseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "baseType", baseType)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (categoryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryType", categoryType)); // query parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (detailCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detailCategoryId", detailCategoryId)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (highLevelCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "highLevelCategoryId", highLevelCategoryId)); // query parameter
            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyword", keyword)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "top", top)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Get Transactions The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#x27;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#x27;&#x27;U&#x27;&#x27;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/transaction-data-enrichment/docs\&quot;&gt;Transaction Data Enrichment (TDE)&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> GetTransactionsAsync (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, int? skip = null, string toDate = null, int? top = null, string type = null)
        {
             ApiResponse<TransactionResponse> localVarResponse = await GetTransactionsAsyncWithHttpInfo(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Transactions The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#x27;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#x27;&#x27;U&#x27;&#x27;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/transaction-data-enrichment/docs\&quot;&gt;Transaction Data Enrichment (TDE)&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> GetTransactionsAsyncWithHttpInfo (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, int? skip = null, string toDate = null, int? top = null, string type = null)
        {

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (baseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "baseType", baseType)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (categoryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryType", categoryType)); // query parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (detailCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detailCategoryId", detailCategoryId)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (highLevelCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "highLevelCategoryId", highLevelCategoryId)); // query parameter
            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyword", keyword)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "top", top)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Get Transactions Count The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <returns>TransactionCountResponse</returns>
        public TransactionCountResponse GetTransactionsCount (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, string toDate = null, string type = null)
        {
             ApiResponse<TransactionCountResponse> localVarResponse = GetTransactionsCountWithHttpInfo(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transactions Count The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <returns>ApiResponse of TransactionCountResponse</returns>
        public ApiResponse< TransactionCountResponse > GetTransactionsCountWithHttpInfo (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, string toDate = null, string type = null)
        {

            var localVarPath = "/transactions/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (baseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "baseType", baseType)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (categoryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryType", categoryType)); // query parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (detailCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detailCategoryId", detailCategoryId)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (highLevelCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "highLevelCategoryId", highLevelCategoryId)); // query parameter
            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyword", keyword)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCountResponse)));
        }

        /// <summary>
        /// Get Transactions Count The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <returns>Task of TransactionCountResponse</returns>
        public async System.Threading.Tasks.Task<TransactionCountResponse> GetTransactionsCountAsync (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, string toDate = null, string type = null)
        {
             ApiResponse<TransactionCountResponse> localVarResponse = await GetTransactionsCountAsyncWithHttpInfo(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Transactions Count The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <returns>Task of ApiResponse (TransactionCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionCountResponse>> GetTransactionsCountAsyncWithHttpInfo (string accountId = null, string baseType = null, string categoryId = null, string categoryType = null, string container = null, string detailCategoryId = null, string fromDate = null, string highLevelCategoryId = null, string keyword = null, string toDate = null, string type = null)
        {

            var localVarPath = "/transactions/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (baseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "baseType", baseType)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (categoryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryType", categoryType)); // query parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (detailCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detailCategoryId", detailCategoryId)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (highLevelCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "highLevelCategoryId", highLevelCategoryId)); // query parameter
            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyword", keyword)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCountResponse)));
        }

        /// <summary>
        /// Run Transaction Categorization Rule The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <returns></returns>
        public void RunTransactionCategorizationRule (string action, long? ruleId)
        {
             RunTransactionCategorizationRuleWithHttpInfo(action, ruleId);
        }

        /// <summary>
        /// Run Transaction Categorization Rule The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RunTransactionCategorizationRuleWithHttpInfo (string action, long? ruleId)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling TransactionsApi->RunTransactionCategorizationRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling TransactionsApi->RunTransactionCategorizationRule");

            var localVarPath = "/transactions/categories/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunTransactionCategorizationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Run Transaction Categorization Rule The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RunTransactionCategorizationRuleAsync (string action, long? ruleId)
        {
             await RunTransactionCategorizationRuleAsyncWithHttpInfo(action, ruleId);

        }

        /// <summary>
        /// Run Transaction Categorization Rule The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RunTransactionCategorizationRuleAsyncWithHttpInfo (string action, long? ruleId)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling TransactionsApi->RunTransactionCategorizationRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling TransactionsApi->RunTransactionCategorizationRule");

            var localVarPath = "/transactions/categories/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunTransactionCategorizationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Transaction The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionRequest</param>
        /// <param name="transactionId">transactionId</param>
        /// <returns></returns>
        public void UpdateTransaction (TransactionRequest body, long? transactionId)
        {
             UpdateTransactionWithHttpInfo(body, transactionId);
        }

        /// <summary>
        /// Update Transaction The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionRequest</param>
        /// <param name="transactionId">transactionId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTransactionWithHttpInfo (TransactionRequest body, long? transactionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->UpdateTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionsApi->UpdateTransaction");

            var localVarPath = "/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Transaction The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionRequest</param>
        /// <param name="transactionId">transactionId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTransactionAsync (TransactionRequest body, long? transactionId)
        {
             await UpdateTransactionAsyncWithHttpInfo(body, transactionId);

        }

        /// <summary>
        /// Update Transaction The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionRequest</param>
        /// <param name="transactionId">transactionId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionAsyncWithHttpInfo (TransactionRequest body, long? transactionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->UpdateTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionsApi->UpdateTransaction");

            var localVarPath = "/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Transaction Categorization Rule The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionCategoriesRuleRequest</param>
        /// <param name="ruleId">ruleId</param>
        /// <returns></returns>
        public void UpdateTransactionCategorizationRule (TransactionCategorizationRuleRequest body, long? ruleId)
        {
             UpdateTransactionCategorizationRuleWithHttpInfo(body, ruleId);
        }

        /// <summary>
        /// Update Transaction Categorization Rule The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionCategoriesRuleRequest</param>
        /// <param name="ruleId">ruleId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTransactionCategorizationRuleWithHttpInfo (TransactionCategorizationRuleRequest body, long? ruleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->UpdateTransactionCategorizationRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling TransactionsApi->UpdateTransactionCategorizationRule");

            var localVarPath = "/transactions/categories/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransactionCategorizationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Transaction Categorization Rule The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionCategoriesRuleRequest</param>
        /// <param name="ruleId">ruleId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTransactionCategorizationRuleAsync (TransactionCategorizationRuleRequest body, long? ruleId)
        {
             await UpdateTransactionCategorizationRuleAsyncWithHttpInfo(body, ruleId);

        }

        /// <summary>
        /// Update Transaction Categorization Rule The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">transactionCategoriesRuleRequest</param>
        /// <param name="ruleId">ruleId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionCategorizationRuleAsyncWithHttpInfo (TransactionCategorizationRuleRequest body, long? ruleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->UpdateTransactionCategorizationRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling TransactionsApi->UpdateTransactionCategorizationRule");

            var localVarPath = "/transactions/categories/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransactionCategorizationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Category The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">updateCategoryRequest</param>
        /// <returns></returns>
        public void UpdateTransactionCategory (UpdateCategoryRequest body)
        {
             UpdateTransactionCategoryWithHttpInfo(body);
        }

        /// <summary>
        /// Update Category The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">updateCategoryRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTransactionCategoryWithHttpInfo (UpdateCategoryRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->UpdateTransactionCategory");

            var localVarPath = "/transactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransactionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Category The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">updateCategoryRequest</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTransactionCategoryAsync (UpdateCategoryRequest body)
        {
             await UpdateTransactionCategoryAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update Category The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">updateCategoryRequest</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionCategoryAsyncWithHttpInfo (UpdateCategoryRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->UpdateTransactionCategory");

            var localVarPath = "/transactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransactionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
