/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDataExtractsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Events
        /// </summary>
        /// <remarks>
        /// The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#x27;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event Name</param>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>DataExtractsEventResponse</returns>
        DataExtractsEventResponse GetDataExtractsEvents (string eventName, string fromDate, string toDate);

        /// <summary>
        /// Get Events
        /// </summary>
        /// <remarks>
        /// The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#x27;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event Name</param>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>ApiResponse of DataExtractsEventResponse</returns>
        ApiResponse<DataExtractsEventResponse> GetDataExtractsEventsWithHttpInfo (string eventName, string fromDate, string toDate);
        /// <summary>
        /// Get userData
        /// </summary>
        /// <remarks>
        /// The get user data service is used to get a user&#x27;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="loginName">Login Name</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>DataExtractsUserDataResponse</returns>
        DataExtractsUserDataResponse GetDataExtractsUserData (string fromDate, string loginName, string toDate);

        /// <summary>
        /// Get userData
        /// </summary>
        /// <remarks>
        /// The get user data service is used to get a user&#x27;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="loginName">Login Name</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>ApiResponse of DataExtractsUserDataResponse</returns>
        ApiResponse<DataExtractsUserDataResponse> GetDataExtractsUserDataWithHttpInfo (string fromDate, string loginName, string toDate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Events
        /// </summary>
        /// <remarks>
        /// The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#x27;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event Name</param>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>Task of DataExtractsEventResponse</returns>
        System.Threading.Tasks.Task<DataExtractsEventResponse> GetDataExtractsEventsAsync (string eventName, string fromDate, string toDate);

        /// <summary>
        /// Get Events
        /// </summary>
        /// <remarks>
        /// The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#x27;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event Name</param>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>Task of ApiResponse (DataExtractsEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataExtractsEventResponse>> GetDataExtractsEventsAsyncWithHttpInfo (string eventName, string fromDate, string toDate);
        /// <summary>
        /// Get userData
        /// </summary>
        /// <remarks>
        /// The get user data service is used to get a user&#x27;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="loginName">Login Name</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>Task of DataExtractsUserDataResponse</returns>
        System.Threading.Tasks.Task<DataExtractsUserDataResponse> GetDataExtractsUserDataAsync (string fromDate, string loginName, string toDate);

        /// <summary>
        /// Get userData
        /// </summary>
        /// <remarks>
        /// The get user data service is used to get a user&#x27;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="loginName">Login Name</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>Task of ApiResponse (DataExtractsUserDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataExtractsUserDataResponse>> GetDataExtractsUserDataAsyncWithHttpInfo (string fromDate, string loginName, string toDate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DataExtractsApi : IDataExtractsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExtractsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataExtractsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExtractsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DataExtractsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExtractsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataExtractsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Events The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#x27;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event Name</param>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>DataExtractsEventResponse</returns>
        public DataExtractsEventResponse GetDataExtractsEvents (string eventName, string fromDate, string toDate)
        {
             ApiResponse<DataExtractsEventResponse> localVarResponse = GetDataExtractsEventsWithHttpInfo(eventName, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Events The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#x27;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event Name</param>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>ApiResponse of DataExtractsEventResponse</returns>
        public ApiResponse< DataExtractsEventResponse > GetDataExtractsEventsWithHttpInfo (string eventName, string fromDate, string toDate)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling DataExtractsApi->GetDataExtractsEvents");
            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new ApiException(400, "Missing required parameter 'fromDate' when calling DataExtractsApi->GetDataExtractsEvents");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling DataExtractsApi->GetDataExtractsEvents");

            var localVarPath = "/dataExtracts/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventName", eventName)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataExtractsEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExtractsEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExtractsEventResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExtractsEventResponse)));
        }

        /// <summary>
        /// Get Events The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#x27;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event Name</param>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>Task of DataExtractsEventResponse</returns>
        public async System.Threading.Tasks.Task<DataExtractsEventResponse> GetDataExtractsEventsAsync (string eventName, string fromDate, string toDate)
        {
             ApiResponse<DataExtractsEventResponse> localVarResponse = await GetDataExtractsEventsAsyncWithHttpInfo(eventName, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Events The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#x27;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event Name</param>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>Task of ApiResponse (DataExtractsEventResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataExtractsEventResponse>> GetDataExtractsEventsAsyncWithHttpInfo (string eventName, string fromDate, string toDate)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling DataExtractsApi->GetDataExtractsEvents");
            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new ApiException(400, "Missing required parameter 'fromDate' when calling DataExtractsApi->GetDataExtractsEvents");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling DataExtractsApi->GetDataExtractsEvents");

            var localVarPath = "/dataExtracts/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventName", eventName)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataExtractsEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExtractsEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExtractsEventResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExtractsEventResponse)));
        }

        /// <summary>
        /// Get userData The get user data service is used to get a user&#x27;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="loginName">Login Name</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>DataExtractsUserDataResponse</returns>
        public DataExtractsUserDataResponse GetDataExtractsUserData (string fromDate, string loginName, string toDate)
        {
             ApiResponse<DataExtractsUserDataResponse> localVarResponse = GetDataExtractsUserDataWithHttpInfo(fromDate, loginName, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get userData The get user data service is used to get a user&#x27;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="loginName">Login Name</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>ApiResponse of DataExtractsUserDataResponse</returns>
        public ApiResponse< DataExtractsUserDataResponse > GetDataExtractsUserDataWithHttpInfo (string fromDate, string loginName, string toDate)
        {
            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new ApiException(400, "Missing required parameter 'fromDate' when calling DataExtractsApi->GetDataExtractsUserData");
            // verify the required parameter 'loginName' is set
            if (loginName == null)
                throw new ApiException(400, "Missing required parameter 'loginName' when calling DataExtractsApi->GetDataExtractsUserData");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling DataExtractsApi->GetDataExtractsUserData");

            var localVarPath = "/dataExtracts/userData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (loginName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loginName", loginName)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataExtractsUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExtractsUserDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExtractsUserDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExtractsUserDataResponse)));
        }

        /// <summary>
        /// Get userData The get user data service is used to get a user&#x27;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="loginName">Login Name</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>Task of DataExtractsUserDataResponse</returns>
        public async System.Threading.Tasks.Task<DataExtractsUserDataResponse> GetDataExtractsUserDataAsync (string fromDate, string loginName, string toDate)
        {
             ApiResponse<DataExtractsUserDataResponse> localVarResponse = await GetDataExtractsUserDataAsyncWithHttpInfo(fromDate, loginName, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get userData The get user data service is used to get a user&#x27;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;For more information, refer to the &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/data-extracts/docs/overview\&quot;&gt;Data Extracts&lt;/a&gt; page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <param name="loginName">Login Name</param>
        /// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
        /// <returns>Task of ApiResponse (DataExtractsUserDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataExtractsUserDataResponse>> GetDataExtractsUserDataAsyncWithHttpInfo (string fromDate, string loginName, string toDate)
        {
            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new ApiException(400, "Missing required parameter 'fromDate' when calling DataExtractsApi->GetDataExtractsUserData");
            // verify the required parameter 'loginName' is set
            if (loginName == null)
                throw new ApiException(400, "Missing required parameter 'loginName' when calling DataExtractsApi->GetDataExtractsUserData");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling DataExtractsApi->GetDataExtractsUserData");

            var localVarPath = "/dataExtracts/userData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (loginName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loginName", loginName)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataExtractsUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExtractsUserDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExtractsUserDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExtractsUserDataResponse)));
        }

    }
}
