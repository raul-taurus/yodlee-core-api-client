/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IHoldingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Asset Classification List
        /// </summary>
        /// <remarks>
        /// The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HoldingAssetClassificationListResponse</returns>
        HoldingAssetClassificationListResponse GetAssetClassificationList ();

        /// <summary>
        /// Get Asset Classification List
        /// </summary>
        /// <remarks>
        /// The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HoldingAssetClassificationListResponse</returns>
        ApiResponse<HoldingAssetClassificationListResponse> GetAssetClassificationListWithHttpInfo ();
        /// <summary>
        /// Get Holding Type List
        /// </summary>
        /// <remarks>
        /// The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HoldingTypeListResponse</returns>
        HoldingTypeListResponse GetHoldingTypeList ();

        /// <summary>
        /// Get Holding Type List
        /// </summary>
        /// <remarks>
        /// The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HoldingTypeListResponse</returns>
        ApiResponse<HoldingTypeListResponse> GetHoldingTypeListWithHttpInfo ();
        /// <summary>
        /// Get Holdings
        /// </summary>
        /// <remarks>
        /// The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="assetClassificationClassificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="classificationValue">e.g. US (optional)</param>
        /// <param name="include">assetClassification (optional)</param>
        /// <param name="providerAccountId">providerAccountId (optional)</param>
        /// <returns>HoldingResponse</returns>
        HoldingResponse GetHoldings (string accountId = null, string assetClassificationClassificationType = null, string classificationValue = null, string include = null, string providerAccountId = null);

        /// <summary>
        /// Get Holdings
        /// </summary>
        /// <remarks>
        /// The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="assetClassificationClassificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="classificationValue">e.g. US (optional)</param>
        /// <param name="include">assetClassification (optional)</param>
        /// <param name="providerAccountId">providerAccountId (optional)</param>
        /// <returns>ApiResponse of HoldingResponse</returns>
        ApiResponse<HoldingResponse> GetHoldingsWithHttpInfo (string accountId = null, string assetClassificationClassificationType = null, string classificationValue = null, string include = null, string providerAccountId = null);
        /// <summary>
        /// Get Security Details
        /// </summary>
        /// <remarks>
        /// The get security details service is used to get all the security information for the holdings&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingId">Comma separated holdingId (optional)</param>
        /// <returns>HoldingSecuritiesResponse</returns>
        HoldingSecuritiesResponse GetSecurities (string holdingId = null);

        /// <summary>
        /// Get Security Details
        /// </summary>
        /// <remarks>
        /// The get security details service is used to get all the security information for the holdings&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingId">Comma separated holdingId (optional)</param>
        /// <returns>ApiResponse of HoldingSecuritiesResponse</returns>
        ApiResponse<HoldingSecuritiesResponse> GetSecuritiesWithHttpInfo (string holdingId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Asset Classification List
        /// </summary>
        /// <remarks>
        /// The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HoldingAssetClassificationListResponse</returns>
        System.Threading.Tasks.Task<HoldingAssetClassificationListResponse> GetAssetClassificationListAsync ();

        /// <summary>
        /// Get Asset Classification List
        /// </summary>
        /// <remarks>
        /// The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HoldingAssetClassificationListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HoldingAssetClassificationListResponse>> GetAssetClassificationListAsyncWithHttpInfo ();
        /// <summary>
        /// Get Holding Type List
        /// </summary>
        /// <remarks>
        /// The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HoldingTypeListResponse</returns>
        System.Threading.Tasks.Task<HoldingTypeListResponse> GetHoldingTypeListAsync ();

        /// <summary>
        /// Get Holding Type List
        /// </summary>
        /// <remarks>
        /// The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HoldingTypeListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HoldingTypeListResponse>> GetHoldingTypeListAsyncWithHttpInfo ();
        /// <summary>
        /// Get Holdings
        /// </summary>
        /// <remarks>
        /// The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="assetClassificationClassificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="classificationValue">e.g. US (optional)</param>
        /// <param name="include">assetClassification (optional)</param>
        /// <param name="providerAccountId">providerAccountId (optional)</param>
        /// <returns>Task of HoldingResponse</returns>
        System.Threading.Tasks.Task<HoldingResponse> GetHoldingsAsync (string accountId = null, string assetClassificationClassificationType = null, string classificationValue = null, string include = null, string providerAccountId = null);

        /// <summary>
        /// Get Holdings
        /// </summary>
        /// <remarks>
        /// The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="assetClassificationClassificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="classificationValue">e.g. US (optional)</param>
        /// <param name="include">assetClassification (optional)</param>
        /// <param name="providerAccountId">providerAccountId (optional)</param>
        /// <returns>Task of ApiResponse (HoldingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HoldingResponse>> GetHoldingsAsyncWithHttpInfo (string accountId = null, string assetClassificationClassificationType = null, string classificationValue = null, string include = null, string providerAccountId = null);
        /// <summary>
        /// Get Security Details
        /// </summary>
        /// <remarks>
        /// The get security details service is used to get all the security information for the holdings&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingId">Comma separated holdingId (optional)</param>
        /// <returns>Task of HoldingSecuritiesResponse</returns>
        System.Threading.Tasks.Task<HoldingSecuritiesResponse> GetSecuritiesAsync (string holdingId = null);

        /// <summary>
        /// Get Security Details
        /// </summary>
        /// <remarks>
        /// The get security details service is used to get all the security information for the holdings&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingId">Comma separated holdingId (optional)</param>
        /// <returns>Task of ApiResponse (HoldingSecuritiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HoldingSecuritiesResponse>> GetSecuritiesAsyncWithHttpInfo (string holdingId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class HoldingsApi : IHoldingsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HoldingsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public HoldingsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HoldingsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Asset Classification List The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HoldingAssetClassificationListResponse</returns>
        public HoldingAssetClassificationListResponse GetAssetClassificationList ()
        {
             ApiResponse<HoldingAssetClassificationListResponse> localVarResponse = GetAssetClassificationListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Classification List The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HoldingAssetClassificationListResponse</returns>
        public ApiResponse< HoldingAssetClassificationListResponse > GetAssetClassificationListWithHttpInfo ()
        {

            var localVarPath = "/holdings/assetClassificationList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetClassificationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HoldingAssetClassificationListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HoldingAssetClassificationListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HoldingAssetClassificationListResponse)));
        }

        /// <summary>
        /// Get Asset Classification List The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HoldingAssetClassificationListResponse</returns>
        public async System.Threading.Tasks.Task<HoldingAssetClassificationListResponse> GetAssetClassificationListAsync ()
        {
             ApiResponse<HoldingAssetClassificationListResponse> localVarResponse = await GetAssetClassificationListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Asset Classification List The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HoldingAssetClassificationListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HoldingAssetClassificationListResponse>> GetAssetClassificationListAsyncWithHttpInfo ()
        {

            var localVarPath = "/holdings/assetClassificationList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetClassificationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HoldingAssetClassificationListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HoldingAssetClassificationListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HoldingAssetClassificationListResponse)));
        }

        /// <summary>
        /// Get Holding Type List The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HoldingTypeListResponse</returns>
        public HoldingTypeListResponse GetHoldingTypeList ()
        {
             ApiResponse<HoldingTypeListResponse> localVarResponse = GetHoldingTypeListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holding Type List The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HoldingTypeListResponse</returns>
        public ApiResponse< HoldingTypeListResponse > GetHoldingTypeListWithHttpInfo ()
        {

            var localVarPath = "/holdings/holdingTypeList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldingTypeList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HoldingTypeListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HoldingTypeListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HoldingTypeListResponse)));
        }

        /// <summary>
        /// Get Holding Type List The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HoldingTypeListResponse</returns>
        public async System.Threading.Tasks.Task<HoldingTypeListResponse> GetHoldingTypeListAsync ()
        {
             ApiResponse<HoldingTypeListResponse> localVarResponse = await GetHoldingTypeListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Holding Type List The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HoldingTypeListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HoldingTypeListResponse>> GetHoldingTypeListAsyncWithHttpInfo ()
        {

            var localVarPath = "/holdings/holdingTypeList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldingTypeList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HoldingTypeListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HoldingTypeListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HoldingTypeListResponse)));
        }

        /// <summary>
        /// Get Holdings The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="assetClassificationClassificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="classificationValue">e.g. US (optional)</param>
        /// <param name="include">assetClassification (optional)</param>
        /// <param name="providerAccountId">providerAccountId (optional)</param>
        /// <returns>HoldingResponse</returns>
        public HoldingResponse GetHoldings (string accountId = null, string assetClassificationClassificationType = null, string classificationValue = null, string include = null, string providerAccountId = null)
        {
             ApiResponse<HoldingResponse> localVarResponse = GetHoldingsWithHttpInfo(accountId, assetClassificationClassificationType, classificationValue, include, providerAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holdings The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="assetClassificationClassificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="classificationValue">e.g. US (optional)</param>
        /// <param name="include">assetClassification (optional)</param>
        /// <param name="providerAccountId">providerAccountId (optional)</param>
        /// <returns>ApiResponse of HoldingResponse</returns>
        public ApiResponse< HoldingResponse > GetHoldingsWithHttpInfo (string accountId = null, string assetClassificationClassificationType = null, string classificationValue = null, string include = null, string providerAccountId = null)
        {

            var localVarPath = "/holdings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (assetClassificationClassificationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetClassification.classificationType", assetClassificationClassificationType)); // query parameter
            if (classificationValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classificationValue", classificationValue)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HoldingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HoldingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HoldingResponse)));
        }

        /// <summary>
        /// Get Holdings The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="assetClassificationClassificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="classificationValue">e.g. US (optional)</param>
        /// <param name="include">assetClassification (optional)</param>
        /// <param name="providerAccountId">providerAccountId (optional)</param>
        /// <returns>Task of HoldingResponse</returns>
        public async System.Threading.Tasks.Task<HoldingResponse> GetHoldingsAsync (string accountId = null, string assetClassificationClassificationType = null, string classificationValue = null, string include = null, string providerAccountId = null)
        {
             ApiResponse<HoldingResponse> localVarResponse = await GetHoldingsAsyncWithHttpInfo(accountId, assetClassificationClassificationType, classificationValue, include, providerAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Holdings The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="assetClassificationClassificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="classificationValue">e.g. US (optional)</param>
        /// <param name="include">assetClassification (optional)</param>
        /// <param name="providerAccountId">providerAccountId (optional)</param>
        /// <returns>Task of ApiResponse (HoldingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HoldingResponse>> GetHoldingsAsyncWithHttpInfo (string accountId = null, string assetClassificationClassificationType = null, string classificationValue = null, string include = null, string providerAccountId = null)
        {

            var localVarPath = "/holdings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (assetClassificationClassificationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetClassification.classificationType", assetClassificationClassificationType)); // query parameter
            if (classificationValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classificationValue", classificationValue)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (providerAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerAccountId", providerAccountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HoldingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HoldingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HoldingResponse)));
        }

        /// <summary>
        /// Get Security Details The get security details service is used to get all the security information for the holdings&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingId">Comma separated holdingId (optional)</param>
        /// <returns>HoldingSecuritiesResponse</returns>
        public HoldingSecuritiesResponse GetSecurities (string holdingId = null)
        {
             ApiResponse<HoldingSecuritiesResponse> localVarResponse = GetSecuritiesWithHttpInfo(holdingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Security Details The get security details service is used to get all the security information for the holdings&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingId">Comma separated holdingId (optional)</param>
        /// <returns>ApiResponse of HoldingSecuritiesResponse</returns>
        public ApiResponse< HoldingSecuritiesResponse > GetSecuritiesWithHttpInfo (string holdingId = null)
        {

            var localVarPath = "/holdings/securities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (holdingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "holdingId", holdingId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HoldingSecuritiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HoldingSecuritiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HoldingSecuritiesResponse)));
        }

        /// <summary>
        /// Get Security Details The get security details service is used to get all the security information for the holdings&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingId">Comma separated holdingId (optional)</param>
        /// <returns>Task of HoldingSecuritiesResponse</returns>
        public async System.Threading.Tasks.Task<HoldingSecuritiesResponse> GetSecuritiesAsync (string holdingId = null)
        {
             ApiResponse<HoldingSecuritiesResponse> localVarResponse = await GetSecuritiesAsyncWithHttpInfo(holdingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Security Details The get security details service is used to get all the security information for the holdings&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingId">Comma separated holdingId (optional)</param>
        /// <returns>Task of ApiResponse (HoldingSecuritiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HoldingSecuritiesResponse>> GetSecuritiesAsyncWithHttpInfo (string holdingId = null)
        {

            var localVarPath = "/holdings/securities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (holdingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "holdingId", holdingId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HoldingSecuritiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HoldingSecuritiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HoldingSecuritiesResponse)));
        }

    }
}
