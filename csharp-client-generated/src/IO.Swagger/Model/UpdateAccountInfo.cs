/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdateAccountInfo
    /// </summary>
    [DataContract]
        public partial class UpdateAccountInfo :  IEquatable<UpdateAccountInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Container
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ContainerEnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,
            /// <summary>
            /// Enum CreditCard for value: creditCard
            /// </summary>
            [EnumMember(Value = "creditCard")]
            CreditCard = 2,
            /// <summary>
            /// Enum Investment for value: investment
            /// </summary>
            [EnumMember(Value = "investment")]
            Investment = 3,
            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 4,
            /// <summary>
            /// Enum Loan for value: loan
            /// </summary>
            [EnumMember(Value = "loan")]
            Loan = 5,
            /// <summary>
            /// Enum Reward for value: reward
            /// </summary>
            [EnumMember(Value = "reward")]
            Reward = 6,
            /// <summary>
            /// Enum Bill for value: bill
            /// </summary>
            [EnumMember(Value = "bill")]
            Bill = 7,
            /// <summary>
            /// Enum RealEstate for value: realEstate
            /// </summary>
            [EnumMember(Value = "realEstate")]
            RealEstate = 8,
            /// <summary>
            /// Enum OtherAssets for value: otherAssets
            /// </summary>
            [EnumMember(Value = "otherAssets")]
            OtherAssets = 9,
            /// <summary>
            /// Enum OtherLiabilities for value: otherLiabilities
            /// </summary>
            [EnumMember(Value = "otherLiabilities")]
            OtherLiabilities = 10        }
        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public ContainerEnum? Container { get; set; }
        /// <summary>
        /// Defines Frequency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FrequencyEnum
        {
            /// <summary>
            /// Enum DAILY for value: DAILY
            /// </summary>
            [EnumMember(Value = "DAILY")]
            DAILY = 1,
            /// <summary>
            /// Enum ONETIME for value: ONE_TIME
            /// </summary>
            [EnumMember(Value = "ONE_TIME")]
            ONETIME = 2,
            /// <summary>
            /// Enum WEEKLY for value: WEEKLY
            /// </summary>
            [EnumMember(Value = "WEEKLY")]
            WEEKLY = 3,
            /// <summary>
            /// Enum EVERY2WEEKS for value: EVERY_2_WEEKS
            /// </summary>
            [EnumMember(Value = "EVERY_2_WEEKS")]
            EVERY2WEEKS = 4,
            /// <summary>
            /// Enum SEMIMONTHLY for value: SEMI_MONTHLY
            /// </summary>
            [EnumMember(Value = "SEMI_MONTHLY")]
            SEMIMONTHLY = 5,
            /// <summary>
            /// Enum MONTHLY for value: MONTHLY
            /// </summary>
            [EnumMember(Value = "MONTHLY")]
            MONTHLY = 6,
            /// <summary>
            /// Enum QUARTERLY for value: QUARTERLY
            /// </summary>
            [EnumMember(Value = "QUARTERLY")]
            QUARTERLY = 7,
            /// <summary>
            /// Enum SEMIANNUALLY for value: SEMI_ANNUALLY
            /// </summary>
            [EnumMember(Value = "SEMI_ANNUALLY")]
            SEMIANNUALLY = 8,
            /// <summary>
            /// Enum ANNUALLY for value: ANNUALLY
            /// </summary>
            [EnumMember(Value = "ANNUALLY")]
            ANNUALLY = 9,
            /// <summary>
            /// Enum EVERY2MONTHS for value: EVERY_2_MONTHS
            /// </summary>
            [EnumMember(Value = "EVERY_2_MONTHS")]
            EVERY2MONTHS = 10,
            /// <summary>
            /// Enum EBILL for value: EBILL
            /// </summary>
            [EnumMember(Value = "EBILL")]
            EBILL = 11,
            /// <summary>
            /// Enum FIRSTDAYMONTHLY for value: FIRST_DAY_MONTHLY
            /// </summary>
            [EnumMember(Value = "FIRST_DAY_MONTHLY")]
            FIRSTDAYMONTHLY = 12,
            /// <summary>
            /// Enum LASTDAYMONTHLY for value: LAST_DAY_MONTHLY
            /// </summary>
            [EnumMember(Value = "LAST_DAY_MONTHLY")]
            LASTDAYMONTHLY = 13,
            /// <summary>
            /// Enum EVERY4WEEKS for value: EVERY_4_WEEKS
            /// </summary>
            [EnumMember(Value = "EVERY_4_WEEKS")]
            EVERY4WEEKS = 14,
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 15,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 16        }
        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public FrequencyEnum? Frequency { get; set; }
        /// <summary>
        /// Defines AccountStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccountStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,
            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2,
            /// <summary>
            /// Enum TOBECLOSED for value: TO_BE_CLOSED
            /// </summary>
            [EnumMember(Value = "TO_BE_CLOSED")]
            TOBECLOSED = 3,
            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 4,
            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 5        }
        /// <summary>
        /// Gets or Sets AccountStatus
        /// </summary>
        [DataMember(Name="accountStatus", EmitDefaultValue=false)]
        public AccountStatusEnum? AccountStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAccountInfo" /> class.
        /// </summary>
        /// <param name="container">container.</param>
        /// <param name="includeInNetWorth">includeInNetWorth.</param>
        /// <param name="address">address.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="memo">memo.</param>
        /// <param name="homeValue">homeValue.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="frequency">frequency.</param>
        /// <param name="accountStatus">accountStatus.</param>
        /// <param name="amountDue">amountDue.</param>
        /// <param name="linkedAccountIds">List of loan accounts to which a real-estate account is linked..</param>
        /// <param name="balance">balance.</param>
        /// <param name="isEbillEnrolled">isEbillEnrolled.</param>
        /// <param name="nickname">nickname.</param>
        public UpdateAccountInfo(ContainerEnum? container = default(ContainerEnum?), string includeInNetWorth = default(string), AccountAddress address = default(AccountAddress), string accountName = default(string), string dueDate = default(string), string memo = default(string), Money homeValue = default(Money), string accountNumber = default(string), FrequencyEnum? frequency = default(FrequencyEnum?), AccountStatusEnum? accountStatus = default(AccountStatusEnum?), Money amountDue = default(Money), List<long?> linkedAccountIds = default(List<long?>), Money balance = default(Money), string isEbillEnrolled = default(string), string nickname = default(string))
        {
            this.Container = container;
            this.IncludeInNetWorth = includeInNetWorth;
            this.Address = address;
            this.AccountName = accountName;
            this.DueDate = dueDate;
            this.Memo = memo;
            this.HomeValue = homeValue;
            this.AccountNumber = accountNumber;
            this.Frequency = frequency;
            this.AccountStatus = accountStatus;
            this.AmountDue = amountDue;
            this.LinkedAccountIds = linkedAccountIds;
            this.Balance = balance;
            this.IsEbillEnrolled = isEbillEnrolled;
            this.Nickname = nickname;
        }
        

        /// <summary>
        /// Gets or Sets IncludeInNetWorth
        /// </summary>
        [DataMember(Name="includeInNetWorth", EmitDefaultValue=false)]
        public string IncludeInNetWorth { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public AccountAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public string DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        [DataMember(Name="memo", EmitDefaultValue=false)]
        public string Memo { get; set; }

        /// <summary>
        /// Gets or Sets HomeValue
        /// </summary>
        [DataMember(Name="homeValue", EmitDefaultValue=false)]
        public Money HomeValue { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }



        /// <summary>
        /// Gets or Sets AmountDue
        /// </summary>
        [DataMember(Name="amountDue", EmitDefaultValue=false)]
        public Money AmountDue { get; set; }

        /// <summary>
        /// List of loan accounts to which a real-estate account is linked.
        /// </summary>
        /// <value>List of loan accounts to which a real-estate account is linked.</value>
        [DataMember(Name="linkedAccountIds", EmitDefaultValue=false)]
        public List<long?> LinkedAccountIds { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public Money Balance { get; set; }

        /// <summary>
        /// Gets or Sets IsEbillEnrolled
        /// </summary>
        [DataMember(Name="isEbillEnrolled", EmitDefaultValue=false)]
        public string IsEbillEnrolled { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateAccountInfo {\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  IncludeInNetWorth: ").Append(IncludeInNetWorth).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  HomeValue: ").Append(HomeValue).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  LinkedAccountIds: ").Append(LinkedAccountIds).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  IsEbillEnrolled: ").Append(IsEbillEnrolled).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAccountInfo);
        }

        /// <summary>
        /// Returns true if UpdateAccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAccountInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.IncludeInNetWorth == input.IncludeInNetWorth ||
                    (this.IncludeInNetWorth != null &&
                    this.IncludeInNetWorth.Equals(input.IncludeInNetWorth))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.HomeValue == input.HomeValue ||
                    (this.HomeValue != null &&
                    this.HomeValue.Equals(input.HomeValue))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.AccountStatus == input.AccountStatus ||
                    (this.AccountStatus != null &&
                    this.AccountStatus.Equals(input.AccountStatus))
                ) && 
                (
                    this.AmountDue == input.AmountDue ||
                    (this.AmountDue != null &&
                    this.AmountDue.Equals(input.AmountDue))
                ) && 
                (
                    this.LinkedAccountIds == input.LinkedAccountIds ||
                    this.LinkedAccountIds != null &&
                    input.LinkedAccountIds != null &&
                    this.LinkedAccountIds.SequenceEqual(input.LinkedAccountIds)
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.IsEbillEnrolled == input.IsEbillEnrolled ||
                    (this.IsEbillEnrolled != null &&
                    this.IsEbillEnrolled.Equals(input.IsEbillEnrolled))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.IncludeInNetWorth != null)
                    hashCode = hashCode * 59 + this.IncludeInNetWorth.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.HomeValue != null)
                    hashCode = hashCode * 59 + this.HomeValue.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.AccountStatus != null)
                    hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                if (this.AmountDue != null)
                    hashCode = hashCode * 59 + this.AmountDue.GetHashCode();
                if (this.LinkedAccountIds != null)
                    hashCode = hashCode * 59 + this.LinkedAccountIds.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.IsEbillEnrolled != null)
                    hashCode = hashCode * 59 + this.IsEbillEnrolled.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
