/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// LoginForm
    /// </summary>
    [DataContract]
        public partial class LoginForm :  IEquatable<LoginForm>, IValidatableObject
    {
        /// <summary>
        /// The type of the forms for which the user information is required.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of the forms for which the user information is required.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FormTypeEnum
        {
            /// <summary>
            /// Enum Login for value: login
            /// </summary>
            [EnumMember(Value = "login")]
            Login = 1,
            /// <summary>
            /// Enum QuestionAndAnswer for value: questionAndAnswer
            /// </summary>
            [EnumMember(Value = "questionAndAnswer")]
            QuestionAndAnswer = 2,
            /// <summary>
            /// Enum Token for value: token
            /// </summary>
            [EnumMember(Value = "token")]
            Token = 3,
            /// <summary>
            /// Enum Image for value: image
            /// </summary>
            [EnumMember(Value = "image")]
            Image = 4        }
        /// <summary>
        /// The type of the forms for which the user information is required.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of the forms for which the user information is required.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="formType", EmitDefaultValue=false)]
        public FormTypeEnum? FormType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginForm" /> class.
        /// </summary>
        /// <param name="forgetPasswordURL">The forget password URL of the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;.</param>
        /// <param name="formType">The type of the forms for which the user information is required.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;.</param>
        /// <param name="id">The identifier of the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;.</param>
        /// <param name="row">This indicates one row in the form. The row will have one label. But it may have single or multiple fields.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;.</param>
        public LoginForm(string forgetPasswordURL = default(string), FormTypeEnum? formType = default(FormTypeEnum?), long? id = default(long?), List<Row> row = default(List<Row>))
        {
            this.ForgetPasswordURL = forgetPasswordURL;
            this.FormType = formType;
            this.Id = id;
            this.Row = row;
        }
        
        /// <summary>
        /// The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="mfaInfoTitle", EmitDefaultValue=false)]
        public string MfaInfoTitle { get; private set; }

        /// <summary>
        /// The help that can be displayed to the customer in the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The help that can be displayed to the customer in the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="help", EmitDefaultValue=false)]
        public string Help { get; private set; }

        /// <summary>
        /// The forget password URL of the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The forget password URL of the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="forgetPasswordURL", EmitDefaultValue=false)]
        public string ForgetPasswordURL { get; set; }


        /// <summary>
        /// The text displayed in the provider site while requesting the user&#x27;s MFA information. This field is applicable for MFA form types only. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The text displayed in the provider site while requesting the user&#x27;s MFA information. This field is applicable for MFA form types only. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="mfaInfoText", EmitDefaultValue=false)]
        public string MfaInfoText { get; private set; }

        /// <summary>
        /// The help that can be displayed to the customer in the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The help that can be displayed to the customer in the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="loginHelp", EmitDefaultValue=false)]
        public string LoginHelp { get; private set; }

        /// <summary>
        /// The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="mfaTimeout", EmitDefaultValue=false)]
        public long? MfaTimeout { get; private set; }

        /// <summary>
        /// The identifier of the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The identifier of the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// This indicates one row in the form. The row will have one label. But it may have single or multiple fields.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>This indicates one row in the form. The row will have one label. But it may have single or multiple fields.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="row", EmitDefaultValue=false)]
        public List<Row> Row { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginForm {\n");
            sb.Append("  MfaInfoTitle: ").Append(MfaInfoTitle).Append("\n");
            sb.Append("  Help: ").Append(Help).Append("\n");
            sb.Append("  ForgetPasswordURL: ").Append(ForgetPasswordURL).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  MfaInfoText: ").Append(MfaInfoText).Append("\n");
            sb.Append("  LoginHelp: ").Append(LoginHelp).Append("\n");
            sb.Append("  MfaTimeout: ").Append(MfaTimeout).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Row: ").Append(Row).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoginForm);
        }

        /// <summary>
        /// Returns true if LoginForm instances are equal
        /// </summary>
        /// <param name="input">Instance of LoginForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MfaInfoTitle == input.MfaInfoTitle ||
                    (this.MfaInfoTitle != null &&
                    this.MfaInfoTitle.Equals(input.MfaInfoTitle))
                ) && 
                (
                    this.Help == input.Help ||
                    (this.Help != null &&
                    this.Help.Equals(input.Help))
                ) && 
                (
                    this.ForgetPasswordURL == input.ForgetPasswordURL ||
                    (this.ForgetPasswordURL != null &&
                    this.ForgetPasswordURL.Equals(input.ForgetPasswordURL))
                ) && 
                (
                    this.FormType == input.FormType ||
                    (this.FormType != null &&
                    this.FormType.Equals(input.FormType))
                ) && 
                (
                    this.MfaInfoText == input.MfaInfoText ||
                    (this.MfaInfoText != null &&
                    this.MfaInfoText.Equals(input.MfaInfoText))
                ) && 
                (
                    this.LoginHelp == input.LoginHelp ||
                    (this.LoginHelp != null &&
                    this.LoginHelp.Equals(input.LoginHelp))
                ) && 
                (
                    this.MfaTimeout == input.MfaTimeout ||
                    (this.MfaTimeout != null &&
                    this.MfaTimeout.Equals(input.MfaTimeout))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Row == input.Row ||
                    this.Row != null &&
                    input.Row != null &&
                    this.Row.SequenceEqual(input.Row)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MfaInfoTitle != null)
                    hashCode = hashCode * 59 + this.MfaInfoTitle.GetHashCode();
                if (this.Help != null)
                    hashCode = hashCode * 59 + this.Help.GetHashCode();
                if (this.ForgetPasswordURL != null)
                    hashCode = hashCode * 59 + this.ForgetPasswordURL.GetHashCode();
                if (this.FormType != null)
                    hashCode = hashCode * 59 + this.FormType.GetHashCode();
                if (this.MfaInfoText != null)
                    hashCode = hashCode * 59 + this.MfaInfoText.GetHashCode();
                if (this.LoginHelp != null)
                    hashCode = hashCode * 59 + this.LoginHelp.GetHashCode();
                if (this.MfaTimeout != null)
                    hashCode = hashCode * 59 + this.MfaTimeout.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Row != null)
                    hashCode = hashCode * 59 + this.Row.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
