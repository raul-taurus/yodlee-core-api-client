/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// VerifiedAccounts
    /// </summary>
    [DataContract]
        public partial class VerifiedAccounts :  IEquatable<VerifiedAccounts>, IValidatableObject
    {
        /// <summary>
        /// The status of the account verification.
        /// </summary>
        /// <value>The status of the account verification.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum VerificationStatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1,
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 2        }
        /// <summary>
        /// The status of the account verification.
        /// </summary>
        /// <value>The status of the account verification.</value>
        [DataMember(Name="verificationStatus", EmitDefaultValue=false)]
        public VerificationStatusEnum? VerificationStatus { get; set; }
        /// <summary>
        /// The classification of the account such as personal, corporate, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The classification of the account such as personal, corporate, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ClassificationEnum
        {
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 1,
            /// <summary>
            /// Enum PERSONAL for value: PERSONAL
            /// </summary>
            [EnumMember(Value = "PERSONAL")]
            PERSONAL = 2,
            /// <summary>
            /// Enum CORPORATE for value: CORPORATE
            /// </summary>
            [EnumMember(Value = "CORPORATE")]
            CORPORATE = 3,
            /// <summary>
            /// Enum SMALLBUSINESS for value: SMALL_BUSINESS
            /// </summary>
            [EnumMember(Value = "SMALL_BUSINESS")]
            SMALLBUSINESS = 4,
            /// <summary>
            /// Enum TRUST for value: TRUST
            /// </summary>
            [EnumMember(Value = "TRUST")]
            TRUST = 5,
            /// <summary>
            /// Enum ADDONCARD for value: ADD_ON_CARD
            /// </summary>
            [EnumMember(Value = "ADD_ON_CARD")]
            ADDONCARD = 6,
            /// <summary>
            /// Enum VIRTUALCARD for value: VIRTUAL_CARD
            /// </summary>
            [EnumMember(Value = "VIRTUAL_CARD")]
            VIRTUALCARD = 7        }
        /// <summary>
        /// The classification of the account such as personal, corporate, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The classification of the account such as personal, corporate, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="classification", EmitDefaultValue=false)]
        public ClassificationEnum? Classification { get; set; }
        /// <summary>
        /// Attribute to return the classification of the account age by specifying whether the account is old/new/recent as relevant for a verification use case. If it could not be classified into any one of these values, the attribute would return the value as &#x27;unclassified&#x27;
        /// </summary>
        /// <value>Attribute to return the classification of the account age by specifying whether the account is old/new/recent as relevant for a verification use case. If it could not be classified into any one of these values, the attribute would return the value as &#x27;unclassified&#x27;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccountAgeClassificationEnum
        {
            /// <summary>
            /// Enum UNCLASSIFIED for value: UNCLASSIFIED
            /// </summary>
            [EnumMember(Value = "UNCLASSIFIED")]
            UNCLASSIFIED = 1,
            /// <summary>
            /// Enum OLD for value: OLD
            /// </summary>
            [EnumMember(Value = "OLD")]
            OLD = 2,
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 3,
            /// <summary>
            /// Enum RECENT for value: RECENT
            /// </summary>
            [EnumMember(Value = "RECENT")]
            RECENT = 4        }
        /// <summary>
        /// Attribute to return the classification of the account age by specifying whether the account is old/new/recent as relevant for a verification use case. If it could not be classified into any one of these values, the attribute would return the value as &#x27;unclassified&#x27;
        /// </summary>
        /// <value>Attribute to return the classification of the account age by specifying whether the account is old/new/recent as relevant for a verification use case. If it could not be classified into any one of these values, the attribute would return the value as &#x27;unclassified&#x27;</value>
        [DataMember(Name="accountAgeClassification", EmitDefaultValue=false)]
        public AccountAgeClassificationEnum? AccountAgeClassification { get; set; }
        /// <summary>
        /// The type of service. E.g., Bank, Investment &lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of service. E.g., Bank, Investment &lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CONTAINEREnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,
            /// <summary>
            /// Enum Investment for value: investment
            /// </summary>
            [EnumMember(Value = "investment")]
            Investment = 2        }
        /// <summary>
        /// The type of service. E.g., Bank, Investment &lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of service. E.g., Bank, Investment &lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="CONTAINER", EmitDefaultValue=false)]
        public CONTAINEREnum? CONTAINER { get; set; }
        /// <summary>
        /// The reason for the verification failure of the account.
        /// </summary>
        /// <value>The reason for the verification failure of the account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FailedReasonEnum
        {
            /// <summary>
            /// Enum REQUIREDDATANOTAVAILABLE for value: REQUIRED_DATA_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "REQUIRED_DATA_NOT_AVAILABLE")]
            REQUIREDDATANOTAVAILABLE = 1,
            /// <summary>
            /// Enum MATCHINGFAILED for value: MATCHING_FAILED
            /// </summary>
            [EnumMember(Value = "MATCHING_FAILED")]
            MATCHINGFAILED = 2        }
        /// <summary>
        /// The reason for the verification failure of the account.
        /// </summary>
        /// <value>The reason for the verification failure of the account.</value>
        [DataMember(Name="failedReason", EmitDefaultValue=false)]
        public FailedReasonEnum? FailedReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifiedAccounts" /> class.
        /// </summary>
        /// <param name="currentBalance">currentBalance.</param>
        /// <param name="availableBalance">availableBalance.</param>
        /// <param name="fullAccountNumberList">fullAccountNumberList.</param>
        /// <param name="balance">balance.</param>
        /// <param name="cash">cash.</param>
        public VerifiedAccounts(Money currentBalance = default(Money), Money availableBalance = default(Money), FullAccountNumberList fullAccountNumberList = default(FullAccountNumberList), Money balance = default(Money), Money cash = default(Money))
        {
            this.CurrentBalance = currentBalance;
            this.AvailableBalance = availableBalance;
            this.FullAccountNumberList = fullAccountNumberList;
            this.Balance = balance;
            this.Cash = cash;
        }
        
        /// <summary>
        /// The account name as it appears at the site.&lt;br&gt;(The POST accounts service response return this field as name)&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The account name as it appears at the site.&lt;br&gt;(The POST accounts service response return this field as name)&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; private set; }


        /// <summary>
        /// The type of account that is aggregated, i.e., savings, checking, charge, HELOC, etc. The account type is derived based on the attributes of the account. &lt;br&gt;&lt;b&gt;Valid Values:&lt;/b&gt;&lt;br&gt;&lt;b&gt;Aggregated Account Type&lt;/b&gt;&lt;br&gt;&lt;b&gt;bank&lt;/b&gt;&lt;ul&gt;&lt;li&gt;CHECKING&lt;/li&gt;&lt;li&gt;SAVINGS&lt;/li&gt;&lt;li&gt;MONEY_MARKET&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;investment (SN 1.0)&lt;/b&gt;&lt;ul&gt;&lt;li&gt;BROKERAGE_MARGIN&lt;/li&gt;&lt;li&gt;BROKERAGE_CASH&lt;/li&gt;&lt;li&gt;BROKERAGE_LINK_ACCOUNT&lt;/li&gt;&lt;li&gt;INDIVIDUAL&lt;/li&gt;&lt;li&gt;CMA&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;investment (SN 2.0)&lt;/b&gt;&lt;ul&gt;&lt;li&gt;BROKERAGE_MARGIN&lt;/li&gt;&lt;li&gt;BROKERAGE_CASH&lt;/li&gt;&lt;li&gt;BROKERAGE_LINK_ACCOUNT&lt;/li&gt;&lt;li&gt;INDIVIDUAL&lt;/li&gt;&lt;li&gt;CMA&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The type of account that is aggregated, i.e., savings, checking, charge, HELOC, etc. The account type is derived based on the attributes of the account. &lt;br&gt;&lt;b&gt;Valid Values:&lt;/b&gt;&lt;br&gt;&lt;b&gt;Aggregated Account Type&lt;/b&gt;&lt;br&gt;&lt;b&gt;bank&lt;/b&gt;&lt;ul&gt;&lt;li&gt;CHECKING&lt;/li&gt;&lt;li&gt;SAVINGS&lt;/li&gt;&lt;li&gt;MONEY_MARKET&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;investment (SN 1.0)&lt;/b&gt;&lt;ul&gt;&lt;li&gt;BROKERAGE_MARGIN&lt;/li&gt;&lt;li&gt;BROKERAGE_CASH&lt;/li&gt;&lt;li&gt;BROKERAGE_LINK_ACCOUNT&lt;/li&gt;&lt;li&gt;INDIVIDUAL&lt;/li&gt;&lt;li&gt;CMA&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;investment (SN 2.0)&lt;/b&gt;&lt;ul&gt;&lt;li&gt;BROKERAGE_MARGIN&lt;/li&gt;&lt;li&gt;BROKERAGE_CASH&lt;/li&gt;&lt;li&gt;BROKERAGE_LINK_ACCOUNT&lt;/li&gt;&lt;li&gt;INDIVIDUAL&lt;/li&gt;&lt;li&gt;CMA&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public string AccountType { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentBalance
        /// </summary>
        [DataMember(Name="currentBalance", EmitDefaultValue=false)]
        public Money CurrentBalance { get; set; }

        /// <summary>
        /// The name or identification of the account owner, as it appears at the FI site. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The name or identification of the account owner, as it appears at the FI site. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="displayedName", EmitDefaultValue=false)]
        public string DisplayedName { get; private set; }

        /// <summary>
        /// Holder details of the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Holder details of the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="holder", EmitDefaultValue=false)]
        public List<AccountHolder> Holder { get; private set; }

        /// <summary>
        /// The account number as it appears on the site. (The POST accounts service response return this field as number)&lt;br&gt;&lt;b&gt;Additional Details&lt;/b&gt;:&lt;b&gt; Bank / Investment&lt;/b&gt;:&lt;br&gt; The account number for the bank account as it appears at the site.&lt;br&gt;In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The account number as it appears on the site. (The POST accounts service response return this field as number)&lt;br&gt;&lt;b&gt;Additional Details&lt;/b&gt;:&lt;b&gt; Bank / Investment&lt;/b&gt;:&lt;br&gt; The account number for the bank account as it appears at the site.&lt;br&gt;In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; private set; }


        /// <summary>
        /// Gets or Sets AvailableBalance
        /// </summary>
        [DataMember(Name="availableBalance", EmitDefaultValue=false)]
        public Money AvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets FullAccountNumberList
        /// </summary>
        [DataMember(Name="fullAccountNumberList", EmitDefaultValue=false)]
        public FullAccountNumberList FullAccountNumberList { get; set; }

        /// <summary>
        /// The primary key of the provider account resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The primary key of the provider account resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; private set; }


        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public Money Balance { get; set; }

        /// <summary>
        /// Identifier of the provider site. The primary key of provider resource. &lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Identifier of the provider site. The primary key of provider resource. &lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="providerId", EmitDefaultValue=false)]
        public string ProviderId { get; private set; }

        /// <summary>
        /// The primary key of the provider account resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The primary key of the provider account resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="providerAccountId", EmitDefaultValue=false)]
        public long? ProviderAccountId { get; private set; }


        /// <summary>
        /// Indicates if an account is selected by the user in the FastLink 4 application
        /// </summary>
        /// <value>Indicates if an account is selected by the user in the FastLink 4 application</value>
        [DataMember(Name="isSelected", EmitDefaultValue=false)]
        public bool? IsSelected { get; private set; }

        /// <summary>
        /// Gets or Sets Cash
        /// </summary>
        [DataMember(Name="cash", EmitDefaultValue=false)]
        public Money Cash { get; set; }

        /// <summary>
        /// Bank and branch identification information.&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Bank and branch identification information.&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="bankTransferCode", EmitDefaultValue=false)]
        public List<BankTransferCode> BankTransferCode { get; private set; }

        /// <summary>
        /// Service provider or institution name where the account originates. This belongs to the provider resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Service provider or institution name where the account originates. This belongs to the provider resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /verification/verifiedAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="providerName", EmitDefaultValue=false)]
        public string ProviderName { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifiedAccounts {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  VerificationStatus: ").Append(VerificationStatus).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  DisplayedName: ").Append(DisplayedName).Append("\n");
            sb.Append("  Holder: ").Append(Holder).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("  FullAccountNumberList: ").Append(FullAccountNumberList).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountAgeClassification: ").Append(AccountAgeClassification).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ProviderAccountId: ").Append(ProviderAccountId).Append("\n");
            sb.Append("  CONTAINER: ").Append(CONTAINER).Append("\n");
            sb.Append("  IsSelected: ").Append(IsSelected).Append("\n");
            sb.Append("  Cash: ").Append(Cash).Append("\n");
            sb.Append("  BankTransferCode: ").Append(BankTransferCode).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  FailedReason: ").Append(FailedReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifiedAccounts);
        }

        /// <summary>
        /// Returns true if VerifiedAccounts instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifiedAccounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifiedAccounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.VerificationStatus == input.VerificationStatus ||
                    (this.VerificationStatus != null &&
                    this.VerificationStatus.Equals(input.VerificationStatus))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    (this.CurrentBalance != null &&
                    this.CurrentBalance.Equals(input.CurrentBalance))
                ) && 
                (
                    this.DisplayedName == input.DisplayedName ||
                    (this.DisplayedName != null &&
                    this.DisplayedName.Equals(input.DisplayedName))
                ) && 
                (
                    this.Holder == input.Holder ||
                    this.Holder != null &&
                    input.Holder != null &&
                    this.Holder.SequenceEqual(input.Holder)
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Classification == input.Classification ||
                    (this.Classification != null &&
                    this.Classification.Equals(input.Classification))
                ) && 
                (
                    this.AvailableBalance == input.AvailableBalance ||
                    (this.AvailableBalance != null &&
                    this.AvailableBalance.Equals(input.AvailableBalance))
                ) && 
                (
                    this.FullAccountNumberList == input.FullAccountNumberList ||
                    (this.FullAccountNumberList != null &&
                    this.FullAccountNumberList.Equals(input.FullAccountNumberList))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountAgeClassification == input.AccountAgeClassification ||
                    (this.AccountAgeClassification != null &&
                    this.AccountAgeClassification.Equals(input.AccountAgeClassification))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.ProviderAccountId == input.ProviderAccountId ||
                    (this.ProviderAccountId != null &&
                    this.ProviderAccountId.Equals(input.ProviderAccountId))
                ) && 
                (
                    this.CONTAINER == input.CONTAINER ||
                    (this.CONTAINER != null &&
                    this.CONTAINER.Equals(input.CONTAINER))
                ) && 
                (
                    this.IsSelected == input.IsSelected ||
                    (this.IsSelected != null &&
                    this.IsSelected.Equals(input.IsSelected))
                ) && 
                (
                    this.Cash == input.Cash ||
                    (this.Cash != null &&
                    this.Cash.Equals(input.Cash))
                ) && 
                (
                    this.BankTransferCode == input.BankTransferCode ||
                    this.BankTransferCode != null &&
                    input.BankTransferCode != null &&
                    this.BankTransferCode.SequenceEqual(input.BankTransferCode)
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.FailedReason == input.FailedReason ||
                    (this.FailedReason != null &&
                    this.FailedReason.Equals(input.FailedReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.VerificationStatus != null)
                    hashCode = hashCode * 59 + this.VerificationStatus.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.CurrentBalance != null)
                    hashCode = hashCode * 59 + this.CurrentBalance.GetHashCode();
                if (this.DisplayedName != null)
                    hashCode = hashCode * 59 + this.DisplayedName.GetHashCode();
                if (this.Holder != null)
                    hashCode = hashCode * 59 + this.Holder.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Classification != null)
                    hashCode = hashCode * 59 + this.Classification.GetHashCode();
                if (this.AvailableBalance != null)
                    hashCode = hashCode * 59 + this.AvailableBalance.GetHashCode();
                if (this.FullAccountNumberList != null)
                    hashCode = hashCode * 59 + this.FullAccountNumberList.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountAgeClassification != null)
                    hashCode = hashCode * 59 + this.AccountAgeClassification.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.ProviderId != null)
                    hashCode = hashCode * 59 + this.ProviderId.GetHashCode();
                if (this.ProviderAccountId != null)
                    hashCode = hashCode * 59 + this.ProviderAccountId.GetHashCode();
                if (this.CONTAINER != null)
                    hashCode = hashCode * 59 + this.CONTAINER.GetHashCode();
                if (this.IsSelected != null)
                    hashCode = hashCode * 59 + this.IsSelected.GetHashCode();
                if (this.Cash != null)
                    hashCode = hashCode * 59 + this.Cash.GetHashCode();
                if (this.BankTransferCode != null)
                    hashCode = hashCode * 59 + this.BankTransferCode.GetHashCode();
                if (this.ProviderName != null)
                    hashCode = hashCode * 59 + this.ProviderName.GetHashCode();
                if (this.FailedReason != null)
                    hashCode = hashCode * 59 + this.FailedReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
