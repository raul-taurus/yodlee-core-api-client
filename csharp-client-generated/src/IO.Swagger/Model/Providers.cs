/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Providers
    /// </summary>
    [DataContract]
        public partial class Providers :  IEquatable<Providers>, IValidatableObject
    {
        /// <summary>
        /// Defines AccountType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum CURRENT for value: CURRENT
            /// </summary>
            [EnumMember(Value = "CURRENT")]
            CURRENT = 1,
            /// <summary>
            /// Enum BROKERAGECASH for value: BROKERAGE_CASH
            /// </summary>
            [EnumMember(Value = "BROKERAGE_CASH")]
            BROKERAGECASH = 2        }
        /// <summary>
        /// AccountType supported by the provider, eg: Brokerage Cash, Current&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>AccountType supported by the provider, eg: Brokerage Cash, Current&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public List<AccountTypeEnum> AccountType { get; set; }
        /// <summary>
        /// Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PRIORITYEnum
        {
            /// <summary>
            /// Enum POPULAR for value: POPULAR
            /// </summary>
            [EnumMember(Value = "POPULAR")]
            POPULAR = 1,
            /// <summary>
            /// Enum SUGGESTED for value: SUGGESTED
            /// </summary>
            [EnumMember(Value = "SUGGESTED")]
            SUGGESTED = 2,
            /// <summary>
            /// Enum COBRAND for value: COBRAND
            /// </summary>
            [EnumMember(Value = "COBRAND")]
            COBRAND = 3,
            /// <summary>
            /// Enum SEARCH for value: SEARCH
            /// </summary>
            [EnumMember(Value = "SEARCH")]
            SEARCH = 4,
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 5        }
        /// <summary>
        /// Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="PRIORITY", EmitDefaultValue=false)]
        public PRIORITYEnum? PRIORITY { get; set; }
        /// <summary>
        /// Defines AuthParameter
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AuthParameterEnum
        {
            /// <summary>
            /// Enum AuthorizationCode for value: authorizationCode
            /// </summary>
            [EnumMember(Value = "authorizationCode")]
            AuthorizationCode = 1,
            /// <summary>
            /// Enum IdToken for value: idToken
            /// </summary>
            [EnumMember(Value = "idToken")]
            IdToken = 2,
            /// <summary>
            /// Enum AuthResponse for value: authResponse
            /// </summary>
            [EnumMember(Value = "authResponse")]
            AuthResponse = 3,
            /// <summary>
            /// Enum State for value: state
            /// </summary>
            [EnumMember(Value = "state")]
            State = 4        }
        /// <summary>
        /// AuthParameter appears in the response only in case of token-based aggregation sites.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>AuthParameter appears in the response only in case of token-based aggregation sites.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="authParameter", EmitDefaultValue=false)]
        public List<AuthParameterEnum> AuthParameter { get; set; }
        /// <summary>
        /// The authentication type enabled at the provider site. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The authentication type enabled at the provider site. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AuthTypeEnum
        {
            /// <summary>
            /// Enum OAUTH for value: OAUTH
            /// </summary>
            [EnumMember(Value = "OAUTH")]
            OAUTH = 1,
            /// <summary>
            /// Enum CREDENTIALS for value: CREDENTIALS
            /// </summary>
            [EnumMember(Value = "CREDENTIALS")]
            CREDENTIALS = 2,
            /// <summary>
            /// Enum MFACREDENTIALS for value: MFA_CREDENTIALS
            /// </summary>
            [EnumMember(Value = "MFA_CREDENTIALS")]
            MFACREDENTIALS = 3        }
        /// <summary>
        /// The authentication type enabled at the provider site. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The authentication type enabled at the provider site. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="authType", EmitDefaultValue=false)]
        public AuthTypeEnum? AuthType { get; set; }
        /// <summary>
        /// Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Supported for value: Supported
            /// </summary>
            [EnumMember(Value = "Supported")]
            Supported = 1,
            /// <summary>
            /// Enum Beta for value: Beta
            /// </summary>
            [EnumMember(Value = "Beta")]
            Beta = 2,
            /// <summary>
            /// Enum Unsupported for value: Unsupported
            /// </summary>
            [EnumMember(Value = "Unsupported")]
            Unsupported = 3        }
        /// <summary>
        /// Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Providers" /> class.
        /// </summary>
        public Providers()
        {
        }
        
        /// <summary>
        /// The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user&#x27;s locale. The language follows the two letter ISO code.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user&#x27;s locale. The language follows the two letter ISO code.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="languageISOCode", EmitDefaultValue=false)]
        public string LanguageISOCode { get; private set; }

        /// <summary>
        /// The forget password URL of the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The forget password URL of the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="forgetPasswordUrl", EmitDefaultValue=false)]
        public string ForgetPasswordUrl { get; private set; }

        /// <summary>
        /// Favicon link of the provider.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Favicon link of the provider.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="favicon", EmitDefaultValue=false)]
        public string Favicon { get; private set; }


        /// <summary>
        /// Country to which the provider belongs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Country to which the provider belongs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="countryISOCode", EmitDefaultValue=false)]
        public string CountryISOCode { get; private set; }

        /// <summary>
        /// Indicates that the site has been added by the user at least once.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Indicates that the site has been added by the user at least once.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="isAddedByUser", EmitDefaultValue=false)]
        public string IsAddedByUser { get; private set; }


        /// <summary>
        /// The screen-scraping providers that are associated to the Open Banking provider ID.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: All Containers&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The screen-scraping providers that are associated to the Open Banking provider ID.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: All Containers&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="associatedProviderIds", EmitDefaultValue=false)]
        public List<long?> AssociatedProviderIds { get; private set; }

        /// <summary>
        /// Help text to guide the user to choose the correct provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Help text to guide the user to choose the correct provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="loginHelp", EmitDefaultValue=false)]
        public string LoginHelp { get; private set; }

        /// <summary>
        /// The primary language of the site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The primary language of the site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="primaryLanguageISOCode", EmitDefaultValue=false)]
        public string PrimaryLanguageISOCode { get; private set; }

        /// <summary>
        /// Text to guide user through linking an account that belongs to the site&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Text to guide user through linking an account that belongs to the site&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="help", EmitDefaultValue=false)]
        public string Help { get; private set; }

        /// <summary>
        /// The base URL of the provider&#x27;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The base URL of the provider&#x27;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="baseUrl", EmitDefaultValue=false)]
        public string BaseUrl { get; private set; }

        /// <summary>
        /// Capability of the site&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note : &lt;/b&gt; capability has been deprecated
        /// </summary>
        /// <value>Capability of the site&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note : &lt;/b&gt; capability has been deprecated</value>
        [DataMember(Name="capability", EmitDefaultValue=false)]
        public List<Capability> Capability { get; private set; }

        /// <summary>
        /// Indicates if a provider site requires consent.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Indicates if a provider site requires consent.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="isConsentRequired", EmitDefaultValue=false)]
        public bool? IsConsentRequired { get; private set; }

        /// <summary>
        /// The login URL of the provider&#x27;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The login URL of the provider&#x27;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="loginUrl", EmitDefaultValue=false)]
        public string LoginUrl { get; private set; }

        /// <summary>
        /// Indicates if a provider site is auto-refreshed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Indicates if a provider site is auto-refreshed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="isAutoRefreshEnabled", EmitDefaultValue=false)]
        public bool? IsAutoRefreshEnabled { get; private set; }

        /// <summary>
        /// The name of a provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The name of a provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// The logo link of the provider institution. The link will return the logo in the PNG format.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The logo link of the provider institution. The link will return the logo in the PNG format.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public string Logo { get; private set; }

        /// <summary>
        /// Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="lastModified", EmitDefaultValue=false)]
        public string LastModified { get; private set; }



        /// <summary>
        /// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="dataset", EmitDefaultValue=false)]
        public List<ProvidersDataset> Dataset { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Providers {\n");
            sb.Append("  LanguageISOCode: ").Append(LanguageISOCode).Append("\n");
            sb.Append("  ForgetPasswordUrl: ").Append(ForgetPasswordUrl).Append("\n");
            sb.Append("  Favicon: ").Append(Favicon).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  CountryISOCode: ").Append(CountryISOCode).Append("\n");
            sb.Append("  IsAddedByUser: ").Append(IsAddedByUser).Append("\n");
            sb.Append("  PRIORITY: ").Append(PRIORITY).Append("\n");
            sb.Append("  AssociatedProviderIds: ").Append(AssociatedProviderIds).Append("\n");
            sb.Append("  LoginHelp: ").Append(LoginHelp).Append("\n");
            sb.Append("  PrimaryLanguageISOCode: ").Append(PrimaryLanguageISOCode).Append("\n");
            sb.Append("  Help: ").Append(Help).Append("\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  Capability: ").Append(Capability).Append("\n");
            sb.Append("  IsConsentRequired: ").Append(IsConsentRequired).Append("\n");
            sb.Append("  LoginUrl: ").Append(LoginUrl).Append("\n");
            sb.Append("  IsAutoRefreshEnabled: ").Append(IsAutoRefreshEnabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  AuthParameter: ").Append(AuthParameter).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Providers);
        }

        /// <summary>
        /// Returns true if Providers instances are equal
        /// </summary>
        /// <param name="input">Instance of Providers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Providers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LanguageISOCode == input.LanguageISOCode ||
                    (this.LanguageISOCode != null &&
                    this.LanguageISOCode.Equals(input.LanguageISOCode))
                ) && 
                (
                    this.ForgetPasswordUrl == input.ForgetPasswordUrl ||
                    (this.ForgetPasswordUrl != null &&
                    this.ForgetPasswordUrl.Equals(input.ForgetPasswordUrl))
                ) && 
                (
                    this.Favicon == input.Favicon ||
                    (this.Favicon != null &&
                    this.Favicon.Equals(input.Favicon))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    this.AccountType != null &&
                    input.AccountType != null &&
                    this.AccountType.SequenceEqual(input.AccountType)
                ) && 
                (
                    this.CountryISOCode == input.CountryISOCode ||
                    (this.CountryISOCode != null &&
                    this.CountryISOCode.Equals(input.CountryISOCode))
                ) && 
                (
                    this.IsAddedByUser == input.IsAddedByUser ||
                    (this.IsAddedByUser != null &&
                    this.IsAddedByUser.Equals(input.IsAddedByUser))
                ) && 
                (
                    this.PRIORITY == input.PRIORITY ||
                    (this.PRIORITY != null &&
                    this.PRIORITY.Equals(input.PRIORITY))
                ) && 
                (
                    this.AssociatedProviderIds == input.AssociatedProviderIds ||
                    this.AssociatedProviderIds != null &&
                    input.AssociatedProviderIds != null &&
                    this.AssociatedProviderIds.SequenceEqual(input.AssociatedProviderIds)
                ) && 
                (
                    this.LoginHelp == input.LoginHelp ||
                    (this.LoginHelp != null &&
                    this.LoginHelp.Equals(input.LoginHelp))
                ) && 
                (
                    this.PrimaryLanguageISOCode == input.PrimaryLanguageISOCode ||
                    (this.PrimaryLanguageISOCode != null &&
                    this.PrimaryLanguageISOCode.Equals(input.PrimaryLanguageISOCode))
                ) && 
                (
                    this.Help == input.Help ||
                    (this.Help != null &&
                    this.Help.Equals(input.Help))
                ) && 
                (
                    this.BaseUrl == input.BaseUrl ||
                    (this.BaseUrl != null &&
                    this.BaseUrl.Equals(input.BaseUrl))
                ) && 
                (
                    this.Capability == input.Capability ||
                    this.Capability != null &&
                    input.Capability != null &&
                    this.Capability.SequenceEqual(input.Capability)
                ) && 
                (
                    this.IsConsentRequired == input.IsConsentRequired ||
                    (this.IsConsentRequired != null &&
                    this.IsConsentRequired.Equals(input.IsConsentRequired))
                ) && 
                (
                    this.LoginUrl == input.LoginUrl ||
                    (this.LoginUrl != null &&
                    this.LoginUrl.Equals(input.LoginUrl))
                ) && 
                (
                    this.IsAutoRefreshEnabled == input.IsAutoRefreshEnabled ||
                    (this.IsAutoRefreshEnabled != null &&
                    this.IsAutoRefreshEnabled.Equals(input.IsAutoRefreshEnabled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.AuthParameter == input.AuthParameter ||
                    this.AuthParameter != null &&
                    input.AuthParameter != null &&
                    this.AuthParameter.SequenceEqual(input.AuthParameter)
                ) && 
                (
                    this.AuthType == input.AuthType ||
                    (this.AuthType != null &&
                    this.AuthType.Equals(input.AuthType))
                ) && 
                (
                    this.Dataset == input.Dataset ||
                    this.Dataset != null &&
                    input.Dataset != null &&
                    this.Dataset.SequenceEqual(input.Dataset)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LanguageISOCode != null)
                    hashCode = hashCode * 59 + this.LanguageISOCode.GetHashCode();
                if (this.ForgetPasswordUrl != null)
                    hashCode = hashCode * 59 + this.ForgetPasswordUrl.GetHashCode();
                if (this.Favicon != null)
                    hashCode = hashCode * 59 + this.Favicon.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.CountryISOCode != null)
                    hashCode = hashCode * 59 + this.CountryISOCode.GetHashCode();
                if (this.IsAddedByUser != null)
                    hashCode = hashCode * 59 + this.IsAddedByUser.GetHashCode();
                if (this.PRIORITY != null)
                    hashCode = hashCode * 59 + this.PRIORITY.GetHashCode();
                if (this.AssociatedProviderIds != null)
                    hashCode = hashCode * 59 + this.AssociatedProviderIds.GetHashCode();
                if (this.LoginHelp != null)
                    hashCode = hashCode * 59 + this.LoginHelp.GetHashCode();
                if (this.PrimaryLanguageISOCode != null)
                    hashCode = hashCode * 59 + this.PrimaryLanguageISOCode.GetHashCode();
                if (this.Help != null)
                    hashCode = hashCode * 59 + this.Help.GetHashCode();
                if (this.BaseUrl != null)
                    hashCode = hashCode * 59 + this.BaseUrl.GetHashCode();
                if (this.Capability != null)
                    hashCode = hashCode * 59 + this.Capability.GetHashCode();
                if (this.IsConsentRequired != null)
                    hashCode = hashCode * 59 + this.IsConsentRequired.GetHashCode();
                if (this.LoginUrl != null)
                    hashCode = hashCode * 59 + this.LoginUrl.GetHashCode();
                if (this.IsAutoRefreshEnabled != null)
                    hashCode = hashCode * 59 + this.IsAutoRefreshEnabled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.AuthParameter != null)
                    hashCode = hashCode * 59 + this.AuthParameter.GetHashCode();
                if (this.AuthType != null)
                    hashCode = hashCode * 59 + this.AuthType.GetHashCode();
                if (this.Dataset != null)
                    hashCode = hashCode * 59 + this.Dataset.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
