/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// VerificationAccount
    /// </summary>
    [DataContract]
        public partial class VerificationAccount :  IEquatable<VerificationAccount>, IValidatableObject
    {
        /// <summary>
        /// Defines AccountType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum SAVINGS for value: SAVINGS
            /// </summary>
            [EnumMember(Value = "SAVINGS")]
            SAVINGS = 1,
            /// <summary>
            /// Enum CHECKING for value: CHECKING
            /// </summary>
            [EnumMember(Value = "CHECKING")]
            CHECKING = 2        }
        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public AccountTypeEnum AccountType { get; set; }
        /// <summary>
        /// Defines UserClassification
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UserClassificationEnum
        {
            /// <summary>
            /// Enum BUSINESS for value: BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESS = 1,
            /// <summary>
            /// Enum PERSONAL for value: PERSONAL
            /// </summary>
            [EnumMember(Value = "PERSONAL")]
            PERSONAL = 2        }
        /// <summary>
        /// Gets or Sets UserClassification
        /// </summary>
        [DataMember(Name="userClassification", EmitDefaultValue=false)]
        public UserClassificationEnum? UserClassification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationAccount" /> class.
        /// </summary>
        /// <param name="accountName">accountName.</param>
        /// <param name="accountType">accountType (required).</param>
        /// <param name="accountNumber">accountNumber (required).</param>
        /// <param name="userClassification">userClassification.</param>
        /// <param name="bankTransferCode">bankTransferCode (required).</param>
        public VerificationAccount(string accountName = default(string), AccountTypeEnum accountType = default(AccountTypeEnum), string accountNumber = default(string), UserClassificationEnum? userClassification = default(UserClassificationEnum?), VerificationBankTransferCode bankTransferCode = default(VerificationBankTransferCode))
        {
            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new InvalidDataException("accountType is a required property for VerificationAccount and cannot be null");
            }
            else
            {
                this.AccountType = accountType;
            }
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null)
            {
                throw new InvalidDataException("accountNumber is a required property for VerificationAccount and cannot be null");
            }
            else
            {
                this.AccountNumber = accountNumber;
            }
            // to ensure "bankTransferCode" is required (not null)
            if (bankTransferCode == null)
            {
                throw new InvalidDataException("bankTransferCode is a required property for VerificationAccount and cannot be null");
            }
            else
            {
                this.BankTransferCode = bankTransferCode;
            }
            this.AccountName = accountName;
            this.UserClassification = userClassification;
        }
        
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }


        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }


        /// <summary>
        /// Gets or Sets BankTransferCode
        /// </summary>
        [DataMember(Name="bankTransferCode", EmitDefaultValue=false)]
        public VerificationBankTransferCode BankTransferCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerificationAccount {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  UserClassification: ").Append(UserClassification).Append("\n");
            sb.Append("  BankTransferCode: ").Append(BankTransferCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerificationAccount);
        }

        /// <summary>
        /// Returns true if VerificationAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of VerificationAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerificationAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.UserClassification == input.UserClassification ||
                    (this.UserClassification != null &&
                    this.UserClassification.Equals(input.UserClassification))
                ) && 
                (
                    this.BankTransferCode == input.BankTransferCode ||
                    (this.BankTransferCode != null &&
                    this.BankTransferCode.Equals(input.BankTransferCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.UserClassification != null)
                    hashCode = hashCode * 59 + this.UserClassification.GetHashCode();
                if (this.BankTransferCode != null)
                    hashCode = hashCode * 59 + this.BankTransferCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
