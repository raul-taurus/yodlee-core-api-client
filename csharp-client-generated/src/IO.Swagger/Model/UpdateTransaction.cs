/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdateTransaction
    /// </summary>
    [DataContract]
        public partial class UpdateTransaction :  IEquatable<UpdateTransaction>, IValidatableObject
    {
        /// <summary>
        /// Defines CategorySource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CategorySourceEnum
        {
            /// <summary>
            /// Enum SYSTEM for value: SYSTEM
            /// </summary>
            [EnumMember(Value = "SYSTEM")]
            SYSTEM = 1,
            /// <summary>
            /// Enum USER for value: USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USER = 2        }
        /// <summary>
        /// Gets or Sets CategorySource
        /// </summary>
        [DataMember(Name="categorySource", EmitDefaultValue=false)]
        public CategorySourceEnum CategorySource { get; set; }
        /// <summary>
        /// Defines Container
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ContainerEnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,
            /// <summary>
            /// Enum CreditCard for value: creditCard
            /// </summary>
            [EnumMember(Value = "creditCard")]
            CreditCard = 2,
            /// <summary>
            /// Enum Investment for value: investment
            /// </summary>
            [EnumMember(Value = "investment")]
            Investment = 3,
            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 4,
            /// <summary>
            /// Enum Loan for value: loan
            /// </summary>
            [EnumMember(Value = "loan")]
            Loan = 5,
            /// <summary>
            /// Enum Reward for value: reward
            /// </summary>
            [EnumMember(Value = "reward")]
            Reward = 6,
            /// <summary>
            /// Enum Bill for value: bill
            /// </summary>
            [EnumMember(Value = "bill")]
            Bill = 7,
            /// <summary>
            /// Enum RealEstate for value: realEstate
            /// </summary>
            [EnumMember(Value = "realEstate")]
            RealEstate = 8,
            /// <summary>
            /// Enum OtherAssets for value: otherAssets
            /// </summary>
            [EnumMember(Value = "otherAssets")]
            OtherAssets = 9,
            /// <summary>
            /// Enum OtherLiabilities for value: otherLiabilities
            /// </summary>
            [EnumMember(Value = "otherLiabilities")]
            OtherLiabilities = 10        }
        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public ContainerEnum Container { get; set; }
        /// <summary>
        /// Defines MerchantType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MerchantTypeEnum
        {
            /// <summary>
            /// Enum BILLERS for value: BILLERS
            /// </summary>
            [EnumMember(Value = "BILLERS")]
            BILLERS = 1,
            /// <summary>
            /// Enum SUBSCRIPTION for value: SUBSCRIPTION
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION")]
            SUBSCRIPTION = 2,
            /// <summary>
            /// Enum OTHERS for value: OTHERS
            /// </summary>
            [EnumMember(Value = "OTHERS")]
            OTHERS = 3        }
        /// <summary>
        /// Gets or Sets MerchantType
        /// </summary>
        [DataMember(Name="merchantType", EmitDefaultValue=false)]
        public MerchantTypeEnum? MerchantType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTransaction" /> class.
        /// </summary>
        /// <param name="categorySource">categorySource (required).</param>
        /// <param name="container">container (required).</param>
        /// <param name="isPhysical">isPhysical.</param>
        /// <param name="detailCategoryId">detailCategoryId.</param>
        /// <param name="description">description.</param>
        /// <param name="memo">memo.</param>
        /// <param name="merchantType">merchantType.</param>
        /// <param name="categoryId">categoryId (required).</param>
        public UpdateTransaction(CategorySourceEnum categorySource = default(CategorySourceEnum), ContainerEnum container = default(ContainerEnum), bool? isPhysical = default(bool?), long? detailCategoryId = default(long?), Description description = default(Description), string memo = default(string), MerchantTypeEnum? merchantType = default(MerchantTypeEnum?), long? categoryId = default(long?))
        {
            // to ensure "categorySource" is required (not null)
            if (categorySource == null)
            {
                throw new InvalidDataException("categorySource is a required property for UpdateTransaction and cannot be null");
            }
            else
            {
                this.CategorySource = categorySource;
            }
            // to ensure "container" is required (not null)
            if (container == null)
            {
                throw new InvalidDataException("container is a required property for UpdateTransaction and cannot be null");
            }
            else
            {
                this.Container = container;
            }
            // to ensure "categoryId" is required (not null)
            if (categoryId == null)
            {
                throw new InvalidDataException("categoryId is a required property for UpdateTransaction and cannot be null");
            }
            else
            {
                this.CategoryId = categoryId;
            }
            this.IsPhysical = isPhysical;
            this.DetailCategoryId = detailCategoryId;
            this.Description = description;
            this.Memo = memo;
            this.MerchantType = merchantType;
        }
        


        /// <summary>
        /// Gets or Sets IsPhysical
        /// </summary>
        [DataMember(Name="isPhysical", EmitDefaultValue=false)]
        public bool? IsPhysical { get; set; }

        /// <summary>
        /// Gets or Sets DetailCategoryId
        /// </summary>
        [DataMember(Name="detailCategoryId", EmitDefaultValue=false)]
        public long? DetailCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public Description Description { get; set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        [DataMember(Name="memo", EmitDefaultValue=false)]
        public string Memo { get; set; }


        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public long? CategoryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateTransaction {\n");
            sb.Append("  CategorySource: ").Append(CategorySource).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  IsPhysical: ").Append(IsPhysical).Append("\n");
            sb.Append("  DetailCategoryId: ").Append(DetailCategoryId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  MerchantType: ").Append(MerchantType).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateTransaction);
        }

        /// <summary>
        /// Returns true if UpdateTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategorySource == input.CategorySource ||
                    (this.CategorySource != null &&
                    this.CategorySource.Equals(input.CategorySource))
                ) && 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.IsPhysical == input.IsPhysical ||
                    (this.IsPhysical != null &&
                    this.IsPhysical.Equals(input.IsPhysical))
                ) && 
                (
                    this.DetailCategoryId == input.DetailCategoryId ||
                    (this.DetailCategoryId != null &&
                    this.DetailCategoryId.Equals(input.DetailCategoryId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.MerchantType == input.MerchantType ||
                    (this.MerchantType != null &&
                    this.MerchantType.Equals(input.MerchantType))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategorySource != null)
                    hashCode = hashCode * 59 + this.CategorySource.GetHashCode();
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.IsPhysical != null)
                    hashCode = hashCode * 59 + this.IsPhysical.GetHashCode();
                if (this.DetailCategoryId != null)
                    hashCode = hashCode * 59 + this.DetailCategoryId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.MerchantType != null)
                    hashCode = hashCode * 59 + this.MerchantType.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
