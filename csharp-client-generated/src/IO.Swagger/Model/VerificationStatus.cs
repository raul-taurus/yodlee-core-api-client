/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// VerificationStatus
    /// </summary>
    [DataContract]
        public partial class VerificationStatus :  IEquatable<VerificationStatus>, IValidatableObject
    {
        /// <summary>
        /// The reason the account verification failed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The reason the account verification failed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReasonEnum
        {
            /// <summary>
            /// Enum DATANOTAVAILABLE for value: DATA_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "DATA_NOT_AVAILABLE")]
            DATANOTAVAILABLE = 1,
            /// <summary>
            /// Enum ACCOUNTHOLDERMISMATCH for value: ACCOUNT_HOLDER_MISMATCH
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_MISMATCH")]
            ACCOUNTHOLDERMISMATCH = 2,
            /// <summary>
            /// Enum FULLACCOUNTNUMBERANDBANKTRANSFERCODENOTAVAILABLE for value: FULL_ACCOUNT_NUMBER_AND_BANK_TRANSFER_CODE_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "FULL_ACCOUNT_NUMBER_AND_BANK_TRANSFER_CODE_NOT_AVAILABLE")]
            FULLACCOUNTNUMBERANDBANKTRANSFERCODENOTAVAILABLE = 3,
            /// <summary>
            /// Enum FULLACCOUNTNUMBERNOTAVAILABLE for value: FULL_ACCOUNT_NUMBER_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "FULL_ACCOUNT_NUMBER_NOT_AVAILABLE")]
            FULLACCOUNTNUMBERNOTAVAILABLE = 4,
            /// <summary>
            /// Enum BANKTRANSFERCODENOTAVAILABLE for value: BANK_TRANSFER_CODE_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "BANK_TRANSFER_CODE_NOT_AVAILABLE")]
            BANKTRANSFERCODENOTAVAILABLE = 5,
            /// <summary>
            /// Enum EXPIRED for value: EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED = 6,
            /// <summary>
            /// Enum DATAMISMATCH for value: DATA_MISMATCH
            /// </summary>
            [EnumMember(Value = "DATA_MISMATCH")]
            DATAMISMATCH = 7,
            /// <summary>
            /// Enum INSTRUCTIONGENERATIONERROR for value: INSTRUCTION_GENERATION_ERROR
            /// </summary>
            [EnumMember(Value = "INSTRUCTION_GENERATION_ERROR")]
            INSTRUCTIONGENERATIONERROR = 8        }
        /// <summary>
        /// The reason the account verification failed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The reason the account verification failed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// The status of the account verification.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;
        /// </summary>
        /// <value>The status of the account verification.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum VerificationStatusEnum
        {
            /// <summary>
            /// Enum INITIATED for value: INITIATED
            /// </summary>
            [EnumMember(Value = "INITIATED")]
            INITIATED = 1,
            /// <summary>
            /// Enum DEPOSITED for value: DEPOSITED
            /// </summary>
            [EnumMember(Value = "DEPOSITED")]
            DEPOSITED = 2,
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 3,
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4        }
        /// <summary>
        /// The status of the account verification.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;
        /// </summary>
        /// <value>The status of the account verification.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;</value>
        [DataMember(Name="verificationStatus", EmitDefaultValue=false)]
        public VerificationStatusEnum? _VerificationStatus { get; set; }
        /// <summary>
        /// The account verification type.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;
        /// </summary>
        /// <value>The account verification type.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum VerificationTypeEnum
        {
            /// <summary>
            /// Enum MATCHING for value: MATCHING
            /// </summary>
            [EnumMember(Value = "MATCHING")]
            MATCHING = 1,
            /// <summary>
            /// Enum CHALLENGEDEPOSIT for value: CHALLENGE_DEPOSIT
            /// </summary>
            [EnumMember(Value = "CHALLENGE_DEPOSIT")]
            CHALLENGEDEPOSIT = 2        }
        /// <summary>
        /// The account verification type.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;
        /// </summary>
        /// <value>The account verification type.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;</value>
        [DataMember(Name="verificationType", EmitDefaultValue=false)]
        public VerificationTypeEnum? VerificationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationStatus" /> class.
        /// </summary>
        /// <param name="accountId">Unique identifier for the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;.</param>
        /// <param name="providerAccountId">Unique identifier for the provider account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;.</param>
        /// <param name="verificationType">The account verification type.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;.</param>
        /// <param name="account">account.</param>
        public VerificationStatus(long? accountId = default(long?), long? providerAccountId = default(long?), VerificationTypeEnum? verificationType = default(VerificationTypeEnum?), VerificationAccount account = default(VerificationAccount))
        {
            this.AccountId = accountId;
            this.ProviderAccountId = providerAccountId;
            this.VerificationType = verificationType;
            this.Account = account;
        }
        
        /// <summary>
        /// Unique identifier for the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Unique identifier for the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }



        /// <summary>
        /// Unique identifier for the provider account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Unique identifier for the provider account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="providerAccountId", EmitDefaultValue=false)]
        public long? ProviderAccountId { get; set; }


        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public VerificationAccount Account { get; set; }

        /// <summary>
        /// Gets or Sets RemainingAttempts
        /// </summary>
        [DataMember(Name="remainingAttempts", EmitDefaultValue=false)]
        public long? RemainingAttempts { get; private set; }

        /// <summary>
        /// The date of the account verification.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The date of the account verification.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="verificationDate", EmitDefaultValue=false)]
        public string VerificationDate { get; private set; }

        /// <summary>
        /// Unique identifier for the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Unique identifier for the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST verification&lt;/li&gt;&lt;li&gt;GET verification&lt;/li&gt;&lt;li&gt;PUT verification&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="verificationId", EmitDefaultValue=false)]
        public long? VerificationId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerificationStatus {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  _VerificationStatus: ").Append(_VerificationStatus).Append("\n");
            sb.Append("  ProviderAccountId: ").Append(ProviderAccountId).Append("\n");
            sb.Append("  VerificationType: ").Append(VerificationType).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  RemainingAttempts: ").Append(RemainingAttempts).Append("\n");
            sb.Append("  VerificationDate: ").Append(VerificationDate).Append("\n");
            sb.Append("  VerificationId: ").Append(VerificationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerificationStatus);
        }

        /// <summary>
        /// Returns true if VerificationStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of VerificationStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerificationStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this._VerificationStatus == input._VerificationStatus ||
                    (this._VerificationStatus != null &&
                    this._VerificationStatus.Equals(input._VerificationStatus))
                ) && 
                (
                    this.ProviderAccountId == input.ProviderAccountId ||
                    (this.ProviderAccountId != null &&
                    this.ProviderAccountId.Equals(input.ProviderAccountId))
                ) && 
                (
                    this.VerificationType == input.VerificationType ||
                    (this.VerificationType != null &&
                    this.VerificationType.Equals(input.VerificationType))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.RemainingAttempts == input.RemainingAttempts ||
                    (this.RemainingAttempts != null &&
                    this.RemainingAttempts.Equals(input.RemainingAttempts))
                ) && 
                (
                    this.VerificationDate == input.VerificationDate ||
                    (this.VerificationDate != null &&
                    this.VerificationDate.Equals(input.VerificationDate))
                ) && 
                (
                    this.VerificationId == input.VerificationId ||
                    (this.VerificationId != null &&
                    this.VerificationId.Equals(input.VerificationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this._VerificationStatus != null)
                    hashCode = hashCode * 59 + this._VerificationStatus.GetHashCode();
                if (this.ProviderAccountId != null)
                    hashCode = hashCode * 59 + this.ProviderAccountId.GetHashCode();
                if (this.VerificationType != null)
                    hashCode = hashCode * 59 + this.VerificationType.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.RemainingAttempts != null)
                    hashCode = hashCode * 59 + this.RemainingAttempts.GetHashCode();
                if (this.VerificationDate != null)
                    hashCode = hashCode * 59 + this.VerificationDate.GetHashCode();
                if (this.VerificationId != null)
                    hashCode = hashCode * 59 + this.VerificationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
