/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Cobrand
    /// </summary>
    [DataContract]
        public partial class Cobrand :  IEquatable<Cobrand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cobrand" /> class.
        /// </summary>
        /// <param name="cobrandLogin">cobrandLogin (required).</param>
        /// <param name="cobrandPassword">cobrandPassword (required).</param>
        /// <param name="locale">The customer&#x27;s locale that will be considered for the localization functionality.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;.</param>
        public Cobrand(string cobrandLogin = default(string), string cobrandPassword = default(string), string locale = default(string))
        {
            // to ensure "cobrandLogin" is required (not null)
            if (cobrandLogin == null)
            {
                throw new InvalidDataException("cobrandLogin is a required property for Cobrand and cannot be null");
            }
            else
            {
                this.CobrandLogin = cobrandLogin;
            }
            // to ensure "cobrandPassword" is required (not null)
            if (cobrandPassword == null)
            {
                throw new InvalidDataException("cobrandPassword is a required property for Cobrand and cannot be null");
            }
            else
            {
                this.CobrandPassword = cobrandPassword;
            }
            this.Locale = locale;
        }
        
        /// <summary>
        /// Gets or Sets CobrandLogin
        /// </summary>
        [DataMember(Name="cobrandLogin", EmitDefaultValue=false)]
        public string CobrandLogin { get; set; }

        /// <summary>
        /// Gets or Sets CobrandPassword
        /// </summary>
        [DataMember(Name="cobrandPassword", EmitDefaultValue=false)]
        public string CobrandPassword { get; set; }

        /// <summary>
        /// The customer&#x27;s locale that will be considered for the localization functionality.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The customer&#x27;s locale that will be considered for the localization functionality.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cobrand {\n");
            sb.Append("  CobrandLogin: ").Append(CobrandLogin).Append("\n");
            sb.Append("  CobrandPassword: ").Append(CobrandPassword).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cobrand);
        }

        /// <summary>
        /// Returns true if Cobrand instances are equal
        /// </summary>
        /// <param name="input">Instance of Cobrand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cobrand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CobrandLogin == input.CobrandLogin ||
                    (this.CobrandLogin != null &&
                    this.CobrandLogin.Equals(input.CobrandLogin))
                ) && 
                (
                    this.CobrandPassword == input.CobrandPassword ||
                    (this.CobrandPassword != null &&
                    this.CobrandPassword.Equals(input.CobrandPassword))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CobrandLogin != null)
                    hashCode = hashCode * 59 + this.CobrandLogin.GetHashCode();
                if (this.CobrandPassword != null)
                    hashCode = hashCode * 59 + this.CobrandPassword.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
