/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// DataExtractsTransaction
    /// </summary>
    [DataContract]
        public partial class DataExtractsTransaction :  IEquatable<DataExtractsTransaction>, IValidatableObject
    {
        /// <summary>
        /// Indicates if the transaction appears as a debit or a credit transaction in the account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>Indicates if the transaction appears as a debit or a credit transaction in the account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BaseTypeEnum
        {
            /// <summary>
            /// Enum CREDIT for value: CREDIT
            /// </summary>
            [EnumMember(Value = "CREDIT")]
            CREDIT = 1,
            /// <summary>
            /// Enum DEBIT for value: DEBIT
            /// </summary>
            [EnumMember(Value = "DEBIT")]
            DEBIT = 2        }
        /// <summary>
        /// Indicates if the transaction appears as a debit or a credit transaction in the account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>Indicates if the transaction appears as a debit or a credit transaction in the account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="baseType", EmitDefaultValue=false)]
        public BaseTypeEnum? BaseType { get; set; }
        /// <summary>
        /// Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CategorySourceEnum
        {
            /// <summary>
            /// Enum SYSTEM for value: SYSTEM
            /// </summary>
            [EnumMember(Value = "SYSTEM")]
            SYSTEM = 1,
            /// <summary>
            /// Enum USER for value: USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USER = 2        }
        /// <summary>
        /// Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="categorySource", EmitDefaultValue=false)]
        public CategorySourceEnum? CategorySource { get; set; }
        /// <summary>
        /// The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CategoryTypeEnum
        {
            /// <summary>
            /// Enum TRANSFER for value: TRANSFER
            /// </summary>
            [EnumMember(Value = "TRANSFER")]
            TRANSFER = 1,
            /// <summary>
            /// Enum DEFERREDCOMPENSATION for value: DEFERRED_COMPENSATION
            /// </summary>
            [EnumMember(Value = "DEFERRED_COMPENSATION")]
            DEFERREDCOMPENSATION = 2,
            /// <summary>
            /// Enum UNCATEGORIZE for value: UNCATEGORIZE
            /// </summary>
            [EnumMember(Value = "UNCATEGORIZE")]
            UNCATEGORIZE = 3,
            /// <summary>
            /// Enum INCOME for value: INCOME
            /// </summary>
            [EnumMember(Value = "INCOME")]
            INCOME = 4,
            /// <summary>
            /// Enum EXPENSE for value: EXPENSE
            /// </summary>
            [EnumMember(Value = "EXPENSE")]
            EXPENSE = 5        }
        /// <summary>
        /// The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="categoryType", EmitDefaultValue=false)]
        public CategoryTypeEnum? CategoryType { get; set; }
        /// <summary>
        /// The source through which the transaction is added to the Yodlee system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loann&lt;br&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The source through which the transaction is added to the Yodlee system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loann&lt;br&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SourceTypeEnum
        {
            /// <summary>
            /// Enum AGGREGATED for value: AGGREGATED
            /// </summary>
            [EnumMember(Value = "AGGREGATED")]
            AGGREGATED = 1,
            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 2        }
        /// <summary>
        /// The source through which the transaction is added to the Yodlee system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loann&lt;br&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The source through which the transaction is added to the Yodlee system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loann&lt;br&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public SourceTypeEnum? SourceType { get; set; }
        /// <summary>
        /// The account&#x27;s container.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The account&#x27;s container.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CONTAINEREnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,
            /// <summary>
            /// Enum CreditCard for value: creditCard
            /// </summary>
            [EnumMember(Value = "creditCard")]
            CreditCard = 2,
            /// <summary>
            /// Enum Investment for value: investment
            /// </summary>
            [EnumMember(Value = "investment")]
            Investment = 3,
            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 4,
            /// <summary>
            /// Enum Loan for value: loan
            /// </summary>
            [EnumMember(Value = "loan")]
            Loan = 5,
            /// <summary>
            /// Enum Reward for value: reward
            /// </summary>
            [EnumMember(Value = "reward")]
            Reward = 6,
            /// <summary>
            /// Enum Bill for value: bill
            /// </summary>
            [EnumMember(Value = "bill")]
            Bill = 7,
            /// <summary>
            /// Enum RealEstate for value: realEstate
            /// </summary>
            [EnumMember(Value = "realEstate")]
            RealEstate = 8,
            /// <summary>
            /// Enum OtherAssets for value: otherAssets
            /// </summary>
            [EnumMember(Value = "otherAssets")]
            OtherAssets = 9,
            /// <summary>
            /// Enum OtherLiabilities for value: otherLiabilities
            /// </summary>
            [EnumMember(Value = "otherLiabilities")]
            OtherLiabilities = 10        }
        /// <summary>
        /// The account&#x27;s container.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The account&#x27;s container.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="CONTAINER", EmitDefaultValue=false)]
        public CONTAINEREnum? CONTAINER { get; set; }
        /// <summary>
        /// The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SubTypeEnum
        {
            /// <summary>
            /// Enum OVERDRAFTCHARGE for value: OVERDRAFT_CHARGE
            /// </summary>
            [EnumMember(Value = "OVERDRAFT_CHARGE")]
            OVERDRAFTCHARGE = 1,
            /// <summary>
            /// Enum ONLINEPURCHASE for value: ONLINE_PURCHASE
            /// </summary>
            [EnumMember(Value = "ONLINE_PURCHASE")]
            ONLINEPURCHASE = 2,
            /// <summary>
            /// Enum TAXPAYMENT for value: TAX_PAYMENT
            /// </summary>
            [EnumMember(Value = "TAX_PAYMENT")]
            TAXPAYMENT = 3,
            /// <summary>
            /// Enum PAYMENTBYCHECK for value: PAYMENT_BY_CHECK
            /// </summary>
            [EnumMember(Value = "PAYMENT_BY_CHECK")]
            PAYMENTBYCHECK = 4,
            /// <summary>
            /// Enum ATMCASHWITHDRAWAL for value: ATM_CASH_WITHDRAWAL
            /// </summary>
            [EnumMember(Value = "ATM_CASH_WITHDRAWAL")]
            ATMCASHWITHDRAWAL = 5,
            /// <summary>
            /// Enum SERVICECHARGE for value: SERVICE_CHARGE
            /// </summary>
            [EnumMember(Value = "SERVICE_CHARGE")]
            SERVICECHARGE = 6,
            /// <summary>
            /// Enum RETURNEDCHECKCHARGE for value: RETURNED_CHECK_CHARGE
            /// </summary>
            [EnumMember(Value = "RETURNED_CHECK_CHARGE")]
            RETURNEDCHECKCHARGE = 7,
            /// <summary>
            /// Enum STOPPAYMENTCHARGE for value: STOP_PAYMENT_CHARGE
            /// </summary>
            [EnumMember(Value = "STOP_PAYMENT_CHARGE")]
            STOPPAYMENTCHARGE = 8,
            /// <summary>
            /// Enum CONVENIENCEFEE for value: CONVENIENCE_FEE
            /// </summary>
            [EnumMember(Value = "CONVENIENCE_FEE")]
            CONVENIENCEFEE = 9,
            /// <summary>
            /// Enum AUTOLOAN for value: AUTO_LOAN
            /// </summary>
            [EnumMember(Value = "AUTO_LOAN")]
            AUTOLOAN = 10,
            /// <summary>
            /// Enum HOMELOANMORTGAGE for value: HOME_LOAN_MORTGAGE
            /// </summary>
            [EnumMember(Value = "HOME_LOAN_MORTGAGE")]
            HOMELOANMORTGAGE = 11,
            /// <summary>
            /// Enum RECURRINGSUBSCRIPTIONPAYMENT for value: RECURRING_SUBSCRIPTION_PAYMENT
            /// </summary>
            [EnumMember(Value = "RECURRING_SUBSCRIPTION_PAYMENT")]
            RECURRINGSUBSCRIPTIONPAYMENT = 12,
            /// <summary>
            /// Enum INTEREST for value: INTEREST
            /// </summary>
            [EnumMember(Value = "INTEREST")]
            INTEREST = 13,
            /// <summary>
            /// Enum PAYMENT for value: PAYMENT
            /// </summary>
            [EnumMember(Value = "PAYMENT")]
            PAYMENT = 14,
            /// <summary>
            /// Enum PURCHASE for value: PURCHASE
            /// </summary>
            [EnumMember(Value = "PURCHASE")]
            PURCHASE = 15,
            /// <summary>
            /// Enum REFUND for value: REFUND
            /// </summary>
            [EnumMember(Value = "REFUND")]
            REFUND = 16,
            /// <summary>
            /// Enum TRANSFER for value: TRANSFER
            /// </summary>
            [EnumMember(Value = "TRANSFER")]
            TRANSFER = 17,
            /// <summary>
            /// Enum FINANCECHARGE for value: FINANCE_CHARGE
            /// </summary>
            [EnumMember(Value = "FINANCE_CHARGE")]
            FINANCECHARGE = 18,
            /// <summary>
            /// Enum OTHERCHARGESFEES for value: OTHER_CHARGES_FEES
            /// </summary>
            [EnumMember(Value = "OTHER_CHARGES_FEES")]
            OTHERCHARGESFEES = 19,
            /// <summary>
            /// Enum ANNUALFEE for value: ANNUAL_FEE
            /// </summary>
            [EnumMember(Value = "ANNUAL_FEE")]
            ANNUALFEE = 20,
            /// <summary>
            /// Enum DEPOSIT for value: DEPOSIT
            /// </summary>
            [EnumMember(Value = "DEPOSIT")]
            DEPOSIT = 21,
            /// <summary>
            /// Enum DIRECTDEPOSITSALARY for value: DIRECT_DEPOSIT_SALARY
            /// </summary>
            [EnumMember(Value = "DIRECT_DEPOSIT_SALARY")]
            DIRECTDEPOSITSALARY = 22,
            /// <summary>
            /// Enum INVESTMENTINCOMECASH for value: INVESTMENT_INCOME_CASH
            /// </summary>
            [EnumMember(Value = "INVESTMENT_INCOME_CASH")]
            INVESTMENTINCOMECASH = 23,
            /// <summary>
            /// Enum SSA for value: SSA
            /// </summary>
            [EnumMember(Value = "SSA")]
            SSA = 24,
            /// <summary>
            /// Enum REWARDS for value: REWARDS
            /// </summary>
            [EnumMember(Value = "REWARDS")]
            REWARDS = 25,
            /// <summary>
            /// Enum TAXREFUND for value: TAX_REFUND
            /// </summary>
            [EnumMember(Value = "TAX_REFUND")]
            TAXREFUND = 26,
            /// <summary>
            /// Enum CREDITCARDPAYMENT for value: CREDIT_CARD_PAYMENT
            /// </summary>
            [EnumMember(Value = "CREDIT_CARD_PAYMENT")]
            CREDITCARDPAYMENT = 27,
            /// <summary>
            /// Enum INSURANCEPAYMENT for value: INSURANCE_PAYMENT
            /// </summary>
            [EnumMember(Value = "INSURANCE_PAYMENT")]
            INSURANCEPAYMENT = 28,
            /// <summary>
            /// Enum UTILITIESPAYMENT for value: UTILITIES_PAYMENT
            /// </summary>
            [EnumMember(Value = "UTILITIES_PAYMENT")]
            UTILITIESPAYMENT = 29,
            /// <summary>
            /// Enum CHILDSUPPORT for value: CHILD_SUPPORT
            /// </summary>
            [EnumMember(Value = "CHILD_SUPPORT")]
            CHILDSUPPORT = 30,
            /// <summary>
            /// Enum LOAN for value: LOAN
            /// </summary>
            [EnumMember(Value = "LOAN")]
            LOAN = 31,
            /// <summary>
            /// Enum PERSONALLOAN for value: PERSONAL_LOAN
            /// </summary>
            [EnumMember(Value = "PERSONAL_LOAN")]
            PERSONALLOAN = 32,
            /// <summary>
            /// Enum STUDENTLOAN for value: STUDENT_LOAN
            /// </summary>
            [EnumMember(Value = "STUDENT_LOAN")]
            STUDENTLOAN = 33,
            /// <summary>
            /// Enum REIMBURSEMENT for value: REIMBURSEMENT
            /// </summary>
            [EnumMember(Value = "REIMBURSEMENT")]
            REIMBURSEMENT = 34,
            /// <summary>
            /// Enum BALANCETRANSFER for value: BALANCE_TRANSFER
            /// </summary>
            [EnumMember(Value = "BALANCE_TRANSFER")]
            BALANCETRANSFER = 35,
            /// <summary>
            /// Enum OVERDRAFTPROTECTION for value: OVERDRAFT_PROTECTION
            /// </summary>
            [EnumMember(Value = "OVERDRAFT_PROTECTION")]
            OVERDRAFTPROTECTION = 36,
            /// <summary>
            /// Enum CREDIT for value: CREDIT
            /// </summary>
            [EnumMember(Value = "CREDIT")]
            CREDIT = 37,
            /// <summary>
            /// Enum NSFFEES for value: NSF_FEES
            /// </summary>
            [EnumMember(Value = "NSF_FEES")]
            NSFFEES = 38        }
        /// <summary>
        /// The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public SubTypeEnum? SubType { get; set; }
        /// <summary>
        /// The status of the transaction: pending or posted.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The status of the transaction: pending or posted.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum POSTED for value: POSTED
            /// </summary>
            [EnumMember(Value = "POSTED")]
            POSTED = 1,
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 2,
            /// <summary>
            /// Enum SCHEDULED for value: SCHEDULED
            /// </summary>
            [EnumMember(Value = "SCHEDULED")]
            SCHEDULED = 3,
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4,
            /// <summary>
            /// Enum CLEARED for value: CLEARED
            /// </summary>
            [EnumMember(Value = "CLEARED")]
            CLEARED = 5        }
        /// <summary>
        /// The status of the transaction: pending or posted.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The status of the transaction: pending or posted.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataExtractsTransaction" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="principal">principal.</param>
        /// <param name="interest">interest.</param>
        /// <param name="price">price.</param>
        /// <param name="commission">commission.</param>
        /// <param name="amount">amount.</param>
        /// <param name="merchant">merchant.</param>
        /// <param name="runningBalance">runningBalance.</param>
        public DataExtractsTransaction(Description description = default(Description), Money principal = default(Money), Money interest = default(Money), Money price = default(Money), Money commission = default(Money), Money amount = default(Money), Merchant merchant = default(Merchant), Money runningBalance = default(Money))
        {
            this.Description = description;
            this.Principal = principal;
            this.Interest = interest;
            this.Price = price;
            this.Commission = commission;
            this.Amount = amount;
            this.Merchant = merchant;
            this.RunningBalance = runningBalance;
        }
        
        /// <summary>
        /// The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; private set; }

        /// <summary>
        /// A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.&lt;br&gt;Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.
        /// </summary>
        /// <value>A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.&lt;br&gt;Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.</value>
        [DataMember(Name="sourceId", EmitDefaultValue=false)]
        public string SourceId { get; private set; }

        /// <summary>
        /// The symbol of the security being traded.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The settle date field applies only to trade-related transactions. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The symbol of the security being traded.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The settle date field applies only to trade-related transactions. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; private set; }

        /// <summary>
        /// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.&lt;br&gt;&lt;b&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;/b&gt;: The CUSIP number field applies only to trade related transactions.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.&lt;br&gt;&lt;b&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;/b&gt;: The CUSIP number field applies only to trade related transactions.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="cusipNumber", EmitDefaultValue=false)]
        public string CusipNumber { get; private set; }

        /// <summary>
        /// The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="highLevelCategoryId", EmitDefaultValue=false)]
        public long? HighLevelCategoryId { get; private set; }

        /// <summary>
        /// The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard&lt;br&gt;
        /// </summary>
        /// <value>The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard&lt;br&gt;</value>
        [DataMember(Name="detailCategoryId", EmitDefaultValue=false)]
        public long? DetailCategoryId { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public Description Description { get; set; }

        /// <summary>
        /// Additional notes provided by the user for a particular  transaction through application or API services. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>Additional notes provided by the user for a particular  transaction through application or API services. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="memo", EmitDefaultValue=false)]
        public string Memo { get; private set; }

        /// <summary>
        /// It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="settleDate", EmitDefaultValue=false)]
        public string SettleDate { get; private set; }

        /// <summary>
        /// The nature of the transaction, i.e., deposit, refund, payment, etc.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment&lt;br&gt;
        /// </summary>
        /// <value>The nature of the transaction, i.e., deposit, refund, payment, etc.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment&lt;br&gt;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// The intermediary of the transaction.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  bank,creditCard,investment,loan&lt;br&gt;
        /// </summary>
        /// <value>The intermediary of the transaction.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  bank,creditCard,investment,loan&lt;br&gt;</value>
        [DataMember(Name="intermediary", EmitDefaultValue=false)]
        public List<string> Intermediary { get; private set; }



        /// <summary>
        /// Gets or Sets Principal
        /// </summary>
        [DataMember(Name="principal", EmitDefaultValue=false)]
        public Money Principal { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; private set; }

        /// <summary>
        /// Indicates if the transaction is marked as deleted.&lt;b&gt;Applicable containers&lt;/b&gt;: All Containers&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Both &lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET dataExtracts/userData&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Indicates if the transaction is marked as deleted.&lt;b&gt;Applicable containers&lt;/b&gt;: All Containers&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Both &lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET dataExtracts/userData&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; private set; }

        /// <summary>
        /// Gets or Sets Interest
        /// </summary>
        [DataMember(Name="interest", EmitDefaultValue=false)]
        public Money Interest { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Money Price { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public Money Commission { get; set; }

        /// <summary>
        /// An unique identifier for the transaction. The combination of the id and account container are unique in the system. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>An unique identifier for the transaction. The combination of the id and account container are unique in the system. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// Indicates the merchantType of the transaction.e.g:-BILLERS,SUBSCRIPTION,OTHERS &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,loan&lt;br&gt;
        /// </summary>
        /// <value>Indicates the merchantType of the transaction.e.g:-BILLERS,SUBSCRIPTION,OTHERS &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,loan&lt;br&gt;</value>
        [DataMember(Name="merchantType", EmitDefaultValue=false)]
        public string MerchantType { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public Money Amount { get; set; }

        /// <summary>
        /// The checkNumber of the transaction.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank&lt;br&gt;
        /// </summary>
        /// <value>The checkNumber of the transaction.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank&lt;br&gt;</value>
        [DataMember(Name="checkNumber", EmitDefaultValue=false)]
        public string CheckNumber { get; private set; }

        /// <summary>
        /// Indicates if the transaction is happened online or in-store. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,loan&lt;br&gt;
        /// </summary>
        /// <value>Indicates if the transaction is happened online or in-store. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,loan&lt;br&gt;</value>
        [DataMember(Name="isPhysical", EmitDefaultValue=false)]
        public bool? IsPhysical { get; private set; }

        /// <summary>
        /// The quantity associated with the transaction.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The quantity field applies only to trade-related transactions.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The quantity associated with the transaction.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The quantity field applies only to trade-related transactions.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; private set; }

        /// <summary>
        /// It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="valoren", EmitDefaultValue=false)]
        public string Valoren { get; private set; }

        /// <summary>
        /// Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="isManual", EmitDefaultValue=false)]
        public bool? IsManual { get; private set; }

        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name="merchant", EmitDefaultValue=false)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="sedol", EmitDefaultValue=false)]
        public string Sedol { get; private set; }

        /// <summary>
        /// The date the transaction happens in the account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The date the transaction happens in the account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        public string TransactionDate { get; private set; }


        /// <summary>
        /// The account from which the transaction was made. This is basically the primary key of the account resource. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The account from which the transaction was made. This is basically the primary key of the account resource. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public string CreatedDate { get; private set; }



        /// <summary>
        /// The date on which the transaction is posted to the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The date on which the transaction is posted to the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="postDate", EmitDefaultValue=false)]
        public string PostDate { get; private set; }

        /// <summary>
        /// The parentCategoryId of the category assigned to the transaction.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: This field will be provided in the response if the transaction is assigned to a user-created category. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The parentCategoryId of the category assigned to the transaction.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: This field will be provided in the response if the transaction is assigned to a user-created category. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="parentCategoryId", EmitDefaultValue=false)]
        public long? ParentCategoryId { get; private set; }


        /// <summary>
        /// The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; private set; }

        /// <summary>
        /// Gets or Sets RunningBalance
        /// </summary>
        [DataMember(Name="runningBalance", EmitDefaultValue=false)]
        public Money RunningBalance { get; set; }

        /// <summary>
        /// The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;
        /// </summary>
        /// <value>The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;</value>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public long? CategoryId { get; private set; }

        /// <summary>
        /// For transactions involving securities, this captures the securities description.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>For transactions involving securities, this captures the securities description.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="holdingDescription", EmitDefaultValue=false)]
        public string HoldingDescription { get; private set; }

        /// <summary>
        /// International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="isin", EmitDefaultValue=false)]
        public string Isin { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataExtractsTransaction {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  CusipNumber: ").Append(CusipNumber).Append("\n");
            sb.Append("  HighLevelCategoryId: ").Append(HighLevelCategoryId).Append("\n");
            sb.Append("  DetailCategoryId: ").Append(DetailCategoryId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  SettleDate: ").Append(SettleDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Intermediary: ").Append(Intermediary).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  CategorySource: ").Append(CategorySource).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Interest: ").Append(Interest).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MerchantType: ").Append(MerchantType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  IsPhysical: ").Append(IsPhysical).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Valoren: ").Append(Valoren).Append("\n");
            sb.Append("  IsManual: ").Append(IsManual).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  Sedol: ").Append(Sedol).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  CategoryType: ").Append(CategoryType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  CONTAINER: ").Append(CONTAINER).Append("\n");
            sb.Append("  PostDate: ").Append(PostDate).Append("\n");
            sb.Append("  ParentCategoryId: ").Append(ParentCategoryId).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  RunningBalance: ").Append(RunningBalance).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  HoldingDescription: ").Append(HoldingDescription).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataExtractsTransaction);
        }

        /// <summary>
        /// Returns true if DataExtractsTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of DataExtractsTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataExtractsTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.CusipNumber == input.CusipNumber ||
                    (this.CusipNumber != null &&
                    this.CusipNumber.Equals(input.CusipNumber))
                ) && 
                (
                    this.HighLevelCategoryId == input.HighLevelCategoryId ||
                    (this.HighLevelCategoryId != null &&
                    this.HighLevelCategoryId.Equals(input.HighLevelCategoryId))
                ) && 
                (
                    this.DetailCategoryId == input.DetailCategoryId ||
                    (this.DetailCategoryId != null &&
                    this.DetailCategoryId.Equals(input.DetailCategoryId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.SettleDate == input.SettleDate ||
                    (this.SettleDate != null &&
                    this.SettleDate.Equals(input.SettleDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Intermediary == input.Intermediary ||
                    this.Intermediary != null &&
                    input.Intermediary != null &&
                    this.Intermediary.SequenceEqual(input.Intermediary)
                ) && 
                (
                    this.BaseType == input.BaseType ||
                    (this.BaseType != null &&
                    this.BaseType.Equals(input.BaseType))
                ) && 
                (
                    this.CategorySource == input.CategorySource ||
                    (this.CategorySource != null &&
                    this.CategorySource.Equals(input.CategorySource))
                ) && 
                (
                    this.Principal == input.Principal ||
                    (this.Principal != null &&
                    this.Principal.Equals(input.Principal))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.Interest == input.Interest ||
                    (this.Interest != null &&
                    this.Interest.Equals(input.Interest))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MerchantType == input.MerchantType ||
                    (this.MerchantType != null &&
                    this.MerchantType.Equals(input.MerchantType))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                ) && 
                (
                    this.IsPhysical == input.IsPhysical ||
                    (this.IsPhysical != null &&
                    this.IsPhysical.Equals(input.IsPhysical))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Valoren == input.Valoren ||
                    (this.Valoren != null &&
                    this.Valoren.Equals(input.Valoren))
                ) && 
                (
                    this.IsManual == input.IsManual ||
                    (this.IsManual != null &&
                    this.IsManual.Equals(input.IsManual))
                ) && 
                (
                    this.Merchant == input.Merchant ||
                    (this.Merchant != null &&
                    this.Merchant.Equals(input.Merchant))
                ) && 
                (
                    this.Sedol == input.Sedol ||
                    (this.Sedol != null &&
                    this.Sedol.Equals(input.Sedol))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.CategoryType == input.CategoryType ||
                    (this.CategoryType != null &&
                    this.CategoryType.Equals(input.CategoryType))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.CONTAINER == input.CONTAINER ||
                    (this.CONTAINER != null &&
                    this.CONTAINER.Equals(input.CONTAINER))
                ) && 
                (
                    this.PostDate == input.PostDate ||
                    (this.PostDate != null &&
                    this.PostDate.Equals(input.PostDate))
                ) && 
                (
                    this.ParentCategoryId == input.ParentCategoryId ||
                    (this.ParentCategoryId != null &&
                    this.ParentCategoryId.Equals(input.ParentCategoryId))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.RunningBalance == input.RunningBalance ||
                    (this.RunningBalance != null &&
                    this.RunningBalance.Equals(input.RunningBalance))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.HoldingDescription == input.HoldingDescription ||
                    (this.HoldingDescription != null &&
                    this.HoldingDescription.Equals(input.HoldingDescription))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.CusipNumber != null)
                    hashCode = hashCode * 59 + this.CusipNumber.GetHashCode();
                if (this.HighLevelCategoryId != null)
                    hashCode = hashCode * 59 + this.HighLevelCategoryId.GetHashCode();
                if (this.DetailCategoryId != null)
                    hashCode = hashCode * 59 + this.DetailCategoryId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.SettleDate != null)
                    hashCode = hashCode * 59 + this.SettleDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Intermediary != null)
                    hashCode = hashCode * 59 + this.Intermediary.GetHashCode();
                if (this.BaseType != null)
                    hashCode = hashCode * 59 + this.BaseType.GetHashCode();
                if (this.CategorySource != null)
                    hashCode = hashCode * 59 + this.CategorySource.GetHashCode();
                if (this.Principal != null)
                    hashCode = hashCode * 59 + this.Principal.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.Interest != null)
                    hashCode = hashCode * 59 + this.Interest.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MerchantType != null)
                    hashCode = hashCode * 59 + this.MerchantType.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CheckNumber != null)
                    hashCode = hashCode * 59 + this.CheckNumber.GetHashCode();
                if (this.IsPhysical != null)
                    hashCode = hashCode * 59 + this.IsPhysical.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Valoren != null)
                    hashCode = hashCode * 59 + this.Valoren.GetHashCode();
                if (this.IsManual != null)
                    hashCode = hashCode * 59 + this.IsManual.GetHashCode();
                if (this.Merchant != null)
                    hashCode = hashCode * 59 + this.Merchant.GetHashCode();
                if (this.Sedol != null)
                    hashCode = hashCode * 59 + this.Sedol.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.CategoryType != null)
                    hashCode = hashCode * 59 + this.CategoryType.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.CONTAINER != null)
                    hashCode = hashCode * 59 + this.CONTAINER.GetHashCode();
                if (this.PostDate != null)
                    hashCode = hashCode * 59 + this.PostDate.GetHashCode();
                if (this.ParentCategoryId != null)
                    hashCode = hashCode * 59 + this.ParentCategoryId.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.RunningBalance != null)
                    hashCode = hashCode * 59 + this.RunningBalance.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.HoldingDescription != null)
                    hashCode = hashCode * 59 + this.HoldingDescription.GetHashCode();
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
