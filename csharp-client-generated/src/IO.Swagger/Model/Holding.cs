/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Holding
    /// </summary>
    [DataContract]
        public partial class Holding :  IEquatable<Holding>, IValidatableObject
    {
        /// <summary>
        /// The type of the option position (i.e., put or call).&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The option type field is only applicable to options.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of the option position (i.e., put or call).&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The option type field is only applicable to options.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OptionTypeEnum
        {
            /// <summary>
            /// Enum Put for value: put
            /// </summary>
            [EnumMember(Value = "put")]
            Put = 1,
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 2,
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 3,
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 4        }
        /// <summary>
        /// The type of the option position (i.e., put or call).&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The option type field is only applicable to options.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of the option position (i.e., put or call).&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The option type field is only applicable to options.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="optionType", EmitDefaultValue=false)]
        public OptionTypeEnum? OptionType { get; set; }
        /// <summary>
        /// Type of holding&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Type of holding&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum HoldingTypeEnum
        {
            /// <summary>
            /// Enum Stock for value: stock
            /// </summary>
            [EnumMember(Value = "stock")]
            Stock = 1,
            /// <summary>
            /// Enum MutualFund for value: mutualFund
            /// </summary>
            [EnumMember(Value = "mutualFund")]
            MutualFund = 2,
            /// <summary>
            /// Enum Bond for value: bond
            /// </summary>
            [EnumMember(Value = "bond")]
            Bond = 3,
            /// <summary>
            /// Enum CD for value: CD
            /// </summary>
            [EnumMember(Value = "CD")]
            CD = 4,
            /// <summary>
            /// Enum Option for value: option
            /// </summary>
            [EnumMember(Value = "option")]
            Option = 5,
            /// <summary>
            /// Enum MoneyMarketFund for value: moneyMarketFund
            /// </summary>
            [EnumMember(Value = "moneyMarketFund")]
            MoneyMarketFund = 6,
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 7,
            /// <summary>
            /// Enum Remic for value: remic
            /// </summary>
            [EnumMember(Value = "remic")]
            Remic = 8,
            /// <summary>
            /// Enum Future for value: future
            /// </summary>
            [EnumMember(Value = "future")]
            Future = 9,
            /// <summary>
            /// Enum Commodity for value: commodity
            /// </summary>
            [EnumMember(Value = "commodity")]
            Commodity = 10,
            /// <summary>
            /// Enum Currency for value: currency
            /// </summary>
            [EnumMember(Value = "currency")]
            Currency = 11,
            /// <summary>
            /// Enum UnitInvestmentTrust for value: unitInvestmentTrust
            /// </summary>
            [EnumMember(Value = "unitInvestmentTrust")]
            UnitInvestmentTrust = 12,
            /// <summary>
            /// Enum EmployeeStockOption for value: employeeStockOption
            /// </summary>
            [EnumMember(Value = "employeeStockOption")]
            EmployeeStockOption = 13,
            /// <summary>
            /// Enum InsuranceAnnuity for value: insuranceAnnuity
            /// </summary>
            [EnumMember(Value = "insuranceAnnuity")]
            InsuranceAnnuity = 14,
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 15,
            /// <summary>
            /// Enum PreferredStock for value: preferredStock
            /// </summary>
            [EnumMember(Value = "preferredStock")]
            PreferredStock = 16,
            /// <summary>
            /// Enum ETF for value: ETF
            /// </summary>
            [EnumMember(Value = "ETF")]
            ETF = 17,
            /// <summary>
            /// Enum Warrants for value: warrants
            /// </summary>
            [EnumMember(Value = "warrants")]
            Warrants = 18,
            /// <summary>
            /// Enum DigitalAsset for value: digitalAsset
            /// </summary>
            [EnumMember(Value = "digitalAsset")]
            DigitalAsset = 19        }
        /// <summary>
        /// Type of holding&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Type of holding&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="holdingType", EmitDefaultValue=false)]
        public HoldingTypeEnum? HoldingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Holding" /> class.
        /// </summary>
        /// <param name="unvestedValue">unvestedValue.</param>
        /// <param name="vestedValue">vestedValue.</param>
        /// <param name="price">price.</param>
        /// <param name="value">value.</param>
        /// <param name="accruedInterest">accruedInterest.</param>
        /// <param name="spread">spread.</param>
        /// <param name="accruedIncome">accruedIncome.</param>
        /// <param name="costBasis">costBasis.</param>
        /// <param name="strikePrice">strikePrice.</param>
        public Holding(Money unvestedValue = default(Money), Money vestedValue = default(Money), Money price = default(Money), Money value = default(Money), Money accruedInterest = default(Money), Money spread = default(Money), Money accruedIncome = default(Money), Money costBasis = default(Money), Money strikePrice = default(Money))
        {
            this.UnvestedValue = unvestedValue;
            this.VestedValue = vestedValue;
            this.Price = price;
            this.Value = value;
            this.AccruedInterest = accruedInterest;
            this.Spread = spread;
            this.AccruedIncome = accruedIncome;
            this.CostBasis = costBasis;
            this.StrikePrice = strikePrice;
        }
        
        /// <summary>
        /// The symbol of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The symbol of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; private set; }

        /// <summary>
        /// The quantity of the employee stock options that are already exercised or bought by the employee.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The quantity of the employee stock options that are already exercised or bought by the employee.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="exercisedQuantity", EmitDefaultValue=false)]
        public double? ExercisedQuantity { get; private set; }

        /// <summary>
        /// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="cusipNumber", EmitDefaultValue=false)]
        public string CusipNumber { get; private set; }

        /// <summary>
        /// Asset classification applied to the holding. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>Asset classification applied to the holding. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="assetClassification", EmitDefaultValue=false)]
        public List<AssetClassification> AssetClassification { get; private set; }

        /// <summary>
        /// The quantity of units or shares that are already vested on a vest date.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The quantity of units or shares that are already vested on a vest date.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="vestedQuantity", EmitDefaultValue=false)]
        public double? VestedQuantity { get; private set; }

        /// <summary>
        /// The description (name) for the holding (E.g., Cisco Systems)&lt;br&gt;For insurance container, the field is only applicable for insurance annuity and variable life insurance types. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The description (name) for the holding (E.g., Cisco Systems)&lt;br&gt;For insurance container, the field is only applicable for insurance annuity and variable life insurance types. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; private set; }

        /// <summary>
        /// Gets or Sets UnvestedValue
        /// </summary>
        [DataMember(Name="unvestedValue", EmitDefaultValue=false)]
        public Money UnvestedValue { get; set; }

        /// <summary>
        /// Indicates the security style of holding identified through the security service.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Indicates the security style of holding identified through the security service.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="securityStyle", EmitDefaultValue=false)]
        public string SecurityStyle { get; private set; }

        /// <summary>
        /// Gets or Sets VestedValue
        /// </summary>
        [DataMember(Name="vestedValue", EmitDefaultValue=false)]
        public Money VestedValue { get; set; }


        /// <summary>
        /// The date when the information was last updated in the system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The date when the information was last updated in the system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; private set; }

        /// <summary>
        /// The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.&lt;br&gt;&lt;b&gt;Additional Details&lt;/b&gt;: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: All Containers&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET dataExtracts/userData&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.&lt;br&gt;&lt;b&gt;Additional Details&lt;/b&gt;: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: All Containers&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET dataExtracts/userData&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="associatedProviderAccountId", EmitDefaultValue=false)]
        public List<long?> AssociatedProviderAccountId { get; private set; }

        /// <summary>
        /// Indicates the security match status id of the investment option identified during security normalization.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>Indicates the security match status id of the investment option identified during security normalization.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="matchStatus", EmitDefaultValue=false)]
        public string MatchStatus { get; private set; }


        /// <summary>
        /// The stated maturity date of a bond or CD.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The stated maturity date of a bond or CD.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        public string MaturityDate { get; private set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Money Price { get; set; }

        /// <summary>
        /// The fixed duration for which the bond or CD is issued.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The term field is only applicable to CD.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The fixed duration for which the bond or CD is issued.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The term field is only applicable to CD.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="term", EmitDefaultValue=false)]
        public string Term { get; private set; }

        /// <summary>
        /// The quantity of tradeable units in a contract.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The contract quantity field is only applicable to commodity and currency.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The quantity of tradeable units in a contract.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The contract quantity field is only applicable to commodity and currency.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="contractQuantity", EmitDefaultValue=false)]
        public double? ContractQuantity { get; private set; }

        /// <summary>
        /// Unique identifier for the security added in the system. This is the primary key of the holding resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Unique identifier for the security added in the system. This is the primary key of the holding resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// Indicates that the holding is a short trading.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>Indicates that the holding is a short trading.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="isShort", EmitDefaultValue=false)]
        public bool? IsShort { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Money Value { get; set; }

        /// <summary>
        /// The date on which an option, right or warrant expires.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The expiration date field is only applicable to options and employee stock options.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The date on which an option, right or warrant expires.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The expiration date field is only applicable to options and employee stock options.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; private set; }

        /// <summary>
        /// The interest rate on a CD.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The interest rate field is only applicable to CD.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The interest rate on a CD.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The interest rate field is only applicable to CD.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="interestRate", EmitDefaultValue=false)]
        public double? InterestRate { get; private set; }

        /// <summary>
        /// The quantity held for the holding.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.&lt;br&gt;For insurance container, the field is only applicable for insurance annuity and variable life insurance types.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The quantity held for the holding.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.&lt;br&gt;For insurance container, the field is only applicable for insurance annuity and variable life insurance types.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; private set; }

        /// <summary>
        /// Gets or Sets AccruedInterest
        /// </summary>
        [DataMember(Name="accruedInterest", EmitDefaultValue=false)]
        public Money AccruedInterest { get; set; }

        /// <summary>
        /// The date on which equity awards like ESOP, RSU, etc., are issued or granted.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The date on which equity awards like ESOP, RSU, etc., are issued or granted.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="grantDate", EmitDefaultValue=false)]
        public string GrantDate { get; private set; }

        /// <summary>
        /// The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The SEDOL field is only applicable to the trade related transactions&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The SEDOL field is only applicable to the trade related transactions&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="sedol", EmitDefaultValue=false)]
        public string Sedol { get; private set; }

        /// <summary>
        /// The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="vestedSharesExercisable", EmitDefaultValue=false)]
        public double? VestedSharesExercisable { get; private set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name="spread", EmitDefaultValue=false)]
        public Money Spread { get; set; }

        /// <summary>
        /// Unique identifier of the account to which the security is linked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Unique identifier of the account to which the security is linked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; private set; }

        /// <summary>
        /// The enrichedDescription is the security description of the normalized holding&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The enrichedDescription is the security description of the normalized holding&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="enrichedDescription", EmitDefaultValue=false)]
        public string EnrichedDescription { get; private set; }

        /// <summary>
        /// The stated interest rate for a bond.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The stated interest rate for a bond.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="couponRate", EmitDefaultValue=false)]
        public double? CouponRate { get; private set; }

        /// <summary>
        /// The date on which the holding is created in the Yodlee system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The date on which the holding is created in the Yodlee system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public string CreatedDate { get; private set; }

        /// <summary>
        /// Gets or Sets AccruedIncome
        /// </summary>
        [DataMember(Name="accruedIncome", EmitDefaultValue=false)]
        public Money AccruedIncome { get; set; }

        /// <summary>
        /// Indicates the security type of holding identified through the security service.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Indicates the security type of holding identified through the security service.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="securityType", EmitDefaultValue=false)]
        public string SecurityType { get; private set; }

        /// <summary>
        /// Unique identifier for the user&#x27;s association with the provider.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Unique identifier for the user&#x27;s association with the provider.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="providerAccountId", EmitDefaultValue=false)]
        public long? ProviderAccountId { get; private set; }

        /// <summary>
        /// Indicates the number of unvested quantity or units.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>Indicates the number of unvested quantity or units.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="unvestedQuantity", EmitDefaultValue=false)]
        public double? UnvestedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets CostBasis
        /// </summary>
        [DataMember(Name="costBasis", EmitDefaultValue=false)]
        public Money CostBasis { get; set; }

        /// <summary>
        /// The date on which a RSU, RSA, or an employee stock options become vested.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The date on which a RSU, RSA, or an employee stock options become vested.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="vestingDate", EmitDefaultValue=false)]
        public string VestingDate { get; private set; }

        /// <summary>
        /// The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The ISIN field is only applicable to the trade related transactions&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;
        /// </summary>
        /// <value>The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The ISIN field is only applicable to the trade related transactions&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment&lt;br&gt;</value>
        [DataMember(Name="isin", EmitDefaultValue=false)]
        public string Isin { get; private set; }

        /// <summary>
        /// Gets or Sets StrikePrice
        /// </summary>
        [DataMember(Name="strikePrice", EmitDefaultValue=false)]
        public Money StrikePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Holding {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  ExercisedQuantity: ").Append(ExercisedQuantity).Append("\n");
            sb.Append("  CusipNumber: ").Append(CusipNumber).Append("\n");
            sb.Append("  AssetClassification: ").Append(AssetClassification).Append("\n");
            sb.Append("  VestedQuantity: ").Append(VestedQuantity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UnvestedValue: ").Append(UnvestedValue).Append("\n");
            sb.Append("  SecurityStyle: ").Append(SecurityStyle).Append("\n");
            sb.Append("  VestedValue: ").Append(VestedValue).Append("\n");
            sb.Append("  OptionType: ").Append(OptionType).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  AssociatedProviderAccountId: ").Append(AssociatedProviderAccountId).Append("\n");
            sb.Append("  MatchStatus: ").Append(MatchStatus).Append("\n");
            sb.Append("  HoldingType: ").Append(HoldingType).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Term: ").Append(Term).Append("\n");
            sb.Append("  ContractQuantity: ").Append(ContractQuantity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsShort: ").Append(IsShort).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  AccruedInterest: ").Append(AccruedInterest).Append("\n");
            sb.Append("  GrantDate: ").Append(GrantDate).Append("\n");
            sb.Append("  Sedol: ").Append(Sedol).Append("\n");
            sb.Append("  VestedSharesExercisable: ").Append(VestedSharesExercisable).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  EnrichedDescription: ").Append(EnrichedDescription).Append("\n");
            sb.Append("  CouponRate: ").Append(CouponRate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  AccruedIncome: ").Append(AccruedIncome).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("  ProviderAccountId: ").Append(ProviderAccountId).Append("\n");
            sb.Append("  UnvestedQuantity: ").Append(UnvestedQuantity).Append("\n");
            sb.Append("  CostBasis: ").Append(CostBasis).Append("\n");
            sb.Append("  VestingDate: ").Append(VestingDate).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Holding);
        }

        /// <summary>
        /// Returns true if Holding instances are equal
        /// </summary>
        /// <param name="input">Instance of Holding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Holding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.ExercisedQuantity == input.ExercisedQuantity ||
                    (this.ExercisedQuantity != null &&
                    this.ExercisedQuantity.Equals(input.ExercisedQuantity))
                ) && 
                (
                    this.CusipNumber == input.CusipNumber ||
                    (this.CusipNumber != null &&
                    this.CusipNumber.Equals(input.CusipNumber))
                ) && 
                (
                    this.AssetClassification == input.AssetClassification ||
                    this.AssetClassification != null &&
                    input.AssetClassification != null &&
                    this.AssetClassification.SequenceEqual(input.AssetClassification)
                ) && 
                (
                    this.VestedQuantity == input.VestedQuantity ||
                    (this.VestedQuantity != null &&
                    this.VestedQuantity.Equals(input.VestedQuantity))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.UnvestedValue == input.UnvestedValue ||
                    (this.UnvestedValue != null &&
                    this.UnvestedValue.Equals(input.UnvestedValue))
                ) && 
                (
                    this.SecurityStyle == input.SecurityStyle ||
                    (this.SecurityStyle != null &&
                    this.SecurityStyle.Equals(input.SecurityStyle))
                ) && 
                (
                    this.VestedValue == input.VestedValue ||
                    (this.VestedValue != null &&
                    this.VestedValue.Equals(input.VestedValue))
                ) && 
                (
                    this.OptionType == input.OptionType ||
                    (this.OptionType != null &&
                    this.OptionType.Equals(input.OptionType))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.AssociatedProviderAccountId == input.AssociatedProviderAccountId ||
                    this.AssociatedProviderAccountId != null &&
                    input.AssociatedProviderAccountId != null &&
                    this.AssociatedProviderAccountId.SequenceEqual(input.AssociatedProviderAccountId)
                ) && 
                (
                    this.MatchStatus == input.MatchStatus ||
                    (this.MatchStatus != null &&
                    this.MatchStatus.Equals(input.MatchStatus))
                ) && 
                (
                    this.HoldingType == input.HoldingType ||
                    (this.HoldingType != null &&
                    this.HoldingType.Equals(input.HoldingType))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Term == input.Term ||
                    (this.Term != null &&
                    this.Term.Equals(input.Term))
                ) && 
                (
                    this.ContractQuantity == input.ContractQuantity ||
                    (this.ContractQuantity != null &&
                    this.ContractQuantity.Equals(input.ContractQuantity))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsShort == input.IsShort ||
                    (this.IsShort != null &&
                    this.IsShort.Equals(input.IsShort))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.AccruedInterest == input.AccruedInterest ||
                    (this.AccruedInterest != null &&
                    this.AccruedInterest.Equals(input.AccruedInterest))
                ) && 
                (
                    this.GrantDate == input.GrantDate ||
                    (this.GrantDate != null &&
                    this.GrantDate.Equals(input.GrantDate))
                ) && 
                (
                    this.Sedol == input.Sedol ||
                    (this.Sedol != null &&
                    this.Sedol.Equals(input.Sedol))
                ) && 
                (
                    this.VestedSharesExercisable == input.VestedSharesExercisable ||
                    (this.VestedSharesExercisable != null &&
                    this.VestedSharesExercisable.Equals(input.VestedSharesExercisable))
                ) && 
                (
                    this.Spread == input.Spread ||
                    (this.Spread != null &&
                    this.Spread.Equals(input.Spread))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.EnrichedDescription == input.EnrichedDescription ||
                    (this.EnrichedDescription != null &&
                    this.EnrichedDescription.Equals(input.EnrichedDescription))
                ) && 
                (
                    this.CouponRate == input.CouponRate ||
                    (this.CouponRate != null &&
                    this.CouponRate.Equals(input.CouponRate))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.AccruedIncome == input.AccruedIncome ||
                    (this.AccruedIncome != null &&
                    this.AccruedIncome.Equals(input.AccruedIncome))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    (this.SecurityType != null &&
                    this.SecurityType.Equals(input.SecurityType))
                ) && 
                (
                    this.ProviderAccountId == input.ProviderAccountId ||
                    (this.ProviderAccountId != null &&
                    this.ProviderAccountId.Equals(input.ProviderAccountId))
                ) && 
                (
                    this.UnvestedQuantity == input.UnvestedQuantity ||
                    (this.UnvestedQuantity != null &&
                    this.UnvestedQuantity.Equals(input.UnvestedQuantity))
                ) && 
                (
                    this.CostBasis == input.CostBasis ||
                    (this.CostBasis != null &&
                    this.CostBasis.Equals(input.CostBasis))
                ) && 
                (
                    this.VestingDate == input.VestingDate ||
                    (this.VestingDate != null &&
                    this.VestingDate.Equals(input.VestingDate))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    (this.StrikePrice != null &&
                    this.StrikePrice.Equals(input.StrikePrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.ExercisedQuantity != null)
                    hashCode = hashCode * 59 + this.ExercisedQuantity.GetHashCode();
                if (this.CusipNumber != null)
                    hashCode = hashCode * 59 + this.CusipNumber.GetHashCode();
                if (this.AssetClassification != null)
                    hashCode = hashCode * 59 + this.AssetClassification.GetHashCode();
                if (this.VestedQuantity != null)
                    hashCode = hashCode * 59 + this.VestedQuantity.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.UnvestedValue != null)
                    hashCode = hashCode * 59 + this.UnvestedValue.GetHashCode();
                if (this.SecurityStyle != null)
                    hashCode = hashCode * 59 + this.SecurityStyle.GetHashCode();
                if (this.VestedValue != null)
                    hashCode = hashCode * 59 + this.VestedValue.GetHashCode();
                if (this.OptionType != null)
                    hashCode = hashCode * 59 + this.OptionType.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.AssociatedProviderAccountId != null)
                    hashCode = hashCode * 59 + this.AssociatedProviderAccountId.GetHashCode();
                if (this.MatchStatus != null)
                    hashCode = hashCode * 59 + this.MatchStatus.GetHashCode();
                if (this.HoldingType != null)
                    hashCode = hashCode * 59 + this.HoldingType.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Term != null)
                    hashCode = hashCode * 59 + this.Term.GetHashCode();
                if (this.ContractQuantity != null)
                    hashCode = hashCode * 59 + this.ContractQuantity.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsShort != null)
                    hashCode = hashCode * 59 + this.IsShort.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.AccruedInterest != null)
                    hashCode = hashCode * 59 + this.AccruedInterest.GetHashCode();
                if (this.GrantDate != null)
                    hashCode = hashCode * 59 + this.GrantDate.GetHashCode();
                if (this.Sedol != null)
                    hashCode = hashCode * 59 + this.Sedol.GetHashCode();
                if (this.VestedSharesExercisable != null)
                    hashCode = hashCode * 59 + this.VestedSharesExercisable.GetHashCode();
                if (this.Spread != null)
                    hashCode = hashCode * 59 + this.Spread.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.EnrichedDescription != null)
                    hashCode = hashCode * 59 + this.EnrichedDescription.GetHashCode();
                if (this.CouponRate != null)
                    hashCode = hashCode * 59 + this.CouponRate.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.AccruedIncome != null)
                    hashCode = hashCode * 59 + this.AccruedIncome.GetHashCode();
                if (this.SecurityType != null)
                    hashCode = hashCode * 59 + this.SecurityType.GetHashCode();
                if (this.ProviderAccountId != null)
                    hashCode = hashCode * 59 + this.ProviderAccountId.GetHashCode();
                if (this.UnvestedQuantity != null)
                    hashCode = hashCode * 59 + this.UnvestedQuantity.GetHashCode();
                if (this.CostBasis != null)
                    hashCode = hashCode * 59 + this.CostBasis.GetHashCode();
                if (this.VestingDate != null)
                    hashCode = hashCode * 59 + this.VestingDate.GetHashCode();
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                if (this.StrikePrice != null)
                    hashCode = hashCode * 59 + this.StrikePrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
