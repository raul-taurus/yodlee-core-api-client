/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Attribute
    /// </summary>
    [DataContract]
        public partial class Attribute :  IEquatable<Attribute>, IValidatableObject
    {
        /// <summary>
        /// Defines Container
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ContainerEnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,
            /// <summary>
            /// Enum CreditCard for value: creditCard
            /// </summary>
            [EnumMember(Value = "creditCard")]
            CreditCard = 2,
            /// <summary>
            /// Enum Investment for value: investment
            /// </summary>
            [EnumMember(Value = "investment")]
            Investment = 3,
            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 4,
            /// <summary>
            /// Enum Loan for value: loan
            /// </summary>
            [EnumMember(Value = "loan")]
            Loan = 5,
            /// <summary>
            /// Enum Reward for value: reward
            /// </summary>
            [EnumMember(Value = "reward")]
            Reward = 6,
            /// <summary>
            /// Enum Bill for value: bill
            /// </summary>
            [EnumMember(Value = "bill")]
            Bill = 7,
            /// <summary>
            /// Enum RealEstate for value: realEstate
            /// </summary>
            [EnumMember(Value = "realEstate")]
            RealEstate = 8,
            /// <summary>
            /// Enum OtherAssets for value: otherAssets
            /// </summary>
            [EnumMember(Value = "otherAssets")]
            OtherAssets = 9,
            /// <summary>
            /// Enum OtherLiabilities for value: otherLiabilities
            /// </summary>
            [EnumMember(Value = "otherLiabilities")]
            OtherLiabilities = 10        }
        /// <summary>
        /// Containers for which the attributes are supported.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Containers for which the attributes are supported.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public List<ContainerEnum> Container { get; set; }
        /// <summary>
        /// Attributes that are supported for a dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Attributes that are supported for a dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum NameEnum
        {
            /// <summary>
            /// Enum BASICACCOUNTINFO for value: BASIC_ACCOUNT_INFO
            /// </summary>
            [EnumMember(Value = "BASIC_ACCOUNT_INFO")]
            BASICACCOUNTINFO = 1,
            /// <summary>
            /// Enum TRANSACTIONS for value: TRANSACTIONS
            /// </summary>
            [EnumMember(Value = "TRANSACTIONS")]
            TRANSACTIONS = 2,
            /// <summary>
            /// Enum STATEMENTS for value: STATEMENTS
            /// </summary>
            [EnumMember(Value = "STATEMENTS")]
            STATEMENTS = 3,
            /// <summary>
            /// Enum HOLDINGS for value: HOLDINGS
            /// </summary>
            [EnumMember(Value = "HOLDINGS")]
            HOLDINGS = 4,
            /// <summary>
            /// Enum ACCOUNTDETAILS for value: ACCOUNT_DETAILS
            /// </summary>
            [EnumMember(Value = "ACCOUNT_DETAILS")]
            ACCOUNTDETAILS = 5,
            /// <summary>
            /// Enum TAX for value: TAX
            /// </summary>
            [EnumMember(Value = "TAX")]
            TAX = 6,
            /// <summary>
            /// Enum EBILLS for value: EBILLS
            /// </summary>
            [EnumMember(Value = "EBILLS")]
            EBILLS = 7,
            /// <summary>
            /// Enum FULLACCTNUMBER for value: FULL_ACCT_NUMBER
            /// </summary>
            [EnumMember(Value = "FULL_ACCT_NUMBER")]
            FULLACCTNUMBER = 8,
            /// <summary>
            /// Enum BANKTRANSFERCODE for value: BANK_TRANSFER_CODE
            /// </summary>
            [EnumMember(Value = "BANK_TRANSFER_CODE")]
            BANKTRANSFERCODE = 9,
            /// <summary>
            /// Enum HOLDERNAME for value: HOLDER_NAME
            /// </summary>
            [EnumMember(Value = "HOLDER_NAME")]
            HOLDERNAME = 10,
            /// <summary>
            /// Enum HOLDERDETAILS for value: HOLDER_DETAILS
            /// </summary>
            [EnumMember(Value = "HOLDER_DETAILS")]
            HOLDERDETAILS = 11,
            /// <summary>
            /// Enum PAYMENTPROFILE for value: PAYMENT_PROFILE
            /// </summary>
            [EnumMember(Value = "PAYMENT_PROFILE")]
            PAYMENTPROFILE = 12,
            /// <summary>
            /// Enum PAYMENTDETAILS for value: PAYMENT_DETAILS
            /// </summary>
            [EnumMember(Value = "PAYMENT_DETAILS")]
            PAYMENTDETAILS = 13,
            /// <summary>
            /// Enum INTERESTDETAILS for value: INTEREST_DETAILS
            /// </summary>
            [EnumMember(Value = "INTEREST_DETAILS")]
            INTERESTDETAILS = 14,
            /// <summary>
            /// Enum COVERAGE for value: COVERAGE
            /// </summary>
            [EnumMember(Value = "COVERAGE")]
            COVERAGE = 15        }
        /// <summary>
        /// Attributes that are supported for a dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Attributes that are supported for a dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Attribute" /> class.
        /// </summary>
        /// <param name="container">Containers for which the attributes are supported.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;.</param>
        /// <param name="containerAttributes">containerAttributes.</param>
        /// <param name="name">Attributes that are supported for a dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;.</param>
        public Attribute(List<ContainerEnum> container = default(List<ContainerEnum>), ContainerAttributes containerAttributes = default(ContainerAttributes), NameEnum? name = default(NameEnum?))
        {
            this.Container = container;
            this.ContainerAttributes = containerAttributes;
            this.Name = name;
        }
        

        /// <summary>
        /// Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="fromDate", EmitDefaultValue=false)]
        public string FromDate { get; private set; }

        /// <summary>
        /// Applicable only to TAX attribute of DOCUMENT dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Applicable only to TAX attribute of DOCUMENT dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="toFinYear", EmitDefaultValue=false)]
        public string ToFinYear { get; private set; }

        /// <summary>
        /// Applicable only to TAX attribute of DOCUMENT dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Applicable only to TAX attribute of DOCUMENT dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="fromFinYear", EmitDefaultValue=false)]
        public string FromFinYear { get; private set; }

        /// <summary>
        /// Gets or Sets ContainerAttributes
        /// </summary>
        [DataMember(Name="containerAttributes", EmitDefaultValue=false)]
        public ContainerAttributes ContainerAttributes { get; set; }

        /// <summary>
        /// Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="toDate", EmitDefaultValue=false)]
        public string ToDate { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attribute {\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToFinYear: ").Append(ToFinYear).Append("\n");
            sb.Append("  FromFinYear: ").Append(FromFinYear).Append("\n");
            sb.Append("  ContainerAttributes: ").Append(ContainerAttributes).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Attribute);
        }

        /// <summary>
        /// Returns true if Attribute instances are equal
        /// </summary>
        /// <param name="input">Instance of Attribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Container == input.Container ||
                    this.Container != null &&
                    input.Container != null &&
                    this.Container.SequenceEqual(input.Container)
                ) && 
                (
                    this.FromDate == input.FromDate ||
                    (this.FromDate != null &&
                    this.FromDate.Equals(input.FromDate))
                ) && 
                (
                    this.ToFinYear == input.ToFinYear ||
                    (this.ToFinYear != null &&
                    this.ToFinYear.Equals(input.ToFinYear))
                ) && 
                (
                    this.FromFinYear == input.FromFinYear ||
                    (this.FromFinYear != null &&
                    this.FromFinYear.Equals(input.FromFinYear))
                ) && 
                (
                    this.ContainerAttributes == input.ContainerAttributes ||
                    (this.ContainerAttributes != null &&
                    this.ContainerAttributes.Equals(input.ContainerAttributes))
                ) && 
                (
                    this.ToDate == input.ToDate ||
                    (this.ToDate != null &&
                    this.ToDate.Equals(input.ToDate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.FromDate != null)
                    hashCode = hashCode * 59 + this.FromDate.GetHashCode();
                if (this.ToFinYear != null)
                    hashCode = hashCode * 59 + this.ToFinYear.GetHashCode();
                if (this.FromFinYear != null)
                    hashCode = hashCode * 59 + this.FromFinYear.GetHashCode();
                if (this.ContainerAttributes != null)
                    hashCode = hashCode * 59 + this.ContainerAttributes.GetHashCode();
                if (this.ToDate != null)
                    hashCode = hashCode * 59 + this.ToDate.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
