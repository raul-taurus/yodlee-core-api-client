/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// EvaluateAccountAddress
    /// </summary>
    [DataContract]
        public partial class EvaluateAccountAddress :  IEquatable<EvaluateAccountAddress>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum HOME for value: HOME
            /// </summary>
            [EnumMember(Value = "HOME")]
            HOME = 1,
            /// <summary>
            /// Enum BUSINESS for value: BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESS = 2,
            /// <summary>
            /// Enum POBOX for value: POBOX
            /// </summary>
            [EnumMember(Value = "POBOX")]
            POBOX = 3,
            /// <summary>
            /// Enum RETAIL for value: RETAIL
            /// </summary>
            [EnumMember(Value = "RETAIL")]
            RETAIL = 4,
            /// <summary>
            /// Enum OFFICE for value: OFFICE
            /// </summary>
            [EnumMember(Value = "OFFICE")]
            OFFICE = 5,
            /// <summary>
            /// Enum SMALLBUSINESS for value: SMALL_BUSINESS
            /// </summary>
            [EnumMember(Value = "SMALL_BUSINESS")]
            SMALLBUSINESS = 6,
            /// <summary>
            /// Enum COMMUNICATION for value: COMMUNICATION
            /// </summary>
            [EnumMember(Value = "COMMUNICATION")]
            COMMUNICATION = 7,
            /// <summary>
            /// Enum PERMANENT for value: PERMANENT
            /// </summary>
            [EnumMember(Value = "PERMANENT")]
            PERMANENT = 8,
            /// <summary>
            /// Enum STATEMENTADDRESS for value: STATEMENT_ADDRESS
            /// </summary>
            [EnumMember(Value = "STATEMENT_ADDRESS")]
            STATEMENTADDRESS = 9,
            /// <summary>
            /// Enum PAYMENT for value: PAYMENT
            /// </summary>
            [EnumMember(Value = "PAYMENT")]
            PAYMENT = 10,
            /// <summary>
            /// Enum PAYOFF for value: PAYOFF
            /// </summary>
            [EnumMember(Value = "PAYOFF")]
            PAYOFF = 11,
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 12        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluateAccountAddress" /> class.
        /// </summary>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="street">street (required).</param>
        /// <param name="type">type.</param>
        public EvaluateAccountAddress(string sourceType = default(string), string street = default(string), TypeEnum? type = default(TypeEnum?))
        {
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new InvalidDataException("street is a required property for EvaluateAccountAddress and cannot be null");
            }
            else
            {
                this.Street = street;
            }
            this.SourceType = sourceType;
            this.Type = type;
        }
        
        /// <summary>
        /// Zip.
        /// </summary>
        /// <value>Zip.</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; private set; }

        /// <summary>
        /// Country.
        /// </summary>
        /// <value>Country.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; private set; }

        /// <summary>
        /// Address Line 3.
        /// </summary>
        /// <value>Address Line 3.</value>
        [DataMember(Name="address3", EmitDefaultValue=false)]
        public string Address3 { get; private set; }

        /// <summary>
        /// Address Line 2.
        /// </summary>
        /// <value>Address Line 2.</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; private set; }

        /// <summary>
        /// City.
        /// </summary>
        /// <value>City.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; private set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public string SourceType { get; set; }

        /// <summary>
        /// Address Line 1.
        /// </summary>
        /// <value>Address Line 1.</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; private set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// State.
        /// </summary>
        /// <value>State.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluateAccountAddress {\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Address3: ").Append(Address3).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvaluateAccountAddress);
        }

        /// <summary>
        /// Returns true if EvaluateAccountAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of EvaluateAccountAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluateAccountAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Address3 == input.Address3 ||
                    (this.Address3 != null &&
                    this.Address3.Equals(input.Address3))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Address3 != null)
                    hashCode = hashCode * 59 + this.Address3.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
