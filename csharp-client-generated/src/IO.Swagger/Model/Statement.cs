/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Statement
    /// </summary>
    [DataContract]
        public partial class Statement :  IEquatable<Statement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Statement" /> class.
        /// </summary>
        /// <param name="interestAmount">interestAmount.</param>
        /// <param name="cashAdvance">cashAdvance.</param>
        /// <param name="principalAmount">principalAmount.</param>
        /// <param name="loanBalance">loanBalance.</param>
        /// <param name="amountDue">amountDue.</param>
        /// <param name="minimumPayment">minimumPayment.</param>
        /// <param name="lastPaymentAmount">lastPaymentAmount.</param>
        /// <param name="newCharges">newCharges.</param>
        public Statement(Money interestAmount = default(Money), Money cashAdvance = default(Money), Money principalAmount = default(Money), Money loanBalance = default(Money), Money amountDue = default(Money), Money minimumPayment = default(Money), Money lastPaymentAmount = default(Money), Money newCharges = default(Money))
        {
            this.InterestAmount = interestAmount;
            this.CashAdvance = cashAdvance;
            this.PrincipalAmount = principalAmount;
            this.LoanBalance = loanBalance;
            this.AmountDue = amountDue;
            this.MinimumPayment = minimumPayment;
            this.LastPaymentAmount = lastPaymentAmount;
            this.NewCharges = newCharges;
        }
        
        /// <summary>
        /// The APR applied to the balance on the credit card account, as available in the statement.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The APR applied to the balance on the credit card account, as available in the statement.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="apr", EmitDefaultValue=false)]
        public double? Apr { get; private set; }

        /// <summary>
        /// The APR applicable to cash withdrawals on the credit card account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The APR applicable to cash withdrawals on the credit card account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="cashApr", EmitDefaultValue=false)]
        public double? CashApr { get; private set; }

        /// <summary>
        /// The start date of the statement period.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The start date of the statement period.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="billingPeriodStart", EmitDefaultValue=false)]
        public string BillingPeriodStart { get; private set; }

        /// <summary>
        /// The date by when the minimum payment is due to be paid.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The due date that appears in the statement may differ from the due date at the account-level.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The date by when the minimum payment is due to be paid.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The due date that appears in the statement may differ from the due date at the account-level.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public string DueDate { get; private set; }

        /// <summary>
        /// Gets or Sets InterestAmount
        /// </summary>
        [DataMember(Name="interestAmount", EmitDefaultValue=false)]
        public Money InterestAmount { get; set; }

        /// <summary>
        /// The date on which the statement is generated.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The date on which the statement is generated.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="statementDate", EmitDefaultValue=false)]
        public string StatementDate { get; private set; }

        /// <summary>
        /// Gets or Sets CashAdvance
        /// </summary>
        [DataMember(Name="cashAdvance", EmitDefaultValue=false)]
        public Money CashAdvance { get; set; }

        /// <summary>
        /// The end date of the statement period.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The end date of the statement period.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="billingPeriodEnd", EmitDefaultValue=false)]
        public string BillingPeriodEnd { get; private set; }

        /// <summary>
        /// Gets or Sets PrincipalAmount
        /// </summary>
        [DataMember(Name="principalAmount", EmitDefaultValue=false)]
        public Money PrincipalAmount { get; set; }

        /// <summary>
        /// Gets or Sets LoanBalance
        /// </summary>
        [DataMember(Name="loanBalance", EmitDefaultValue=false)]
        public Money LoanBalance { get; set; }

        /// <summary>
        /// Gets or Sets AmountDue
        /// </summary>
        [DataMember(Name="amountDue", EmitDefaultValue=false)]
        public Money AmountDue { get; set; }

        /// <summary>
        /// Account to which the statement belongs to.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>Account to which the statement belongs to.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; private set; }

        /// <summary>
        /// The date when the account was last updated by Yodlee.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The date when the account was last updated by Yodlee.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; private set; }

        /// <summary>
        /// The field is set to true if the statement is the latest generated statement.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The field is set to true if the statement is the latest generated statement.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="isLatest", EmitDefaultValue=false)]
        public bool? IsLatest { get; private set; }

        /// <summary>
        /// Gets or Sets MinimumPayment
        /// </summary>
        [DataMember(Name="minimumPayment", EmitDefaultValue=false)]
        public Money MinimumPayment { get; set; }

        /// <summary>
        /// The date on which the last payment was done during the billing cycle.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>The date on which the last payment was done during the billing cycle.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="lastPaymentDate", EmitDefaultValue=false)]
        public string LastPaymentDate { get; private set; }

        /// <summary>
        /// Gets or Sets LastPaymentAmount
        /// </summary>
        [DataMember(Name="lastPaymentAmount", EmitDefaultValue=false)]
        public Money LastPaymentAmount { get; set; }

        /// <summary>
        /// Unique identifier for the statement.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;
        /// </summary>
        /// <value>Unique identifier for the statement.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, loan, insurance&lt;br&gt;</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// Gets or Sets NewCharges
        /// </summary>
        [DataMember(Name="newCharges", EmitDefaultValue=false)]
        public Money NewCharges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statement {\n");
            sb.Append("  Apr: ").Append(Apr).Append("\n");
            sb.Append("  CashApr: ").Append(CashApr).Append("\n");
            sb.Append("  BillingPeriodStart: ").Append(BillingPeriodStart).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  InterestAmount: ").Append(InterestAmount).Append("\n");
            sb.Append("  StatementDate: ").Append(StatementDate).Append("\n");
            sb.Append("  CashAdvance: ").Append(CashAdvance).Append("\n");
            sb.Append("  BillingPeriodEnd: ").Append(BillingPeriodEnd).Append("\n");
            sb.Append("  PrincipalAmount: ").Append(PrincipalAmount).Append("\n");
            sb.Append("  LoanBalance: ").Append(LoanBalance).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  IsLatest: ").Append(IsLatest).Append("\n");
            sb.Append("  MinimumPayment: ").Append(MinimumPayment).Append("\n");
            sb.Append("  LastPaymentDate: ").Append(LastPaymentDate).Append("\n");
            sb.Append("  LastPaymentAmount: ").Append(LastPaymentAmount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NewCharges: ").Append(NewCharges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Statement);
        }

        /// <summary>
        /// Returns true if Statement instances are equal
        /// </summary>
        /// <param name="input">Instance of Statement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Apr == input.Apr ||
                    (this.Apr != null &&
                    this.Apr.Equals(input.Apr))
                ) && 
                (
                    this.CashApr == input.CashApr ||
                    (this.CashApr != null &&
                    this.CashApr.Equals(input.CashApr))
                ) && 
                (
                    this.BillingPeriodStart == input.BillingPeriodStart ||
                    (this.BillingPeriodStart != null &&
                    this.BillingPeriodStart.Equals(input.BillingPeriodStart))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.InterestAmount == input.InterestAmount ||
                    (this.InterestAmount != null &&
                    this.InterestAmount.Equals(input.InterestAmount))
                ) && 
                (
                    this.StatementDate == input.StatementDate ||
                    (this.StatementDate != null &&
                    this.StatementDate.Equals(input.StatementDate))
                ) && 
                (
                    this.CashAdvance == input.CashAdvance ||
                    (this.CashAdvance != null &&
                    this.CashAdvance.Equals(input.CashAdvance))
                ) && 
                (
                    this.BillingPeriodEnd == input.BillingPeriodEnd ||
                    (this.BillingPeriodEnd != null &&
                    this.BillingPeriodEnd.Equals(input.BillingPeriodEnd))
                ) && 
                (
                    this.PrincipalAmount == input.PrincipalAmount ||
                    (this.PrincipalAmount != null &&
                    this.PrincipalAmount.Equals(input.PrincipalAmount))
                ) && 
                (
                    this.LoanBalance == input.LoanBalance ||
                    (this.LoanBalance != null &&
                    this.LoanBalance.Equals(input.LoanBalance))
                ) && 
                (
                    this.AmountDue == input.AmountDue ||
                    (this.AmountDue != null &&
                    this.AmountDue.Equals(input.AmountDue))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.IsLatest == input.IsLatest ||
                    (this.IsLatest != null &&
                    this.IsLatest.Equals(input.IsLatest))
                ) && 
                (
                    this.MinimumPayment == input.MinimumPayment ||
                    (this.MinimumPayment != null &&
                    this.MinimumPayment.Equals(input.MinimumPayment))
                ) && 
                (
                    this.LastPaymentDate == input.LastPaymentDate ||
                    (this.LastPaymentDate != null &&
                    this.LastPaymentDate.Equals(input.LastPaymentDate))
                ) && 
                (
                    this.LastPaymentAmount == input.LastPaymentAmount ||
                    (this.LastPaymentAmount != null &&
                    this.LastPaymentAmount.Equals(input.LastPaymentAmount))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NewCharges == input.NewCharges ||
                    (this.NewCharges != null &&
                    this.NewCharges.Equals(input.NewCharges))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Apr != null)
                    hashCode = hashCode * 59 + this.Apr.GetHashCode();
                if (this.CashApr != null)
                    hashCode = hashCode * 59 + this.CashApr.GetHashCode();
                if (this.BillingPeriodStart != null)
                    hashCode = hashCode * 59 + this.BillingPeriodStart.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.InterestAmount != null)
                    hashCode = hashCode * 59 + this.InterestAmount.GetHashCode();
                if (this.StatementDate != null)
                    hashCode = hashCode * 59 + this.StatementDate.GetHashCode();
                if (this.CashAdvance != null)
                    hashCode = hashCode * 59 + this.CashAdvance.GetHashCode();
                if (this.BillingPeriodEnd != null)
                    hashCode = hashCode * 59 + this.BillingPeriodEnd.GetHashCode();
                if (this.PrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PrincipalAmount.GetHashCode();
                if (this.LoanBalance != null)
                    hashCode = hashCode * 59 + this.LoanBalance.GetHashCode();
                if (this.AmountDue != null)
                    hashCode = hashCode * 59 + this.AmountDue.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.IsLatest != null)
                    hashCode = hashCode * 59 + this.IsLatest.GetHashCode();
                if (this.MinimumPayment != null)
                    hashCode = hashCode * 59 + this.MinimumPayment.GetHashCode();
                if (this.LastPaymentDate != null)
                    hashCode = hashCode * 59 + this.LastPaymentDate.GetHashCode();
                if (this.LastPaymentAmount != null)
                    hashCode = hashCode * 59 + this.LastPaymentAmount.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NewCharges != null)
                    hashCode = hashCode * 59 + this.NewCharges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
