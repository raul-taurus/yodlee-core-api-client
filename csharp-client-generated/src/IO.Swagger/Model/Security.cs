/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Security
    /// </summary>
    [DataContract]
        public partial class Security :  IEquatable<Security>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Security" /> class.
        /// </summary>
        public Security()
        {
        }
        
        /// <summary>
        /// Securities exchange provide the securities information at the corresponding exchanges. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Securities exchange provide the securities information at the corresponding exchanges. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="stockExchangeDetails", EmitDefaultValue=false)]
        public List<StockExchangeDetail> StockExchangeDetails { get; private set; }

        /// <summary>
        /// Price units corresponding to the security style. This is used to derive actual price of the security from market value.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Price units corresponding to the security style. This is used to derive actual price of the security from market value.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="issueTypeMultiplier", EmitDefaultValue=false)]
        public double? IssueTypeMultiplier { get; private set; }

        /// <summary>
        /// The state in which the security is taxed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The state in which the security is taxed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="stateTaxable", EmitDefaultValue=false)]
        public bool? StateTaxable { get; private set; }

        /// <summary>
        /// Next call date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Next call date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="callDate", EmitDefaultValue=false)]
        public string CallDate { get; private set; }

        /// <summary>
        /// cdsc fund flag of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>cdsc fund flag of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="cdscFundFlag", EmitDefaultValue=false)]
        public bool? CdscFundFlag { get; private set; }

        /// <summary>
        /// A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="cusip", EmitDefaultValue=false)]
        public string Cusip { get; private set; }

        /// <summary>
        /// Flag indicating federal taxable.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Flag indicating federal taxable.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="federalTaxable", EmitDefaultValue=false)]
        public bool? FederalTaxable { get; private set; }

        /// <summary>
        /// Unique identifier for S&amp;P rating on Envestnet platform.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Unique identifier for S&amp;P rating on Envestnet platform.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="sAndPRating", EmitDefaultValue=false)]
        public string SAndPRating { get; private set; }

        /// <summary>
        /// Share class of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Share class of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="shareClass", EmitDefaultValue=false)]
        public string ShareClass { get; private set; }

        /// <summary>
        /// Flag indicating a dummy security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Flag indicating a dummy security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="isEnvestnetDummySecurity", EmitDefaultValue=false)]
        public bool? IsEnvestnetDummySecurity { get; private set; }

        /// <summary>
        /// The description (name) of the security. For example, Cisco Systems.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The description (name) of the security. For example, Cisco Systems.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; private set; }

        /// <summary>
        /// Minimum purchase of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Minimum purchase of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="minimumPurchase", EmitDefaultValue=false)]
        public int? MinimumPurchase { get; private set; }

        /// <summary>
        /// Indicates the type of security like stocks, mutual fund, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Indicates the type of security like stocks, mutual fund, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// First coupon date of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>First coupon date of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="firstCouponDate", EmitDefaultValue=false)]
        public string FirstCouponDate { get; private set; }

        /// <summary>
        /// Coupon Frequency.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Coupon Frequency.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int? Frequency { get; private set; }

        /// <summary>
        /// The method in which interest is accrued or earned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The method in which interest is accrued or earned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="accrualMethod", EmitDefaultValue=false)]
        public string AccrualMethod { get; private set; }

        /// <summary>
        /// ISO 4217 currency code indicating income currency of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>ISO 4217 currency code indicating income currency of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="incomeCurrency", EmitDefaultValue=false)]
        public string IncomeCurrency { get; private set; }

        /// <summary>
        /// Maturity date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Maturity date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        public string MaturityDate { get; private set; }

        /// <summary>
        /// Next call price of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Next call price of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="callPrice", EmitDefaultValue=false)]
        public double? CallPrice { get; private set; }

        /// <summary>
        /// The unique identifier of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The unique identifier of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// Issue date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Issue date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="issueDate", EmitDefaultValue=false)]
        public string IssueDate { get; private set; }

        /// <summary>
        /// Identifier of the sector to which the security belongs to.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Identifier of the sector to which the security belongs to.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="sector", EmitDefaultValue=false)]
        public string Sector { get; private set; }

        /// <summary>
        /// Agency factor of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Agency factor of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="agencyFactor", EmitDefaultValue=false)]
        public double? AgencyFactor { get; private set; }

        /// <summary>
        /// The rate of interest paid annually, expressed as a percentage of the bond&#x27;s par or face value.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The rate of interest paid annually, expressed as a percentage of the bond&#x27;s par or face value.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="interestRate", EmitDefaultValue=false)]
        public double? InterestRate { get; private set; }

        /// <summary>
        /// The last updated date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The last updated date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="lastModifiedDate", EmitDefaultValue=false)]
        public string LastModifiedDate { get; private set; }

        /// <summary>
        /// GICS Sector is a categorization the S&amp;P assigns to all publically traded companies. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>GICS Sector is a categorization the S&amp;P assigns to all publically traded companies. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="gicsSector", EmitDefaultValue=false)]
        public string GicsSector { get; private set; }

        /// <summary>
        /// &lt;b&gt;true&lt;/b&gt;:Closed for all investors , &lt;b&gt;false&lt;/b&gt;: Open to all investors.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>&lt;b&gt;true&lt;/b&gt;:Closed for all investors , &lt;b&gt;false&lt;/b&gt;: Open to all investors.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="closedFlag", EmitDefaultValue=false)]
        public bool? ClosedFlag { get; private set; }

        /// <summary>
        /// The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The SEDOL field is only applicable to the trade related transactions.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The SEDOL field is only applicable to the trade related transactions.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="sedol", EmitDefaultValue=false)]
        public string Sedol { get; private set; }

        /// <summary>
        /// GICS sector ID to which the security belongs to.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>GICS sector ID to which the security belongs to.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="subSector", EmitDefaultValue=false)]
        public string SubSector { get; private set; }

        /// <summary>
        /// Last coupon date of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Last coupon date of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="lastCouponDate", EmitDefaultValue=false)]
        public string LastCouponDate { get; private set; }

        /// <summary>
        /// Indicates whether the security is a simulated security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Indicates whether the security is a simulated security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="isSyntheticSecurity", EmitDefaultValue=false)]
        public bool? IsSyntheticSecurity { get; private set; }

        /// <summary>
        /// ISO 4217 currency code indicating trading currency of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>ISO 4217 currency code indicating trading currency of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="tradeCurrencyCode", EmitDefaultValue=false)]
        public string TradeCurrencyCode { get; private set; }

        /// <summary>
        /// Indicates whether the security is a dummy security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Indicates whether the security is a dummy security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="isDummySecurity", EmitDefaultValue=false)]
        public bool? IsDummySecurity { get; private set; }

        /// <summary>
        /// Unique identifier for Moody rating on Envestnet platform.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Unique identifier for Moody rating on Envestnet platform.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="moodyRating", EmitDefaultValue=false)]
        public string MoodyRating { get; private set; }

        /// <summary>
        /// Classification of the style for the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Classification of the style for the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public string Style { get; private set; }

        /// <summary>
        /// &lt;b&gt;1&lt;/b&gt;- indicates Eligible,&lt;b&gt;0&lt;/b&gt;- indicates firm is not eligible.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>&lt;b&gt;1&lt;/b&gt;- indicates Eligible,&lt;b&gt;0&lt;/b&gt;- indicates firm is not eligible.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="firmEligible", EmitDefaultValue=false)]
        public string FirmEligible { get; private set; }

        /// <summary>
        /// Mutual Fund Family Name.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>Mutual Fund Family Name.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="fundFamily", EmitDefaultValue=false)]
        public string FundFamily { get; private set; }

        /// <summary>
        /// The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
        /// </summary>
        /// <value>The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;</value>
        [DataMember(Name="isin", EmitDefaultValue=false)]
        public string Isin { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Security {\n");
            sb.Append("  StockExchangeDetails: ").Append(StockExchangeDetails).Append("\n");
            sb.Append("  IssueTypeMultiplier: ").Append(IssueTypeMultiplier).Append("\n");
            sb.Append("  StateTaxable: ").Append(StateTaxable).Append("\n");
            sb.Append("  CallDate: ").Append(CallDate).Append("\n");
            sb.Append("  CdscFundFlag: ").Append(CdscFundFlag).Append("\n");
            sb.Append("  Cusip: ").Append(Cusip).Append("\n");
            sb.Append("  FederalTaxable: ").Append(FederalTaxable).Append("\n");
            sb.Append("  SAndPRating: ").Append(SAndPRating).Append("\n");
            sb.Append("  ShareClass: ").Append(ShareClass).Append("\n");
            sb.Append("  IsEnvestnetDummySecurity: ").Append(IsEnvestnetDummySecurity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MinimumPurchase: ").Append(MinimumPurchase).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FirstCouponDate: ").Append(FirstCouponDate).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  AccrualMethod: ").Append(AccrualMethod).Append("\n");
            sb.Append("  IncomeCurrency: ").Append(IncomeCurrency).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  CallPrice: ").Append(CallPrice).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  AgencyFactor: ").Append(AgencyFactor).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  GicsSector: ").Append(GicsSector).Append("\n");
            sb.Append("  ClosedFlag: ").Append(ClosedFlag).Append("\n");
            sb.Append("  Sedol: ").Append(Sedol).Append("\n");
            sb.Append("  SubSector: ").Append(SubSector).Append("\n");
            sb.Append("  LastCouponDate: ").Append(LastCouponDate).Append("\n");
            sb.Append("  IsSyntheticSecurity: ").Append(IsSyntheticSecurity).Append("\n");
            sb.Append("  TradeCurrencyCode: ").Append(TradeCurrencyCode).Append("\n");
            sb.Append("  IsDummySecurity: ").Append(IsDummySecurity).Append("\n");
            sb.Append("  MoodyRating: ").Append(MoodyRating).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  FirmEligible: ").Append(FirmEligible).Append("\n");
            sb.Append("  FundFamily: ").Append(FundFamily).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Security);
        }

        /// <summary>
        /// Returns true if Security instances are equal
        /// </summary>
        /// <param name="input">Instance of Security to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Security input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StockExchangeDetails == input.StockExchangeDetails ||
                    this.StockExchangeDetails != null &&
                    input.StockExchangeDetails != null &&
                    this.StockExchangeDetails.SequenceEqual(input.StockExchangeDetails)
                ) && 
                (
                    this.IssueTypeMultiplier == input.IssueTypeMultiplier ||
                    (this.IssueTypeMultiplier != null &&
                    this.IssueTypeMultiplier.Equals(input.IssueTypeMultiplier))
                ) && 
                (
                    this.StateTaxable == input.StateTaxable ||
                    (this.StateTaxable != null &&
                    this.StateTaxable.Equals(input.StateTaxable))
                ) && 
                (
                    this.CallDate == input.CallDate ||
                    (this.CallDate != null &&
                    this.CallDate.Equals(input.CallDate))
                ) && 
                (
                    this.CdscFundFlag == input.CdscFundFlag ||
                    (this.CdscFundFlag != null &&
                    this.CdscFundFlag.Equals(input.CdscFundFlag))
                ) && 
                (
                    this.Cusip == input.Cusip ||
                    (this.Cusip != null &&
                    this.Cusip.Equals(input.Cusip))
                ) && 
                (
                    this.FederalTaxable == input.FederalTaxable ||
                    (this.FederalTaxable != null &&
                    this.FederalTaxable.Equals(input.FederalTaxable))
                ) && 
                (
                    this.SAndPRating == input.SAndPRating ||
                    (this.SAndPRating != null &&
                    this.SAndPRating.Equals(input.SAndPRating))
                ) && 
                (
                    this.ShareClass == input.ShareClass ||
                    (this.ShareClass != null &&
                    this.ShareClass.Equals(input.ShareClass))
                ) && 
                (
                    this.IsEnvestnetDummySecurity == input.IsEnvestnetDummySecurity ||
                    (this.IsEnvestnetDummySecurity != null &&
                    this.IsEnvestnetDummySecurity.Equals(input.IsEnvestnetDummySecurity))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MinimumPurchase == input.MinimumPurchase ||
                    (this.MinimumPurchase != null &&
                    this.MinimumPurchase.Equals(input.MinimumPurchase))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FirstCouponDate == input.FirstCouponDate ||
                    (this.FirstCouponDate != null &&
                    this.FirstCouponDate.Equals(input.FirstCouponDate))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.AccrualMethod == input.AccrualMethod ||
                    (this.AccrualMethod != null &&
                    this.AccrualMethod.Equals(input.AccrualMethod))
                ) && 
                (
                    this.IncomeCurrency == input.IncomeCurrency ||
                    (this.IncomeCurrency != null &&
                    this.IncomeCurrency.Equals(input.IncomeCurrency))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.CallPrice == input.CallPrice ||
                    (this.CallPrice != null &&
                    this.CallPrice.Equals(input.CallPrice))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.AgencyFactor == input.AgencyFactor ||
                    (this.AgencyFactor != null &&
                    this.AgencyFactor.Equals(input.AgencyFactor))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                ) && 
                (
                    this.GicsSector == input.GicsSector ||
                    (this.GicsSector != null &&
                    this.GicsSector.Equals(input.GicsSector))
                ) && 
                (
                    this.ClosedFlag == input.ClosedFlag ||
                    (this.ClosedFlag != null &&
                    this.ClosedFlag.Equals(input.ClosedFlag))
                ) && 
                (
                    this.Sedol == input.Sedol ||
                    (this.Sedol != null &&
                    this.Sedol.Equals(input.Sedol))
                ) && 
                (
                    this.SubSector == input.SubSector ||
                    (this.SubSector != null &&
                    this.SubSector.Equals(input.SubSector))
                ) && 
                (
                    this.LastCouponDate == input.LastCouponDate ||
                    (this.LastCouponDate != null &&
                    this.LastCouponDate.Equals(input.LastCouponDate))
                ) && 
                (
                    this.IsSyntheticSecurity == input.IsSyntheticSecurity ||
                    (this.IsSyntheticSecurity != null &&
                    this.IsSyntheticSecurity.Equals(input.IsSyntheticSecurity))
                ) && 
                (
                    this.TradeCurrencyCode == input.TradeCurrencyCode ||
                    (this.TradeCurrencyCode != null &&
                    this.TradeCurrencyCode.Equals(input.TradeCurrencyCode))
                ) && 
                (
                    this.IsDummySecurity == input.IsDummySecurity ||
                    (this.IsDummySecurity != null &&
                    this.IsDummySecurity.Equals(input.IsDummySecurity))
                ) && 
                (
                    this.MoodyRating == input.MoodyRating ||
                    (this.MoodyRating != null &&
                    this.MoodyRating.Equals(input.MoodyRating))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.FirmEligible == input.FirmEligible ||
                    (this.FirmEligible != null &&
                    this.FirmEligible.Equals(input.FirmEligible))
                ) && 
                (
                    this.FundFamily == input.FundFamily ||
                    (this.FundFamily != null &&
                    this.FundFamily.Equals(input.FundFamily))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StockExchangeDetails != null)
                    hashCode = hashCode * 59 + this.StockExchangeDetails.GetHashCode();
                if (this.IssueTypeMultiplier != null)
                    hashCode = hashCode * 59 + this.IssueTypeMultiplier.GetHashCode();
                if (this.StateTaxable != null)
                    hashCode = hashCode * 59 + this.StateTaxable.GetHashCode();
                if (this.CallDate != null)
                    hashCode = hashCode * 59 + this.CallDate.GetHashCode();
                if (this.CdscFundFlag != null)
                    hashCode = hashCode * 59 + this.CdscFundFlag.GetHashCode();
                if (this.Cusip != null)
                    hashCode = hashCode * 59 + this.Cusip.GetHashCode();
                if (this.FederalTaxable != null)
                    hashCode = hashCode * 59 + this.FederalTaxable.GetHashCode();
                if (this.SAndPRating != null)
                    hashCode = hashCode * 59 + this.SAndPRating.GetHashCode();
                if (this.ShareClass != null)
                    hashCode = hashCode * 59 + this.ShareClass.GetHashCode();
                if (this.IsEnvestnetDummySecurity != null)
                    hashCode = hashCode * 59 + this.IsEnvestnetDummySecurity.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.MinimumPurchase != null)
                    hashCode = hashCode * 59 + this.MinimumPurchase.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FirstCouponDate != null)
                    hashCode = hashCode * 59 + this.FirstCouponDate.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.AccrualMethod != null)
                    hashCode = hashCode * 59 + this.AccrualMethod.GetHashCode();
                if (this.IncomeCurrency != null)
                    hashCode = hashCode * 59 + this.IncomeCurrency.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.CallPrice != null)
                    hashCode = hashCode * 59 + this.CallPrice.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IssueDate != null)
                    hashCode = hashCode * 59 + this.IssueDate.GetHashCode();
                if (this.Sector != null)
                    hashCode = hashCode * 59 + this.Sector.GetHashCode();
                if (this.AgencyFactor != null)
                    hashCode = hashCode * 59 + this.AgencyFactor.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.LastModifiedDate != null)
                    hashCode = hashCode * 59 + this.LastModifiedDate.GetHashCode();
                if (this.GicsSector != null)
                    hashCode = hashCode * 59 + this.GicsSector.GetHashCode();
                if (this.ClosedFlag != null)
                    hashCode = hashCode * 59 + this.ClosedFlag.GetHashCode();
                if (this.Sedol != null)
                    hashCode = hashCode * 59 + this.Sedol.GetHashCode();
                if (this.SubSector != null)
                    hashCode = hashCode * 59 + this.SubSector.GetHashCode();
                if (this.LastCouponDate != null)
                    hashCode = hashCode * 59 + this.LastCouponDate.GetHashCode();
                if (this.IsSyntheticSecurity != null)
                    hashCode = hashCode * 59 + this.IsSyntheticSecurity.GetHashCode();
                if (this.TradeCurrencyCode != null)
                    hashCode = hashCode * 59 + this.TradeCurrencyCode.GetHashCode();
                if (this.IsDummySecurity != null)
                    hashCode = hashCode * 59 + this.IsDummySecurity.GetHashCode();
                if (this.MoodyRating != null)
                    hashCode = hashCode * 59 + this.MoodyRating.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.FirmEligible != null)
                    hashCode = hashCode * 59 + this.FirmEligible.GetHashCode();
                if (this.FundFamily != null)
                    hashCode = hashCode * 59 + this.FundFamily.GetHashCode();
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
