/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CoverageAmount
    /// </summary>
    [DataContract]
        public partial class CoverageAmount :  IEquatable<CoverageAmount>, IValidatableObject
    {
        /// <summary>
        /// The type of coverage unit indicates if the coverage is for an individual or a family.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of coverage unit indicates if the coverage is for an individual or a family.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitTypeEnum
        {
            /// <summary>
            /// Enum FAMILY for value: PER_FAMILY
            /// </summary>
            [EnumMember(Value = "PER_FAMILY")]
            FAMILY = 1,
            /// <summary>
            /// Enum MEMBER for value: PER_MEMBER
            /// </summary>
            [EnumMember(Value = "PER_MEMBER")]
            MEMBER = 2        }
        /// <summary>
        /// The type of coverage unit indicates if the coverage is for an individual or a family.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of coverage unit indicates if the coverage is for an individual or a family.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="unitType", EmitDefaultValue=false)]
        public UnitTypeEnum? UnitType { get; set; }
        /// <summary>
        /// The type of coverage provided to an individual or an entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of coverage provided to an individual or an entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum DEDUCTIBLE for value: DEDUCTIBLE
            /// </summary>
            [EnumMember(Value = "DEDUCTIBLE")]
            DEDUCTIBLE = 1,
            /// <summary>
            /// Enum OUTOFPOCKET for value: OUT_OF_POCKET
            /// </summary>
            [EnumMember(Value = "OUT_OF_POCKET")]
            OUTOFPOCKET = 2,
            /// <summary>
            /// Enum ANNUALBENEFIT for value: ANNUAL_BENEFIT
            /// </summary>
            [EnumMember(Value = "ANNUAL_BENEFIT")]
            ANNUALBENEFIT = 3,
            /// <summary>
            /// Enum MAXBENEFIT for value: MAX_BENEFIT
            /// </summary>
            [EnumMember(Value = "MAX_BENEFIT")]
            MAXBENEFIT = 4,
            /// <summary>
            /// Enum COVERAGEAMOUNT for value: COVERAGE_AMOUNT
            /// </summary>
            [EnumMember(Value = "COVERAGE_AMOUNT")]
            COVERAGEAMOUNT = 5,
            /// <summary>
            /// Enum MONTHLYBENEFIT for value: MONTHLY_BENEFIT
            /// </summary>
            [EnumMember(Value = "MONTHLY_BENEFIT")]
            MONTHLYBENEFIT = 6,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 7        }
        /// <summary>
        /// The type of coverage provided to an individual or an entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of coverage provided to an individual or an entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The type of coverage limit indicates if the coverage is in-network or out-of-network.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of coverage limit indicates if the coverage is in-network or out-of-network.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LimitTypeEnum
        {
            /// <summary>
            /// Enum INNETWORK for value: IN_NETWORK
            /// </summary>
            [EnumMember(Value = "IN_NETWORK")]
            INNETWORK = 1,
            /// <summary>
            /// Enum OUTNETWORK for value: OUT_NETWORK
            /// </summary>
            [EnumMember(Value = "OUT_NETWORK")]
            OUTNETWORK = 2        }
        /// <summary>
        /// The type of coverage limit indicates if the coverage is in-network or out-of-network.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>The type of coverage limit indicates if the coverage is in-network or out-of-network.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: insurance,investment&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values:&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name="limitType", EmitDefaultValue=false)]
        public LimitTypeEnum? LimitType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoverageAmount" /> class.
        /// </summary>
        /// <param name="cover">cover.</param>
        /// <param name="met">met.</param>
        public CoverageAmount(Money cover = default(Money), Money met = default(Money))
        {
            this.Cover = cover;
            this.Met = met;
        }
        
        /// <summary>
        /// Gets or Sets Cover
        /// </summary>
        [DataMember(Name="cover", EmitDefaultValue=false)]
        public Money Cover { get; set; }




        /// <summary>
        /// Gets or Sets Met
        /// </summary>
        [DataMember(Name="met", EmitDefaultValue=false)]
        public Money Met { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoverageAmount {\n");
            sb.Append("  Cover: ").Append(Cover).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LimitType: ").Append(LimitType).Append("\n");
            sb.Append("  Met: ").Append(Met).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CoverageAmount);
        }

        /// <summary>
        /// Returns true if CoverageAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of CoverageAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoverageAmount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cover == input.Cover ||
                    (this.Cover != null &&
                    this.Cover.Equals(input.Cover))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.LimitType == input.LimitType ||
                    (this.LimitType != null &&
                    this.LimitType.Equals(input.LimitType))
                ) && 
                (
                    this.Met == input.Met ||
                    (this.Met != null &&
                    this.Met.Equals(input.Met))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cover != null)
                    hashCode = hashCode * 59 + this.Cover.GetHashCode();
                if (this.UnitType != null)
                    hashCode = hashCode * 59 + this.UnitType.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.LimitType != null)
                    hashCode = hashCode * 59 + this.LimitType.GetHashCode();
                if (this.Met != null)
                    hashCode = hashCode * 59 + this.Met.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
