/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing HoldingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class HoldingsApiTests
    {
        private HoldingsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new HoldingsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of HoldingsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' HoldingsApi
            //Assert.IsInstanceOfType(typeof(HoldingsApi), instance, "instance is a HoldingsApi");
        }

        /// <summary>
        /// Test GetAssetClassificationList
        /// </summary>
        [Test]
        public void GetAssetClassificationListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAssetClassificationList();
            //Assert.IsInstanceOf<HoldingAssetClassificationListResponse> (response, "response is HoldingAssetClassificationListResponse");
        }
        /// <summary>
        /// Test GetHoldingTypeList
        /// </summary>
        [Test]
        public void GetHoldingTypeListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetHoldingTypeList();
            //Assert.IsInstanceOf<HoldingTypeListResponse> (response, "response is HoldingTypeListResponse");
        }
        /// <summary>
        /// Test GetHoldings
        /// </summary>
        [Test]
        public void GetHoldingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string assetClassificationClassificationType = null;
            //string classificationValue = null;
            //string include = null;
            //string providerAccountId = null;
            //var response = instance.GetHoldings(accountId, assetClassificationClassificationType, classificationValue, include, providerAccountId);
            //Assert.IsInstanceOf<HoldingResponse> (response, "response is HoldingResponse");
        }
        /// <summary>
        /// Test GetSecurities
        /// </summary>
        [Test]
        public void GetSecuritiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string holdingId = null;
            //var response = instance.GetSecurities(holdingId);
            //Assert.IsInstanceOf<HoldingSecuritiesResponse> (response, "response is HoldingSecuritiesResponse");
        }
    }

}
