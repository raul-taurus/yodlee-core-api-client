/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountsApiTests
    {
        private AccountsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountsApi
            //Assert.IsInstanceOfType(typeof(AccountsApi), instance, "instance is a AccountsApi");
        }

        /// <summary>
        /// Test CreateManualAccount
        /// </summary>
        [Test]
        public void CreateManualAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateAccountRequest body = null;
            //var response = instance.CreateManualAccount(body);
            //Assert.IsInstanceOf<CreatedAccountResponse> (response, "response is CreatedAccountResponse");
        }
        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Test]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? accountId = null;
            //instance.DeleteAccount(accountId);
            
        }
        /// <summary>
        /// Test EvaluateAddress
        /// </summary>
        [Test]
        public void EvaluateAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EvaluateAddressRequest body = null;
            //var response = instance.EvaluateAddress(body);
            //Assert.IsInstanceOf<EvaluateAddressResponse> (response, "response is EvaluateAddressResponse");
        }
        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Test]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? accountId = null;
            //string include = null;
            //var response = instance.GetAccount(accountId, include);
            //Assert.IsInstanceOf<AccountResponse> (response, "response is AccountResponse");
        }
        /// <summary>
        /// Test GetAllAccounts
        /// </summary>
        [Test]
        public void GetAllAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string container = null;
            //string include = null;
            //string providerAccountId = null;
            //string requestId = null;
            //string status = null;
            //var response = instance.GetAllAccounts(accountId, container, include, providerAccountId, requestId, status);
            //Assert.IsInstanceOf<AccountResponse> (response, "response is AccountResponse");
        }
        /// <summary>
        /// Test GetHistoricalBalances
        /// </summary>
        [Test]
        public void GetHistoricalBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string fromDate = null;
            //bool? includeCF = null;
            //string interval = null;
            //int? skip = null;
            //string toDate = null;
            //int? top = null;
            //var response = instance.GetHistoricalBalances(accountId, fromDate, includeCF, interval, skip, toDate, top);
            //Assert.IsInstanceOf<AccountHistoricalBalancesResponse> (response, "response is AccountHistoricalBalancesResponse");
        }
        /// <summary>
        /// Test GetLatestBalances
        /// </summary>
        [Test]
        public void GetLatestBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string providerAccountId = null;
            //var response = instance.GetLatestBalances(accountId, providerAccountId);
            //Assert.IsInstanceOf<AccountBalanceResponse> (response, "response is AccountBalanceResponse");
        }
        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Test]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateAccountRequest body = null;
            //long? accountId = null;
            //instance.UpdateAccount(body, accountId);
            
        }
    }

}
