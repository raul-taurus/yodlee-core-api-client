/* 
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TransactionsApiTests
    {
        private TransactionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TransactionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TransactionsApi
            //Assert.IsInstanceOfType(typeof(TransactionsApi), instance, "instance is a TransactionsApi");
        }

        /// <summary>
        /// Test CreateOrRunTransactionCategorizationRules
        /// </summary>
        [Test]
        public void CreateOrRunTransactionCategorizationRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string action = null;
            //string ruleParam = null;
            //instance.CreateOrRunTransactionCategorizationRules(action, ruleParam);
            
        }
        /// <summary>
        /// Test CreateTransactionCategory
        /// </summary>
        [Test]
        public void CreateTransactionCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionCategoryRequest body = null;
            //instance.CreateTransactionCategory(body);
            
        }
        /// <summary>
        /// Test DeleteTransactionCategorizationRule
        /// </summary>
        [Test]
        public void DeleteTransactionCategorizationRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ruleId = null;
            //instance.DeleteTransactionCategorizationRule(ruleId);
            
        }
        /// <summary>
        /// Test DeleteTransactionCategory
        /// </summary>
        [Test]
        public void DeleteTransactionCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? categoryId = null;
            //instance.DeleteTransactionCategory(categoryId);
            
        }
        /// <summary>
        /// Test GetTransactionCategories
        /// </summary>
        [Test]
        public void GetTransactionCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTransactionCategories();
            //Assert.IsInstanceOf<TransactionCategoryResponse> (response, "response is TransactionCategoryResponse");
        }
        /// <summary>
        /// Test GetTransactionCategorizationRules
        /// </summary>
        [Test]
        public void GetTransactionCategorizationRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTransactionCategorizationRules();
            //Assert.IsInstanceOf<TransactionCategorizationRuleResponse> (response, "response is TransactionCategorizationRuleResponse");
        }
        /// <summary>
        /// Test GetTransactionCategorizationRulesDeprecated
        /// </summary>
        [Test]
        public void GetTransactionCategorizationRulesDeprecatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTransactionCategorizationRulesDeprecated();
            //Assert.IsInstanceOf<List<TransactionCategorizationRule>> (response, "response is List<TransactionCategorizationRule>");
        }
        /// <summary>
        /// Test GetTransactions
        /// </summary>
        [Test]
        public void GetTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string baseType = null;
            //string categoryId = null;
            //string categoryType = null;
            //string container = null;
            //string detailCategoryId = null;
            //string fromDate = null;
            //string highLevelCategoryId = null;
            //string keyword = null;
            //int? skip = null;
            //string toDate = null;
            //int? top = null;
            //string type = null;
            //var response = instance.GetTransactions(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        /// <summary>
        /// Test GetTransactionsCount
        /// </summary>
        [Test]
        public void GetTransactionsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string baseType = null;
            //string categoryId = null;
            //string categoryType = null;
            //string container = null;
            //string detailCategoryId = null;
            //string fromDate = null;
            //string highLevelCategoryId = null;
            //string keyword = null;
            //string toDate = null;
            //string type = null;
            //var response = instance.GetTransactionsCount(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type);
            //Assert.IsInstanceOf<TransactionCountResponse> (response, "response is TransactionCountResponse");
        }
        /// <summary>
        /// Test RunTransactionCategorizationRule
        /// </summary>
        [Test]
        public void RunTransactionCategorizationRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string action = null;
            //long? ruleId = null;
            //instance.RunTransactionCategorizationRule(action, ruleId);
            
        }
        /// <summary>
        /// Test UpdateTransaction
        /// </summary>
        [Test]
        public void UpdateTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionRequest body = null;
            //long? transactionId = null;
            //instance.UpdateTransaction(body, transactionId);
            
        }
        /// <summary>
        /// Test UpdateTransactionCategorizationRule
        /// </summary>
        [Test]
        public void UpdateTransactionCategorizationRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionCategorizationRuleRequest body = null;
            //long? ruleId = null;
            //instance.UpdateTransactionCategorizationRule(body, ruleId);
            
        }
        /// <summary>
        /// Test UpdateTransactionCategory
        /// </summary>
        [Test]
        public void UpdateTransactionCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCategoryRequest body = null;
            //instance.UpdateTransactionCategory(body);
            
        }
    }

}
