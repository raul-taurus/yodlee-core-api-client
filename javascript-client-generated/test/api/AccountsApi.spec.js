/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new YodleeCoreApis.AccountsApi();
  });

  describe('(package)', function() {
    describe('AccountsApi', function() {
      describe('createManualAccount', function() {
        it('should call createManualAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for createManualAccount call and complete the assertions
          /*

          instance.createManualAccount(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(YodleeCoreApis.CreatedAccountResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAccount', function() {
        it('should call deleteAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAccount call
          /*

          instance.deleteAccount(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('evaluateAddress', function() {
        it('should call evaluateAddress successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluateAddress call and complete the assertions
          /*

          instance.evaluateAddress(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(YodleeCoreApis.EvaluateAddressResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAccount', function() {
        it('should call getAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for getAccount call and complete the assertions
          /*
          var opts = {};

          instance.getAccount(accountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(YodleeCoreApis.AccountResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllAccounts', function() {
        it('should call getAllAccounts successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllAccounts call and complete the assertions
          /*
          var opts = {};

          instance.getAllAccounts(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(YodleeCoreApis.AccountResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHistoricalBalances', function() {
        it('should call getHistoricalBalances successfully', function(done) {
          // TODO: uncomment, update parameter values for getHistoricalBalances call and complete the assertions
          /*
          var opts = {};

          instance.getHistoricalBalances(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(YodleeCoreApis.AccountHistoricalBalancesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLatestBalances', function() {
        it('should call getLatestBalances successfully', function(done) {
          // TODO: uncomment, update parameter values for getLatestBalances call and complete the assertions
          /*

          instance.getLatestBalances(accountId, providerAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(YodleeCoreApis.AccountBalanceResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAccount', function() {
        it('should call updateAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAccount call
          /*

          instance.updateAccount(body, accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
