/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Transaction', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.Transaction();
      });

      it('should create an instance of Transaction', function() {
        // TODO: update the code to test Transaction
        expect(instance).to.be.a(YodleeCoreApis.Transaction);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property sourceId (base name: "sourceId")', function() {
        // TODO: update the code to test the property sourceId
        expect(instance).to.have.property('sourceId');
        // expect(instance.sourceId).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property cusipNumber (base name: "cusipNumber")', function() {
        // TODO: update the code to test the property cusipNumber
        expect(instance).to.have.property('cusipNumber');
        // expect(instance.cusipNumber).to.be(expectedValueLiteral);
      });

      it('should have the property highLevelCategoryId (base name: "highLevelCategoryId")', function() {
        // TODO: update the code to test the property highLevelCategoryId
        expect(instance).to.have.property('highLevelCategoryId');
        // expect(instance.highLevelCategoryId).to.be(expectedValueLiteral);
      });

      it('should have the property detailCategoryId (base name: "detailCategoryId")', function() {
        // TODO: update the code to test the property detailCategoryId
        expect(instance).to.have.property('detailCategoryId');
        // expect(instance.detailCategoryId).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property memo (base name: "memo")', function() {
        // TODO: update the code to test the property memo
        expect(instance).to.have.property('memo');
        // expect(instance.memo).to.be(expectedValueLiteral);
      });

      it('should have the property settleDate (base name: "settleDate")', function() {
        // TODO: update the code to test the property settleDate
        expect(instance).to.have.property('settleDate');
        // expect(instance.settleDate).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property intermediary (base name: "intermediary")', function() {
        // TODO: update the code to test the property intermediary
        expect(instance).to.have.property('intermediary');
        // expect(instance.intermediary).to.be(expectedValueLiteral);
      });

      it('should have the property baseType (base name: "baseType")', function() {
        // TODO: update the code to test the property baseType
        expect(instance).to.have.property('baseType');
        // expect(instance.baseType).to.be(expectedValueLiteral);
      });

      it('should have the property categorySource (base name: "categorySource")', function() {
        // TODO: update the code to test the property categorySource
        expect(instance).to.have.property('categorySource');
        // expect(instance.categorySource).to.be(expectedValueLiteral);
      });

      it('should have the property principal (base name: "principal")', function() {
        // TODO: update the code to test the property principal
        expect(instance).to.have.property('principal');
        // expect(instance.principal).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdated (base name: "lastUpdated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property interest (base name: "interest")', function() {
        // TODO: update the code to test the property interest
        expect(instance).to.have.property('interest');
        // expect(instance.interest).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property commission (base name: "commission")', function() {
        // TODO: update the code to test the property commission
        expect(instance).to.have.property('commission');
        // expect(instance.commission).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property merchantType (base name: "merchantType")', function() {
        // TODO: update the code to test the property merchantType
        expect(instance).to.have.property('merchantType');
        // expect(instance.merchantType).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property checkNumber (base name: "checkNumber")', function() {
        // TODO: update the code to test the property checkNumber
        expect(instance).to.have.property('checkNumber');
        // expect(instance.checkNumber).to.be(expectedValueLiteral);
      });

      it('should have the property isPhysical (base name: "isPhysical")', function() {
        // TODO: update the code to test the property isPhysical
        expect(instance).to.have.property('isPhysical');
        // expect(instance.isPhysical).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property valoren (base name: "valoren")', function() {
        // TODO: update the code to test the property valoren
        expect(instance).to.have.property('valoren');
        // expect(instance.valoren).to.be(expectedValueLiteral);
      });

      it('should have the property isManual (base name: "isManual")', function() {
        // TODO: update the code to test the property isManual
        expect(instance).to.have.property('isManual');
        // expect(instance.isManual).to.be(expectedValueLiteral);
      });

      it('should have the property merchant (base name: "merchant")', function() {
        // TODO: update the code to test the property merchant
        expect(instance).to.have.property('merchant');
        // expect(instance.merchant).to.be(expectedValueLiteral);
      });

      it('should have the property sedol (base name: "sedol")', function() {
        // TODO: update the code to test the property sedol
        expect(instance).to.have.property('sedol');
        // expect(instance.sedol).to.be(expectedValueLiteral);
      });

      it('should have the property transactionDate (base name: "transactionDate")', function() {
        // TODO: update the code to test the property transactionDate
        expect(instance).to.have.property('transactionDate');
        // expect(instance.transactionDate).to.be(expectedValueLiteral);
      });

      it('should have the property categoryType (base name: "categoryType")', function() {
        // TODO: update the code to test the property categoryType
        expect(instance).to.have.property('categoryType');
        // expect(instance.categoryType).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property sourceType (base name: "sourceType")', function() {
        // TODO: update the code to test the property sourceType
        expect(instance).to.have.property('sourceType');
        // expect(instance.sourceType).to.be(expectedValueLiteral);
      });

      it('should have the property CONTAINER (base name: "CONTAINER")', function() {
        // TODO: update the code to test the property CONTAINER
        expect(instance).to.have.property('CONTAINER');
        // expect(instance.CONTAINER).to.be(expectedValueLiteral);
      });

      it('should have the property postDate (base name: "postDate")', function() {
        // TODO: update the code to test the property postDate
        expect(instance).to.have.property('postDate');
        // expect(instance.postDate).to.be(expectedValueLiteral);
      });

      it('should have the property parentCategoryId (base name: "parentCategoryId")', function() {
        // TODO: update the code to test the property parentCategoryId
        expect(instance).to.have.property('parentCategoryId');
        // expect(instance.parentCategoryId).to.be(expectedValueLiteral);
      });

      it('should have the property subType (base name: "subType")', function() {
        // TODO: update the code to test the property subType
        expect(instance).to.have.property('subType');
        // expect(instance.subType).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property runningBalance (base name: "runningBalance")', function() {
        // TODO: update the code to test the property runningBalance
        expect(instance).to.have.property('runningBalance');
        // expect(instance.runningBalance).to.be(expectedValueLiteral);
      });

      it('should have the property categoryId (base name: "categoryId")', function() {
        // TODO: update the code to test the property categoryId
        expect(instance).to.have.property('categoryId');
        // expect(instance.categoryId).to.be(expectedValueLiteral);
      });

      it('should have the property holdingDescription (base name: "holdingDescription")', function() {
        // TODO: update the code to test the property holdingDescription
        expect(instance).to.have.property('holdingDescription');
        // expect(instance.holdingDescription).to.be(expectedValueLiteral);
      });

      it('should have the property isin (base name: "isin")', function() {
        // TODO: update the code to test the property isin
        expect(instance).to.have.property('isin');
        // expect(instance.isin).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

    });
  });

}));
