/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AccountDataset', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.AccountDataset();
      });

      it('should create an instance of AccountDataset', function() {
        // TODO: update the code to test AccountDataset
        expect(instance).to.be.a(YodleeCoreApis.AccountDataset);
      });

      it('should have the property lastUpdated (base name: "lastUpdated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property updateEligibility (base name: "updateEligibility")', function() {
        // TODO: update the code to test the property updateEligibility
        expect(instance).to.have.property('updateEligibility');
        // expect(instance.updateEligibility).to.be(expectedValueLiteral);
      });

      it('should have the property additionalStatus (base name: "additionalStatus")', function() {
        // TODO: update the code to test the property additionalStatus
        expect(instance).to.have.property('additionalStatus');
        // expect(instance.additionalStatus).to.be(expectedValueLiteral);
      });

      it('should have the property nextUpdateScheduled (base name: "nextUpdateScheduled")', function() {
        // TODO: update the code to test the property nextUpdateScheduled
        expect(instance).to.have.property('nextUpdateScheduled');
        // expect(instance.nextUpdateScheduled).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdateAttempt (base name: "lastUpdateAttempt")', function() {
        // TODO: update the code to test the property lastUpdateAttempt
        expect(instance).to.have.property('lastUpdateAttempt');
        // expect(instance.lastUpdateAttempt).to.be(expectedValueLiteral);
      });

    });
  });

}));
