/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Statement', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.Statement();
      });

      it('should create an instance of Statement', function() {
        // TODO: update the code to test Statement
        expect(instance).to.be.a(YodleeCoreApis.Statement);
      });

      it('should have the property apr (base name: "apr")', function() {
        // TODO: update the code to test the property apr
        expect(instance).to.have.property('apr');
        // expect(instance.apr).to.be(expectedValueLiteral);
      });

      it('should have the property cashApr (base name: "cashApr")', function() {
        // TODO: update the code to test the property cashApr
        expect(instance).to.have.property('cashApr');
        // expect(instance.cashApr).to.be(expectedValueLiteral);
      });

      it('should have the property billingPeriodStart (base name: "billingPeriodStart")', function() {
        // TODO: update the code to test the property billingPeriodStart
        expect(instance).to.have.property('billingPeriodStart');
        // expect(instance.billingPeriodStart).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "dueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property interestAmount (base name: "interestAmount")', function() {
        // TODO: update the code to test the property interestAmount
        expect(instance).to.have.property('interestAmount');
        // expect(instance.interestAmount).to.be(expectedValueLiteral);
      });

      it('should have the property statementDate (base name: "statementDate")', function() {
        // TODO: update the code to test the property statementDate
        expect(instance).to.have.property('statementDate');
        // expect(instance.statementDate).to.be(expectedValueLiteral);
      });

      it('should have the property cashAdvance (base name: "cashAdvance")', function() {
        // TODO: update the code to test the property cashAdvance
        expect(instance).to.have.property('cashAdvance');
        // expect(instance.cashAdvance).to.be(expectedValueLiteral);
      });

      it('should have the property billingPeriodEnd (base name: "billingPeriodEnd")', function() {
        // TODO: update the code to test the property billingPeriodEnd
        expect(instance).to.have.property('billingPeriodEnd');
        // expect(instance.billingPeriodEnd).to.be(expectedValueLiteral);
      });

      it('should have the property principalAmount (base name: "principalAmount")', function() {
        // TODO: update the code to test the property principalAmount
        expect(instance).to.have.property('principalAmount');
        // expect(instance.principalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property loanBalance (base name: "loanBalance")', function() {
        // TODO: update the code to test the property loanBalance
        expect(instance).to.have.property('loanBalance');
        // expect(instance.loanBalance).to.be(expectedValueLiteral);
      });

      it('should have the property amountDue (base name: "amountDue")', function() {
        // TODO: update the code to test the property amountDue
        expect(instance).to.have.property('amountDue');
        // expect(instance.amountDue).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdated (base name: "lastUpdated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property isLatest (base name: "isLatest")', function() {
        // TODO: update the code to test the property isLatest
        expect(instance).to.have.property('isLatest');
        // expect(instance.isLatest).to.be(expectedValueLiteral);
      });

      it('should have the property minimumPayment (base name: "minimumPayment")', function() {
        // TODO: update the code to test the property minimumPayment
        expect(instance).to.have.property('minimumPayment');
        // expect(instance.minimumPayment).to.be(expectedValueLiteral);
      });

      it('should have the property lastPaymentDate (base name: "lastPaymentDate")', function() {
        // TODO: update the code to test the property lastPaymentDate
        expect(instance).to.have.property('lastPaymentDate');
        // expect(instance.lastPaymentDate).to.be(expectedValueLiteral);
      });

      it('should have the property lastPaymentAmount (base name: "lastPaymentAmount")', function() {
        // TODO: update the code to test the property lastPaymentAmount
        expect(instance).to.have.property('lastPaymentAmount');
        // expect(instance.lastPaymentAmount).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property newCharges (base name: "newCharges")', function() {
        // TODO: update the code to test the property newCharges
        expect(instance).to.have.property('newCharges');
        // expect(instance.newCharges).to.be(expectedValueLiteral);
      });

    });
  });

}));
