/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TransactionCategorizationRule', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.TransactionCategorizationRule();
      });

      it('should create an instance of TransactionCategorizationRule', function() {
        // TODO: update the code to test TransactionCategorizationRule
        expect(instance).to.be.a(YodleeCoreApis.TransactionCategorizationRule);
      });

      it('should have the property ruleClauses (base name: "ruleClauses")', function() {
        // TODO: update the code to test the property ruleClauses
        expect(instance).to.have.property('ruleClauses');
        // expect(instance.ruleClauses).to.be(expectedValueLiteral);
      });

      it('should have the property userDefinedRuleId (base name: "userDefinedRuleId")', function() {
        // TODO: update the code to test the property userDefinedRuleId
        expect(instance).to.have.property('userDefinedRuleId');
        // expect(instance.userDefinedRuleId).to.be(expectedValueLiteral);
      });

      it('should have the property categoryLevelId (base name: "categoryLevelId")', function() {
        // TODO: update the code to test the property categoryLevelId
        expect(instance).to.have.property('categoryLevelId');
        // expect(instance.categoryLevelId).to.be(expectedValueLiteral);
      });

      it('should have the property transactionCategorisationId (base name: "transactionCategorisationId")', function() {
        // TODO: update the code to test the property transactionCategorisationId
        expect(instance).to.have.property('transactionCategorisationId');
        // expect(instance.transactionCategorisationId).to.be(expectedValueLiteral);
      });

      it('should have the property memId (base name: "memId")', function() {
        // TODO: update the code to test the property memId
        expect(instance).to.have.property('memId');
        // expect(instance.memId).to.be(expectedValueLiteral);
      });

      it('should have the property rulePriority (base name: "rulePriority")', function() {
        // TODO: update the code to test the property rulePriority
        expect(instance).to.have.property('rulePriority');
        // expect(instance.rulePriority).to.be(expectedValueLiteral);
      });

    });
  });

}));
