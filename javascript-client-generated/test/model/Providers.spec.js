/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Providers', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.Providers();
      });

      it('should create an instance of Providers', function() {
        // TODO: update the code to test Providers
        expect(instance).to.be.a(YodleeCoreApis.Providers);
      });

      it('should have the property languageISOCode (base name: "languageISOCode")', function() {
        // TODO: update the code to test the property languageISOCode
        expect(instance).to.have.property('languageISOCode');
        // expect(instance.languageISOCode).to.be(expectedValueLiteral);
      });

      it('should have the property forgetPasswordUrl (base name: "forgetPasswordUrl")', function() {
        // TODO: update the code to test the property forgetPasswordUrl
        expect(instance).to.have.property('forgetPasswordUrl');
        // expect(instance.forgetPasswordUrl).to.be(expectedValueLiteral);
      });

      it('should have the property favicon (base name: "favicon")', function() {
        // TODO: update the code to test the property favicon
        expect(instance).to.have.property('favicon');
        // expect(instance.favicon).to.be(expectedValueLiteral);
      });

      it('should have the property accountType (base name: "accountType")', function() {
        // TODO: update the code to test the property accountType
        expect(instance).to.have.property('accountType');
        // expect(instance.accountType).to.be(expectedValueLiteral);
      });

      it('should have the property countryISOCode (base name: "countryISOCode")', function() {
        // TODO: update the code to test the property countryISOCode
        expect(instance).to.have.property('countryISOCode');
        // expect(instance.countryISOCode).to.be(expectedValueLiteral);
      });

      it('should have the property isAddedByUser (base name: "isAddedByUser")', function() {
        // TODO: update the code to test the property isAddedByUser
        expect(instance).to.have.property('isAddedByUser');
        // expect(instance.isAddedByUser).to.be(expectedValueLiteral);
      });

      it('should have the property PRIORITY (base name: "PRIORITY")', function() {
        // TODO: update the code to test the property PRIORITY
        expect(instance).to.have.property('PRIORITY');
        // expect(instance.PRIORITY).to.be(expectedValueLiteral);
      });

      it('should have the property associatedProviderIds (base name: "associatedProviderIds")', function() {
        // TODO: update the code to test the property associatedProviderIds
        expect(instance).to.have.property('associatedProviderIds');
        // expect(instance.associatedProviderIds).to.be(expectedValueLiteral);
      });

      it('should have the property loginHelp (base name: "loginHelp")', function() {
        // TODO: update the code to test the property loginHelp
        expect(instance).to.have.property('loginHelp');
        // expect(instance.loginHelp).to.be(expectedValueLiteral);
      });

      it('should have the property primaryLanguageISOCode (base name: "primaryLanguageISOCode")', function() {
        // TODO: update the code to test the property primaryLanguageISOCode
        expect(instance).to.have.property('primaryLanguageISOCode');
        // expect(instance.primaryLanguageISOCode).to.be(expectedValueLiteral);
      });

      it('should have the property help (base name: "help")', function() {
        // TODO: update the code to test the property help
        expect(instance).to.have.property('help');
        // expect(instance.help).to.be(expectedValueLiteral);
      });

      it('should have the property baseUrl (base name: "baseUrl")', function() {
        // TODO: update the code to test the property baseUrl
        expect(instance).to.have.property('baseUrl');
        // expect(instance.baseUrl).to.be(expectedValueLiteral);
      });

      it('should have the property capability (base name: "capability")', function() {
        // TODO: update the code to test the property capability
        expect(instance).to.have.property('capability');
        // expect(instance.capability).to.be(expectedValueLiteral);
      });

      it('should have the property isConsentRequired (base name: "isConsentRequired")', function() {
        // TODO: update the code to test the property isConsentRequired
        expect(instance).to.have.property('isConsentRequired');
        // expect(instance.isConsentRequired).to.be(expectedValueLiteral);
      });

      it('should have the property loginUrl (base name: "loginUrl")', function() {
        // TODO: update the code to test the property loginUrl
        expect(instance).to.have.property('loginUrl');
        // expect(instance.loginUrl).to.be(expectedValueLiteral);
      });

      it('should have the property isAutoRefreshEnabled (base name: "isAutoRefreshEnabled")', function() {
        // TODO: update the code to test the property isAutoRefreshEnabled
        expect(instance).to.have.property('isAutoRefreshEnabled');
        // expect(instance.isAutoRefreshEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property logo (base name: "logo")', function() {
        // TODO: update the code to test the property logo
        expect(instance).to.have.property('logo');
        // expect(instance.logo).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property authParameter (base name: "authParameter")', function() {
        // TODO: update the code to test the property authParameter
        expect(instance).to.have.property('authParameter');
        // expect(instance.authParameter).to.be(expectedValueLiteral);
      });

      it('should have the property authType (base name: "authType")', function() {
        // TODO: update the code to test the property authType
        expect(instance).to.have.property('authType');
        // expect(instance.authType).to.be(expectedValueLiteral);
      });

      it('should have the property dataset (base name: "dataset")', function() {
        // TODO: update the code to test the property dataset
        expect(instance).to.have.property('dataset');
        // expect(instance.dataset).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

    });
  });

}));
