/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TransactionCategory', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.TransactionCategory();
      });

      it('should create an instance of TransactionCategory', function() {
        // TODO: update the code to test TransactionCategory
        expect(instance).to.be.a(YodleeCoreApis.TransactionCategory);
      });

      it('should have the property highLevelCategoryName (base name: "highLevelCategoryName")', function() {
        // TODO: update the code to test the property highLevelCategoryName
        expect(instance).to.have.property('highLevelCategoryName');
        // expect(instance.highLevelCategoryName).to.be(expectedValueLiteral);
      });

      it('should have the property defaultHighLevelCategoryName (base name: "defaultHighLevelCategoryName")', function() {
        // TODO: update the code to test the property defaultHighLevelCategoryName
        expect(instance).to.have.property('defaultHighLevelCategoryName');
        // expect(instance.defaultHighLevelCategoryName).to.be(expectedValueLiteral);
      });

      it('should have the property highLevelCategoryId (base name: "highLevelCategoryId")', function() {
        // TODO: update the code to test the property highLevelCategoryId
        expect(instance).to.have.property('highLevelCategoryId');
        // expect(instance.highLevelCategoryId).to.be(expectedValueLiteral);
      });

      it('should have the property detailCategory (base name: "detailCategory")', function() {
        // TODO: update the code to test the property detailCategory
        expect(instance).to.have.property('detailCategory');
        // expect(instance.detailCategory).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property classification (base name: "classification")', function() {
        // TODO: update the code to test the property classification
        expect(instance).to.have.property('classification');
        // expect(instance.classification).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property defaultCategoryName (base name: "defaultCategoryName")', function() {
        // TODO: update the code to test the property defaultCategoryName
        expect(instance).to.have.property('defaultCategoryName');
        // expect(instance.defaultCategoryName).to.be(expectedValueLiteral);
      });

    });
  });

}));
