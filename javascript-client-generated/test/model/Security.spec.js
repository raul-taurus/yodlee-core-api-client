/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Security', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.Security();
      });

      it('should create an instance of Security', function() {
        // TODO: update the code to test Security
        expect(instance).to.be.a(YodleeCoreApis.Security);
      });

      it('should have the property stockExchangeDetails (base name: "stockExchangeDetails")', function() {
        // TODO: update the code to test the property stockExchangeDetails
        expect(instance).to.have.property('stockExchangeDetails');
        // expect(instance.stockExchangeDetails).to.be(expectedValueLiteral);
      });

      it('should have the property issueTypeMultiplier (base name: "issueTypeMultiplier")', function() {
        // TODO: update the code to test the property issueTypeMultiplier
        expect(instance).to.have.property('issueTypeMultiplier');
        // expect(instance.issueTypeMultiplier).to.be(expectedValueLiteral);
      });

      it('should have the property stateTaxable (base name: "stateTaxable")', function() {
        // TODO: update the code to test the property stateTaxable
        expect(instance).to.have.property('stateTaxable');
        // expect(instance.stateTaxable).to.be(expectedValueLiteral);
      });

      it('should have the property callDate (base name: "callDate")', function() {
        // TODO: update the code to test the property callDate
        expect(instance).to.have.property('callDate');
        // expect(instance.callDate).to.be(expectedValueLiteral);
      });

      it('should have the property cdscFundFlag (base name: "cdscFundFlag")', function() {
        // TODO: update the code to test the property cdscFundFlag
        expect(instance).to.have.property('cdscFundFlag');
        // expect(instance.cdscFundFlag).to.be(expectedValueLiteral);
      });

      it('should have the property cusip (base name: "cusip")', function() {
        // TODO: update the code to test the property cusip
        expect(instance).to.have.property('cusip');
        // expect(instance.cusip).to.be(expectedValueLiteral);
      });

      it('should have the property federalTaxable (base name: "federalTaxable")', function() {
        // TODO: update the code to test the property federalTaxable
        expect(instance).to.have.property('federalTaxable');
        // expect(instance.federalTaxable).to.be(expectedValueLiteral);
      });

      it('should have the property sAndPRating (base name: "sAndPRating")', function() {
        // TODO: update the code to test the property sAndPRating
        expect(instance).to.have.property('sAndPRating');
        // expect(instance.sAndPRating).to.be(expectedValueLiteral);
      });

      it('should have the property shareClass (base name: "shareClass")', function() {
        // TODO: update the code to test the property shareClass
        expect(instance).to.have.property('shareClass');
        // expect(instance.shareClass).to.be(expectedValueLiteral);
      });

      it('should have the property isEnvestnetDummySecurity (base name: "isEnvestnetDummySecurity")', function() {
        // TODO: update the code to test the property isEnvestnetDummySecurity
        expect(instance).to.have.property('isEnvestnetDummySecurity');
        // expect(instance.isEnvestnetDummySecurity).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property minimumPurchase (base name: "minimumPurchase")', function() {
        // TODO: update the code to test the property minimumPurchase
        expect(instance).to.have.property('minimumPurchase');
        // expect(instance.minimumPurchase).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property firstCouponDate (base name: "firstCouponDate")', function() {
        // TODO: update the code to test the property firstCouponDate
        expect(instance).to.have.property('firstCouponDate');
        // expect(instance.firstCouponDate).to.be(expectedValueLiteral);
      });

      it('should have the property frequency (base name: "frequency")', function() {
        // TODO: update the code to test the property frequency
        expect(instance).to.have.property('frequency');
        // expect(instance.frequency).to.be(expectedValueLiteral);
      });

      it('should have the property accrualMethod (base name: "accrualMethod")', function() {
        // TODO: update the code to test the property accrualMethod
        expect(instance).to.have.property('accrualMethod');
        // expect(instance.accrualMethod).to.be(expectedValueLiteral);
      });

      it('should have the property incomeCurrency (base name: "incomeCurrency")', function() {
        // TODO: update the code to test the property incomeCurrency
        expect(instance).to.have.property('incomeCurrency');
        // expect(instance.incomeCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property maturityDate (base name: "maturityDate")', function() {
        // TODO: update the code to test the property maturityDate
        expect(instance).to.have.property('maturityDate');
        // expect(instance.maturityDate).to.be(expectedValueLiteral);
      });

      it('should have the property callPrice (base name: "callPrice")', function() {
        // TODO: update the code to test the property callPrice
        expect(instance).to.have.property('callPrice');
        // expect(instance.callPrice).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property issueDate (base name: "issueDate")', function() {
        // TODO: update the code to test the property issueDate
        expect(instance).to.have.property('issueDate');
        // expect(instance.issueDate).to.be(expectedValueLiteral);
      });

      it('should have the property sector (base name: "sector")', function() {
        // TODO: update the code to test the property sector
        expect(instance).to.have.property('sector');
        // expect(instance.sector).to.be(expectedValueLiteral);
      });

      it('should have the property agencyFactor (base name: "agencyFactor")', function() {
        // TODO: update the code to test the property agencyFactor
        expect(instance).to.have.property('agencyFactor');
        // expect(instance.agencyFactor).to.be(expectedValueLiteral);
      });

      it('should have the property interestRate (base name: "interestRate")', function() {
        // TODO: update the code to test the property interestRate
        expect(instance).to.have.property('interestRate');
        // expect(instance.interestRate).to.be(expectedValueLiteral);
      });

      it('should have the property lastModifiedDate (base name: "lastModifiedDate")', function() {
        // TODO: update the code to test the property lastModifiedDate
        expect(instance).to.have.property('lastModifiedDate');
        // expect(instance.lastModifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property gicsSector (base name: "gicsSector")', function() {
        // TODO: update the code to test the property gicsSector
        expect(instance).to.have.property('gicsSector');
        // expect(instance.gicsSector).to.be(expectedValueLiteral);
      });

      it('should have the property closedFlag (base name: "closedFlag")', function() {
        // TODO: update the code to test the property closedFlag
        expect(instance).to.have.property('closedFlag');
        // expect(instance.closedFlag).to.be(expectedValueLiteral);
      });

      it('should have the property sedol (base name: "sedol")', function() {
        // TODO: update the code to test the property sedol
        expect(instance).to.have.property('sedol');
        // expect(instance.sedol).to.be(expectedValueLiteral);
      });

      it('should have the property subSector (base name: "subSector")', function() {
        // TODO: update the code to test the property subSector
        expect(instance).to.have.property('subSector');
        // expect(instance.subSector).to.be(expectedValueLiteral);
      });

      it('should have the property lastCouponDate (base name: "lastCouponDate")', function() {
        // TODO: update the code to test the property lastCouponDate
        expect(instance).to.have.property('lastCouponDate');
        // expect(instance.lastCouponDate).to.be(expectedValueLiteral);
      });

      it('should have the property isSyntheticSecurity (base name: "isSyntheticSecurity")', function() {
        // TODO: update the code to test the property isSyntheticSecurity
        expect(instance).to.have.property('isSyntheticSecurity');
        // expect(instance.isSyntheticSecurity).to.be(expectedValueLiteral);
      });

      it('should have the property tradeCurrencyCode (base name: "tradeCurrencyCode")', function() {
        // TODO: update the code to test the property tradeCurrencyCode
        expect(instance).to.have.property('tradeCurrencyCode');
        // expect(instance.tradeCurrencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property isDummySecurity (base name: "isDummySecurity")', function() {
        // TODO: update the code to test the property isDummySecurity
        expect(instance).to.have.property('isDummySecurity');
        // expect(instance.isDummySecurity).to.be(expectedValueLiteral);
      });

      it('should have the property moodyRating (base name: "moodyRating")', function() {
        // TODO: update the code to test the property moodyRating
        expect(instance).to.have.property('moodyRating');
        // expect(instance.moodyRating).to.be(expectedValueLiteral);
      });

      it('should have the property style (base name: "style")', function() {
        // TODO: update the code to test the property style
        expect(instance).to.have.property('style');
        // expect(instance.style).to.be(expectedValueLiteral);
      });

      it('should have the property firmEligible (base name: "firmEligible")', function() {
        // TODO: update the code to test the property firmEligible
        expect(instance).to.have.property('firmEligible');
        // expect(instance.firmEligible).to.be(expectedValueLiteral);
      });

      it('should have the property fundFamily (base name: "fundFamily")', function() {
        // TODO: update the code to test the property fundFamily
        expect(instance).to.have.property('fundFamily');
        // expect(instance.fundFamily).to.be(expectedValueLiteral);
      });

      it('should have the property isin (base name: "isin")', function() {
        // TODO: update the code to test the property isin
        expect(instance).to.have.property('isin');
        // expect(instance.isin).to.be(expectedValueLiteral);
      });

    });
  });

}));
