/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DerivedCategorySummary', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.DerivedCategorySummary();
      });

      it('should create an instance of DerivedCategorySummary', function() {
        // TODO: update the code to test DerivedCategorySummary
        expect(instance).to.be.a(YodleeCoreApis.DerivedCategorySummary);
      });

      it('should have the property creditTotal (base name: "creditTotal")', function() {
        // TODO: update the code to test the property creditTotal
        expect(instance).to.have.property('creditTotal');
        // expect(instance.creditTotal).to.be(expectedValueLiteral);
      });

      it('should have the property details (base name: "details")', function() {
        // TODO: update the code to test the property details
        expect(instance).to.have.property('details');
        // expect(instance.details).to.be(expectedValueLiteral);
      });

      it('should have the property links (base name: "links")', function() {
        // TODO: update the code to test the property links
        expect(instance).to.have.property('links');
        // expect(instance.links).to.be(expectedValueLiteral);
      });

      it('should have the property categoryName (base name: "categoryName")', function() {
        // TODO: update the code to test the property categoryName
        expect(instance).to.have.property('categoryName');
        // expect(instance.categoryName).to.be(expectedValueLiteral);
      });

      it('should have the property categoryId (base name: "categoryId")', function() {
        // TODO: update the code to test the property categoryId
        expect(instance).to.have.property('categoryId');
        // expect(instance.categoryId).to.be(expectedValueLiteral);
      });

      it('should have the property debitTotal (base name: "debitTotal")', function() {
        // TODO: update the code to test the property debitTotal
        expect(instance).to.have.property('debitTotal');
        // expect(instance.debitTotal).to.be(expectedValueLiteral);
      });

    });
  });

}));
