/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Account', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.Account();
      });

      it('should create an instance of Account', function() {
        // TODO: update the code to test Account
        expect(instance).to.be.a(YodleeCoreApis.Account);
      });

      it('should have the property availableCash (base name: "availableCash")', function() {
        // TODO: update the code to test the property availableCash
        expect(instance).to.have.property('availableCash');
        // expect(instance.availableCash).to.be(expectedValueLiteral);
      });

      it('should have the property includeInNetWorth (base name: "includeInNetWorth")', function() {
        // TODO: update the code to test the property includeInNetWorth
        expect(instance).to.have.property('includeInNetWorth');
        // expect(instance.includeInNetWorth).to.be(expectedValueLiteral);
      });

      it('should have the property moneyMarketBalance (base name: "moneyMarketBalance")', function() {
        // TODO: update the code to test the property moneyMarketBalance
        expect(instance).to.have.property('moneyMarketBalance');
        // expect(instance.moneyMarketBalance).to.be(expectedValueLiteral);
      });

      it('should have the property enrollmentDate (base name: "enrollmentDate")', function() {
        // TODO: update the code to test the property enrollmentDate
        expect(instance).to.have.property('enrollmentDate');
        // expect(instance.enrollmentDate).to.be(expectedValueLiteral);
      });

      it('should have the property estimatedDate (base name: "estimatedDate")', function() {
        // TODO: update the code to test the property estimatedDate
        expect(instance).to.have.property('estimatedDate');
        // expect(instance.estimatedDate).to.be(expectedValueLiteral);
      });

      it('should have the property memo (base name: "memo")', function() {
        // TODO: update the code to test the property memo
        expect(instance).to.have.property('memo');
        // expect(instance.memo).to.be(expectedValueLiteral);
      });

      it('should have the property guarantor (base name: "guarantor")', function() {
        // TODO: update the code to test the property guarantor
        expect(instance).to.have.property('guarantor');
        // expect(instance.guarantor).to.be(expectedValueLiteral);
      });

      it('should have the property interestPaidLastYear (base name: "interestPaidLastYear")', function() {
        // TODO: update the code to test the property interestPaidLastYear
        expect(instance).to.have.property('interestPaidLastYear');
        // expect(instance.interestPaidLastYear).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdated (base name: "lastUpdated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property balance (base name: "balance")', function() {
        // TODO: update the code to test the property balance
        expect(instance).to.have.property('balance');
        // expect(instance.balance).to.be(expectedValueLiteral);
      });

      it('should have the property homeInsuranceType (base name: "homeInsuranceType")', function() {
        // TODO: update the code to test the property homeInsuranceType
        expect(instance).to.have.property('homeInsuranceType');
        // expect(instance.homeInsuranceType).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property cash (base name: "cash")', function() {
        // TODO: update the code to test the property cash
        expect(instance).to.have.property('cash');
        // expect(instance.cash).to.be(expectedValueLiteral);
      });

      it('should have the property totalCreditLine (base name: "totalCreditLine")', function() {
        // TODO: update the code to test the property totalCreditLine
        expect(instance).to.have.property('totalCreditLine');
        // expect(instance.totalCreditLine).to.be(expectedValueLiteral);
      });

      it('should have the property providerName (base name: "providerName")', function() {
        // TODO: update the code to test the property providerName
        expect(instance).to.have.property('providerName');
        // expect(instance.providerName).to.be(expectedValueLiteral);
      });

      it('should have the property valuationType (base name: "valuationType")', function() {
        // TODO: update the code to test the property valuationType
        expect(instance).to.have.property('valuationType');
        // expect(instance.valuationType).to.be(expectedValueLiteral);
      });

      it('should have the property marginBalance (base name: "marginBalance")', function() {
        // TODO: update the code to test the property marginBalance
        expect(instance).to.have.property('marginBalance');
        // expect(instance.marginBalance).to.be(expectedValueLiteral);
      });

      it('should have the property apr (base name: "apr")', function() {
        // TODO: update the code to test the property apr
        expect(instance).to.have.property('apr');
        // expect(instance.apr).to.be(expectedValueLiteral);
      });

      it('should have the property availableCredit (base name: "availableCredit")', function() {
        // TODO: update the code to test the property availableCredit
        expect(instance).to.have.property('availableCredit');
        // expect(instance.availableCredit).to.be(expectedValueLiteral);
      });

      it('should have the property currentBalance (base name: "currentBalance")', function() {
        // TODO: update the code to test the property currentBalance
        expect(instance).to.have.property('currentBalance');
        // expect(instance.currentBalance).to.be(expectedValueLiteral);
      });

      it('should have the property isManual (base name: "isManual")', function() {
        // TODO: update the code to test the property isManual
        expect(instance).to.have.property('isManual');
        // expect(instance.isManual).to.be(expectedValueLiteral);
      });

      it('should have the property profile (base name: "profile")', function() {
        // TODO: update the code to test the property profile
        expect(instance).to.have.property('profile');
        // expect(instance.profile).to.be(expectedValueLiteral);
      });

      it('should have the property escrowBalance (base name: "escrowBalance")', function() {
        // TODO: update the code to test the property escrowBalance
        expect(instance).to.have.property('escrowBalance');
        // expect(instance.escrowBalance).to.be(expectedValueLiteral);
      });

      it('should have the property nextLevel (base name: "nextLevel")', function() {
        // TODO: update the code to test the property nextLevel
        expect(instance).to.have.property('nextLevel');
        // expect(instance.nextLevel).to.be(expectedValueLiteral);
      });

      it('should have the property classification (base name: "classification")', function() {
        // TODO: update the code to test the property classification
        expect(instance).to.have.property('classification');
        // expect(instance.classification).to.be(expectedValueLiteral);
      });

      it('should have the property loanPayoffAmount (base name: "loanPayoffAmount")', function() {
        // TODO: update the code to test the property loanPayoffAmount
        expect(instance).to.have.property('loanPayoffAmount');
        // expect(instance.loanPayoffAmount).to.be(expectedValueLiteral);
      });

      it('should have the property interestRateType (base name: "interestRateType")', function() {
        // TODO: update the code to test the property interestRateType
        expect(instance).to.have.property('interestRateType');
        // expect(instance.interestRateType).to.be(expectedValueLiteral);
      });

      it('should have the property loanPayByDate (base name: "loanPayByDate")', function() {
        // TODO: update the code to test the property loanPayByDate
        expect(instance).to.have.property('loanPayByDate');
        // expect(instance.loanPayByDate).to.be(expectedValueLiteral);
      });

      it('should have the property faceAmount (base name: "faceAmount")', function() {
        // TODO: update the code to test the property faceAmount
        expect(instance).to.have.property('faceAmount');
        // expect(instance.faceAmount).to.be(expectedValueLiteral);
      });

      it('should have the property policyFromDate (base name: "policyFromDate")', function() {
        // TODO: update the code to test the property policyFromDate
        expect(instance).to.have.property('policyFromDate');
        // expect(instance.policyFromDate).to.be(expectedValueLiteral);
      });

      it('should have the property premiumPaymentTerm (base name: "premiumPaymentTerm")', function() {
        // TODO: update the code to test the property premiumPaymentTerm
        expect(instance).to.have.property('premiumPaymentTerm');
        // expect(instance.premiumPaymentTerm).to.be(expectedValueLiteral);
      });

      it('should have the property policyTerm (base name: "policyTerm")', function() {
        // TODO: update the code to test the property policyTerm
        expect(instance).to.have.property('policyTerm');
        // expect(instance.policyTerm).to.be(expectedValueLiteral);
      });

      it('should have the property repaymentPlanType (base name: "repaymentPlanType")', function() {
        // TODO: update the code to test the property repaymentPlanType
        expect(instance).to.have.property('repaymentPlanType');
        // expect(instance.repaymentPlanType).to.be(expectedValueLiteral);
      });

      it('should have the property aggregatedAccountType (base name: "aggregatedAccountType")', function() {
        // TODO: update the code to test the property aggregatedAccountType
        expect(instance).to.have.property('aggregatedAccountType');
        // expect(instance.aggregatedAccountType).to.be(expectedValueLiteral);
      });

      it('should have the property availableBalance (base name: "availableBalance")', function() {
        // TODO: update the code to test the property availableBalance
        expect(instance).to.have.property('availableBalance');
        // expect(instance.availableBalance).to.be(expectedValueLiteral);
      });

      it('should have the property accountStatus (base name: "accountStatus")', function() {
        // TODO: update the code to test the property accountStatus
        expect(instance).to.have.property('accountStatus');
        // expect(instance.accountStatus).to.be(expectedValueLiteral);
      });

      it('should have the property lifeInsuranceType (base name: "lifeInsuranceType")', function() {
        // TODO: update the code to test the property lifeInsuranceType
        expect(instance).to.have.property('lifeInsuranceType');
        // expect(instance.lifeInsuranceType).to.be(expectedValueLiteral);
      });

      it('should have the property fullAccountNumber (base name: "fullAccountNumber")', function() {
        // TODO: update the code to test the property fullAccountNumber
        expect(instance).to.have.property('fullAccountNumber');
        // expect(instance.fullAccountNumber).to.be(expectedValueLiteral);
      });

      it('should have the property premium (base name: "premium")', function() {
        // TODO: update the code to test the property premium
        expect(instance).to.have.property('premium');
        // expect(instance.premium).to.be(expectedValueLiteral);
      });

      it('should have the property aggregationSource (base name: "aggregationSource")', function() {
        // TODO: update the code to test the property aggregationSource
        expect(instance).to.have.property('aggregationSource');
        // expect(instance.aggregationSource).to.be(expectedValueLiteral);
      });

      it('should have the property overDraftLimit (base name: "overDraftLimit")', function() {
        // TODO: update the code to test the property overDraftLimit
        expect(instance).to.have.property('overDraftLimit');
        // expect(instance.overDraftLimit).to.be(expectedValueLiteral);
      });

      it('should have the property nickname (base name: "nickname")', function() {
        // TODO: update the code to test the property nickname
        expect(instance).to.have.property('nickname');
        // expect(instance.nickname).to.be(expectedValueLiteral);
      });

      it('should have the property term (base name: "term")', function() {
        // TODO: update the code to test the property term
        expect(instance).to.have.property('term');
        // expect(instance.term).to.be(expectedValueLiteral);
      });

      it('should have the property interestRate (base name: "interestRate")', function() {
        // TODO: update the code to test the property interestRate
        expect(instance).to.have.property('interestRate');
        // expect(instance.interestRate).to.be(expectedValueLiteral);
      });

      it('should have the property deathBenefit (base name: "deathBenefit")', function() {
        // TODO: update the code to test the property deathBenefit
        expect(instance).to.have.property('deathBenefit');
        // expect(instance.deathBenefit).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property cashValue (base name: "cashValue")', function() {
        // TODO: update the code to test the property cashValue
        expect(instance).to.have.property('cashValue');
        // expect(instance.cashValue).to.be(expectedValueLiteral);
      });

      it('should have the property holder (base name: "holder")', function() {
        // TODO: update the code to test the property holder
        expect(instance).to.have.property('holder');
        // expect(instance.holder).to.be(expectedValueLiteral);
      });

      it('should have the property _401kLoan (base name: "401kLoan")', function() {
        // TODO: update the code to test the property _401kLoan
        expect(instance).to.have.property('_401kLoan');
        // expect(instance._401kLoan).to.be(expectedValueLiteral);
      });

      it('should have the property homeValue (base name: "homeValue")', function() {
        // TODO: update the code to test the property homeValue
        expect(instance).to.have.property('homeValue');
        // expect(instance.homeValue).to.be(expectedValueLiteral);
      });

      it('should have the property accountNumber (base name: "accountNumber")', function() {
        // TODO: update the code to test the property accountNumber
        expect(instance).to.have.property('accountNumber');
        // expect(instance.accountNumber).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property interestPaidYTD (base name: "interestPaidYTD")', function() {
        // TODO: update the code to test the property interestPaidYTD
        expect(instance).to.have.property('interestPaidYTD');
        // expect(instance.interestPaidYTD).to.be(expectedValueLiteral);
      });

      it('should have the property providerAccountId (base name: "providerAccountId")', function() {
        // TODO: update the code to test the property providerAccountId
        expect(instance).to.have.property('providerAccountId');
        // expect(instance.providerAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property collateral (base name: "collateral")', function() {
        // TODO: update the code to test the property collateral
        expect(instance).to.have.property('collateral');
        // expect(instance.collateral).to.be(expectedValueLiteral);
      });

      it('should have the property dataset (base name: "dataset")', function() {
        // TODO: update the code to test the property dataset
        expect(instance).to.have.property('dataset');
        // expect(instance.dataset).to.be(expectedValueLiteral);
      });

      it('should have the property runningBalance (base name: "runningBalance")', function() {
        // TODO: update the code to test the property runningBalance
        expect(instance).to.have.property('runningBalance');
        // expect(instance.runningBalance).to.be(expectedValueLiteral);
      });

      it('should have the property sourceId (base name: "sourceId")', function() {
        // TODO: update the code to test the property sourceId
        expect(instance).to.have.property('sourceId');
        // expect(instance.sourceId).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "dueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property frequency (base name: "frequency")', function() {
        // TODO: update the code to test the property frequency
        expect(instance).to.have.property('frequency');
        // expect(instance.frequency).to.be(expectedValueLiteral);
      });

      it('should have the property maturityAmount (base name: "maturityAmount")', function() {
        // TODO: update the code to test the property maturityAmount
        expect(instance).to.have.property('maturityAmount');
        // expect(instance.maturityAmount).to.be(expectedValueLiteral);
      });

      it('should have the property associatedProviderAccountId (base name: "associatedProviderAccountId")', function() {
        // TODO: update the code to test the property associatedProviderAccountId
        expect(instance).to.have.property('associatedProviderAccountId');
        // expect(instance.associatedProviderAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property isAsset (base name: "isAsset")', function() {
        // TODO: update the code to test the property isAsset
        expect(instance).to.have.property('isAsset');
        // expect(instance.isAsset).to.be(expectedValueLiteral);
      });

      it('should have the property principalBalance (base name: "principalBalance")', function() {
        // TODO: update the code to test the property principalBalance
        expect(instance).to.have.property('principalBalance');
        // expect(instance.principalBalance).to.be(expectedValueLiteral);
      });

      it('should have the property totalCashLimit (base name: "totalCashLimit")', function() {
        // TODO: update the code to test the property totalCashLimit
        expect(instance).to.have.property('totalCashLimit');
        // expect(instance.totalCashLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maturityDate (base name: "maturityDate")', function() {
        // TODO: update the code to test the property maturityDate
        expect(instance).to.have.property('maturityDate');
        // expect(instance.maturityDate).to.be(expectedValueLiteral);
      });

      it('should have the property minimumAmountDue (base name: "minimumAmountDue")', function() {
        // TODO: update the code to test the property minimumAmountDue
        expect(instance).to.have.property('minimumAmountDue');
        // expect(instance.minimumAmountDue).to.be(expectedValueLiteral);
      });

      it('should have the property annualPercentageYield (base name: "annualPercentageYield")', function() {
        // TODO: update the code to test the property annualPercentageYield
        expect(instance).to.have.property('annualPercentageYield');
        // expect(instance.annualPercentageYield).to.be(expectedValueLiteral);
      });

      it('should have the property accountType (base name: "accountType")', function() {
        // TODO: update the code to test the property accountType
        expect(instance).to.have.property('accountType');
        // expect(instance.accountType).to.be(expectedValueLiteral);
      });

      it('should have the property originationDate (base name: "originationDate")', function() {
        // TODO: update the code to test the property originationDate
        expect(instance).to.have.property('originationDate');
        // expect(instance.originationDate).to.be(expectedValueLiteral);
      });

      it('should have the property totalVestedBalance (base name: "totalVestedBalance")', function() {
        // TODO: update the code to test the property totalVestedBalance
        expect(instance).to.have.property('totalVestedBalance');
        // expect(instance.totalVestedBalance).to.be(expectedValueLiteral);
      });

      it('should have the property rewardBalance (base name: "rewardBalance")', function() {
        // TODO: update the code to test the property rewardBalance
        expect(instance).to.have.property('rewardBalance');
        // expect(instance.rewardBalance).to.be(expectedValueLiteral);
      });

      it('should have the property sourceAccountStatus (base name: "sourceAccountStatus")', function() {
        // TODO: update the code to test the property sourceAccountStatus
        expect(instance).to.have.property('sourceAccountStatus');
        // expect(instance.sourceAccountStatus).to.be(expectedValueLiteral);
      });

      it('should have the property linkedAccountIds (base name: "linkedAccountIds")', function() {
        // TODO: update the code to test the property linkedAccountIds
        expect(instance).to.have.property('linkedAccountIds');
        // expect(instance.linkedAccountIds).to.be(expectedValueLiteral);
      });

      it('should have the property derivedApr (base name: "derivedApr")', function() {
        // TODO: update the code to test the property derivedApr
        expect(instance).to.have.property('derivedApr');
        // expect(instance.derivedApr).to.be(expectedValueLiteral);
      });

      it('should have the property policyEffectiveDate (base name: "policyEffectiveDate")', function() {
        // TODO: update the code to test the property policyEffectiveDate
        expect(instance).to.have.property('policyEffectiveDate');
        // expect(instance.policyEffectiveDate).to.be(expectedValueLiteral);
      });

      it('should have the property totalUnvestedBalance (base name: "totalUnvestedBalance")', function() {
        // TODO: update the code to test the property totalUnvestedBalance
        expect(instance).to.have.property('totalUnvestedBalance');
        // expect(instance.totalUnvestedBalance).to.be(expectedValueLiteral);
      });

      it('should have the property annuityBalance (base name: "annuityBalance")', function() {
        // TODO: update the code to test the property annuityBalance
        expect(instance).to.have.property('annuityBalance');
        // expect(instance.annuityBalance).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property totalCreditLimit (base name: "totalCreditLimit")', function() {
        // TODO: update the code to test the property totalCreditLimit
        expect(instance).to.have.property('totalCreditLimit');
        // expect(instance.totalCreditLimit).to.be(expectedValueLiteral);
      });

      it('should have the property policyStatus (base name: "policyStatus")', function() {
        // TODO: update the code to test the property policyStatus
        expect(instance).to.have.property('policyStatus');
        // expect(instance.policyStatus).to.be(expectedValueLiteral);
      });

      it('should have the property shortBalance (base name: "shortBalance")', function() {
        // TODO: update the code to test the property shortBalance
        expect(instance).to.have.property('shortBalance');
        // expect(instance.shortBalance).to.be(expectedValueLiteral);
      });

      it('should have the property lender (base name: "lender")', function() {
        // TODO: update the code to test the property lender
        expect(instance).to.have.property('lender');
        // expect(instance.lender).to.be(expectedValueLiteral);
      });

      it('should have the property lastEmployeeContributionAmount (base name: "lastEmployeeContributionAmount")', function() {
        // TODO: update the code to test the property lastEmployeeContributionAmount
        expect(instance).to.have.property('lastEmployeeContributionAmount');
        // expect(instance.lastEmployeeContributionAmount).to.be(expectedValueLiteral);
      });

      it('should have the property providerId (base name: "providerId")', function() {
        // TODO: update the code to test the property providerId
        expect(instance).to.have.property('providerId');
        // expect(instance.providerId).to.be(expectedValueLiteral);
      });

      it('should have the property lastPaymentDate (base name: "lastPaymentDate")', function() {
        // TODO: update the code to test the property lastPaymentDate
        expect(instance).to.have.property('lastPaymentDate');
        // expect(instance.lastPaymentDate).to.be(expectedValueLiteral);
      });

      it('should have the property primaryRewardUnit (base name: "primaryRewardUnit")', function() {
        // TODO: update the code to test the property primaryRewardUnit
        expect(instance).to.have.property('primaryRewardUnit');
        // expect(instance.primaryRewardUnit).to.be(expectedValueLiteral);
      });

      it('should have the property lastPaymentAmount (base name: "lastPaymentAmount")', function() {
        // TODO: update the code to test the property lastPaymentAmount
        expect(instance).to.have.property('lastPaymentAmount');
        // expect(instance.lastPaymentAmount).to.be(expectedValueLiteral);
      });

      it('should have the property remainingBalance (base name: "remainingBalance")', function() {
        // TODO: update the code to test the property remainingBalance
        expect(instance).to.have.property('remainingBalance');
        // expect(instance.remainingBalance).to.be(expectedValueLiteral);
      });

      it('should have the property userClassification (base name: "userClassification")', function() {
        // TODO: update the code to test the property userClassification
        expect(instance).to.have.property('userClassification');
        // expect(instance.userClassification).to.be(expectedValueLiteral);
      });

      it('should have the property bankTransferCode (base name: "bankTransferCode")', function() {
        // TODO: update the code to test the property bankTransferCode
        expect(instance).to.have.property('bankTransferCode');
        // expect(instance.bankTransferCode).to.be(expectedValueLiteral);
      });

      it('should have the property expirationDate (base name: "expirationDate")', function() {
        // TODO: update the code to test the property expirationDate
        expect(instance).to.have.property('expirationDate');
        // expect(instance.expirationDate).to.be(expectedValueLiteral);
      });

      it('should have the property coverage (base name: "coverage")', function() {
        // TODO: update the code to test the property coverage
        expect(instance).to.have.property('coverage');
        // expect(instance.coverage).to.be(expectedValueLiteral);
      });

      it('should have the property cashApr (base name: "cashApr")', function() {
        // TODO: update the code to test the property cashApr
        expect(instance).to.have.property('cashApr');
        // expect(instance.cashApr).to.be(expectedValueLiteral);
      });

      it('should have the property autoRefresh (base name: "autoRefresh")', function() {
        // TODO: update the code to test the property autoRefresh
        expect(instance).to.have.property('autoRefresh');
        // expect(instance.autoRefresh).to.be(expectedValueLiteral);
      });

      it('should have the property oauthMigrationStatus (base name: "oauthMigrationStatus")', function() {
        // TODO: update the code to test the property oauthMigrationStatus
        expect(instance).to.have.property('oauthMigrationStatus');
        // expect(instance.oauthMigrationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property displayedName (base name: "displayedName")', function() {
        // TODO: update the code to test the property displayedName
        expect(instance).to.have.property('displayedName');
        // expect(instance.displayedName).to.be(expectedValueLiteral);
      });

      it('should have the property fullAccountNumberList (base name: "fullAccountNumberList")', function() {
        // TODO: update the code to test the property fullAccountNumberList
        expect(instance).to.have.property('fullAccountNumberList');
        // expect(instance.fullAccountNumberList).to.be(expectedValueLiteral);
      });

      it('should have the property amountDue (base name: "amountDue")', function() {
        // TODO: update the code to test the property amountDue
        expect(instance).to.have.property('amountDue');
        // expect(instance.amountDue).to.be(expectedValueLiteral);
      });

      it('should have the property currentLevel (base name: "currentLevel")', function() {
        // TODO: update the code to test the property currentLevel
        expect(instance).to.have.property('currentLevel');
        // expect(instance.currentLevel).to.be(expectedValueLiteral);
      });

      it('should have the property originalLoanAmount (base name: "originalLoanAmount")', function() {
        // TODO: update the code to test the property originalLoanAmount
        expect(instance).to.have.property('originalLoanAmount');
        // expect(instance.originalLoanAmount).to.be(expectedValueLiteral);
      });

      it('should have the property policyToDate (base name: "policyToDate")', function() {
        // TODO: update the code to test the property policyToDate
        expect(instance).to.have.property('policyToDate');
        // expect(instance.policyToDate).to.be(expectedValueLiteral);
      });

      it('should have the property loanPayoffDetails (base name: "loanPayoffDetails")', function() {
        // TODO: update the code to test the property loanPayoffDetails
        expect(instance).to.have.property('loanPayoffDetails');
        // expect(instance.loanPayoffDetails).to.be(expectedValueLiteral);
      });

      it('should have the property paymentProfile (base name: "paymentProfile")', function() {
        // TODO: update the code to test the property paymentProfile
        expect(instance).to.have.property('paymentProfile');
        // expect(instance.paymentProfile).to.be(expectedValueLiteral);
      });

      it('should have the property CONTAINER (base name: "CONTAINER")', function() {
        // TODO: update the code to test the property CONTAINER
        expect(instance).to.have.property('CONTAINER');
        // expect(instance.CONTAINER).to.be(expectedValueLiteral);
      });

      it('should have the property lastEmployeeContributionDate (base name: "lastEmployeeContributionDate")', function() {
        // TODO: update the code to test the property lastEmployeeContributionDate
        expect(instance).to.have.property('lastEmployeeContributionDate');
        // expect(instance.lastEmployeeContributionDate).to.be(expectedValueLiteral);
      });

      it('should have the property lastPayment (base name: "lastPayment")', function() {
        // TODO: update the code to test the property lastPayment
        expect(instance).to.have.property('lastPayment');
        // expect(instance.lastPayment).to.be(expectedValueLiteral);
      });

      it('should have the property recurringPayment (base name: "recurringPayment")', function() {
        // TODO: update the code to test the property recurringPayment
        expect(instance).to.have.property('recurringPayment');
        // expect(instance.recurringPayment).to.be(expectedValueLiteral);
      });

    });
  });

}));
