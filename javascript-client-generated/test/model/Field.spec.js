/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Field', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.Field();
      });

      it('should create an instance of Field', function() {
        // TODO: update the code to test Field
        expect(instance).to.be.a(YodleeCoreApis.Field);
      });

      it('should have the property image (base name: "image")', function() {
        // TODO: update the code to test the property image
        expect(instance).to.have.property('image');
        // expect(instance.image).to.be(expectedValueLiteral);
      });

      it('should have the property prefix (base name: "prefix")', function() {
        // TODO: update the code to test the property prefix
        expect(instance).to.have.property('prefix');
        // expect(instance.prefix).to.be(expectedValueLiteral);
      });

      it('should have the property minLength (base name: "minLength")', function() {
        // TODO: update the code to test the property minLength
        expect(instance).to.have.property('minLength');
        // expect(instance.minLength).to.be(expectedValueLiteral);
      });

      it('should have the property valueEditable (base name: "valueEditable")', function() {
        // TODO: update the code to test the property valueEditable
        expect(instance).to.have.property('valueEditable');
        // expect(instance.valueEditable).to.be(expectedValueLiteral);
      });

      it('should have the property isOptional (base name: "isOptional")', function() {
        // TODO: update the code to test the property isOptional
        expect(instance).to.have.property('isOptional');
        // expect(instance.isOptional).to.be(expectedValueLiteral);
      });

      it('should have the property suffix (base name: "suffix")', function() {
        // TODO: update the code to test the property suffix
        expect(instance).to.have.property('suffix');
        // expect(instance.suffix).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property isValueProvided (base name: "isValueProvided")', function() {
        // TODO: update the code to test the property isValueProvided
        expect(instance).to.have.property('isValueProvided');
        // expect(instance.isValueProvided).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property maxLength (base name: "maxLength")', function() {
        // TODO: update the code to test the property maxLength
        expect(instance).to.have.property('maxLength');
        // expect(instance.maxLength).to.be(expectedValueLiteral);
      });

      it('should have the property option (base name: "option")', function() {
        // TODO: update the code to test the property option
        expect(instance).to.have.property('option');
        // expect(instance.option).to.be(expectedValueLiteral);
      });

    });
  });

}));
