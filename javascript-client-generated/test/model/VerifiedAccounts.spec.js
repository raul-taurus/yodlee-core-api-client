/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YodleeCoreApis);
  }
}(this, function(expect, YodleeCoreApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('VerifiedAccounts', function() {
      beforeEach(function() {
        instance = new YodleeCoreApis.VerifiedAccounts();
      });

      it('should create an instance of VerifiedAccounts', function() {
        // TODO: update the code to test VerifiedAccounts
        expect(instance).to.be.a(YodleeCoreApis.VerifiedAccounts);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property verificationStatus (base name: "verificationStatus")', function() {
        // TODO: update the code to test the property verificationStatus
        expect(instance).to.have.property('verificationStatus');
        // expect(instance.verificationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property accountType (base name: "accountType")', function() {
        // TODO: update the code to test the property accountType
        expect(instance).to.have.property('accountType');
        // expect(instance.accountType).to.be(expectedValueLiteral);
      });

      it('should have the property currentBalance (base name: "currentBalance")', function() {
        // TODO: update the code to test the property currentBalance
        expect(instance).to.have.property('currentBalance');
        // expect(instance.currentBalance).to.be(expectedValueLiteral);
      });

      it('should have the property displayedName (base name: "displayedName")', function() {
        // TODO: update the code to test the property displayedName
        expect(instance).to.have.property('displayedName');
        // expect(instance.displayedName).to.be(expectedValueLiteral);
      });

      it('should have the property holder (base name: "holder")', function() {
        // TODO: update the code to test the property holder
        expect(instance).to.have.property('holder');
        // expect(instance.holder).to.be(expectedValueLiteral);
      });

      it('should have the property accountNumber (base name: "accountNumber")', function() {
        // TODO: update the code to test the property accountNumber
        expect(instance).to.have.property('accountNumber');
        // expect(instance.accountNumber).to.be(expectedValueLiteral);
      });

      it('should have the property classification (base name: "classification")', function() {
        // TODO: update the code to test the property classification
        expect(instance).to.have.property('classification');
        // expect(instance.classification).to.be(expectedValueLiteral);
      });

      it('should have the property availableBalance (base name: "availableBalance")', function() {
        // TODO: update the code to test the property availableBalance
        expect(instance).to.have.property('availableBalance');
        // expect(instance.availableBalance).to.be(expectedValueLiteral);
      });

      it('should have the property fullAccountNumberList (base name: "fullAccountNumberList")', function() {
        // TODO: update the code to test the property fullAccountNumberList
        expect(instance).to.have.property('fullAccountNumberList');
        // expect(instance.fullAccountNumberList).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property accountAgeClassification (base name: "accountAgeClassification")', function() {
        // TODO: update the code to test the property accountAgeClassification
        expect(instance).to.have.property('accountAgeClassification');
        // expect(instance.accountAgeClassification).to.be(expectedValueLiteral);
      });

      it('should have the property balance (base name: "balance")', function() {
        // TODO: update the code to test the property balance
        expect(instance).to.have.property('balance');
        // expect(instance.balance).to.be(expectedValueLiteral);
      });

      it('should have the property providerId (base name: "providerId")', function() {
        // TODO: update the code to test the property providerId
        expect(instance).to.have.property('providerId');
        // expect(instance.providerId).to.be(expectedValueLiteral);
      });

      it('should have the property providerAccountId (base name: "providerAccountId")', function() {
        // TODO: update the code to test the property providerAccountId
        expect(instance).to.have.property('providerAccountId');
        // expect(instance.providerAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property CONTAINER (base name: "CONTAINER")', function() {
        // TODO: update the code to test the property CONTAINER
        expect(instance).to.have.property('CONTAINER');
        // expect(instance.CONTAINER).to.be(expectedValueLiteral);
      });

      it('should have the property isSelected (base name: "isSelected")', function() {
        // TODO: update the code to test the property isSelected
        expect(instance).to.have.property('isSelected');
        // expect(instance.isSelected).to.be(expectedValueLiteral);
      });

      it('should have the property cash (base name: "cash")', function() {
        // TODO: update the code to test the property cash
        expect(instance).to.have.property('cash');
        // expect(instance.cash).to.be(expectedValueLiteral);
      });

      it('should have the property bankTransferCode (base name: "bankTransferCode")', function() {
        // TODO: update the code to test the property bankTransferCode
        expect(instance).to.have.property('bankTransferCode');
        // expect(instance.bankTransferCode).to.be(expectedValueLiteral);
      });

      it('should have the property providerName (base name: "providerName")', function() {
        // TODO: update the code to test the property providerName
        expect(instance).to.have.property('providerName');
        // expect(instance.providerName).to.be(expectedValueLiteral);
      });

      it('should have the property failedReason (base name: "failedReason")', function() {
        // TODO: update the code to test the property failedReason
        expect(instance).to.have.property('failedReason');
        // expect(instance.failedReason).to.be(expectedValueLiteral);
      });

    });
  });

}));
