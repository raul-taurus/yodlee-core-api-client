/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Row} from './Row';

/**
 * The LoginForm model module.
 * @module model/LoginForm
 * @version 1.1.0
 */
export class LoginForm {
  /**
   * Constructs a new <code>LoginForm</code>.
   * @alias module:model/LoginForm
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>LoginForm</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LoginForm} obj Optional instance to populate.
   * @return {module:model/LoginForm} The populated <code>LoginForm</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new LoginForm();
      if (data.hasOwnProperty('mfaInfoTitle'))
        obj.mfaInfoTitle = ApiClient.convertToType(data['mfaInfoTitle'], 'String');
      if (data.hasOwnProperty('help'))
        obj.help = ApiClient.convertToType(data['help'], 'String');
      if (data.hasOwnProperty('forgetPasswordURL'))
        obj.forgetPasswordURL = ApiClient.convertToType(data['forgetPasswordURL'], 'String');
      if (data.hasOwnProperty('formType'))
        obj.formType = ApiClient.convertToType(data['formType'], 'String');
      if (data.hasOwnProperty('mfaInfoText'))
        obj.mfaInfoText = ApiClient.convertToType(data['mfaInfoText'], 'String');
      if (data.hasOwnProperty('loginHelp'))
        obj.loginHelp = ApiClient.convertToType(data['loginHelp'], 'String');
      if (data.hasOwnProperty('mfaTimeout'))
        obj.mfaTimeout = ApiClient.convertToType(data['mfaTimeout'], 'Number');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('row'))
        obj.row = ApiClient.convertToType(data['row'], [Row]);
    }
    return obj;
  }
}

/**
 * The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
 * @member {String} mfaInfoTitle
 */
LoginForm.prototype.mfaInfoTitle = undefined;

/**
 * The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {String} help
 */
LoginForm.prototype.help = undefined;

/**
 * The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {String} forgetPasswordURL
 */
LoginForm.prototype.forgetPasswordURL = undefined;

/**
 * Allowed values for the <code>formType</code> property.
 * @enum {String}
 * @readonly
 */
LoginForm.FormTypeEnum = {
  /**
   * value: "login"
   * @const
   */
  login: "login",

  /**
   * value: "questionAndAnswer"
   * @const
   */
  questionAndAnswer: "questionAndAnswer",

  /**
   * value: "token"
   * @const
   */
  token: "token",

  /**
   * value: "image"
   * @const
   */
  image: "image"
};
/**
 * The type of the forms for which the user information is required.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>
 * @member {module:model/LoginForm.FormTypeEnum} formType
 */
LoginForm.prototype.formType = undefined;

/**
 * The text displayed in the provider site while requesting the user's MFA information. This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
 * @member {String} mfaInfoText
 */
LoginForm.prototype.mfaInfoText = undefined;

/**
 * The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {String} loginHelp
 */
LoginForm.prototype.loginHelp = undefined;

/**
 * The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {Number} mfaTimeout
 */
LoginForm.prototype.mfaTimeout = undefined;

/**
 * The identifier of the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {Number} id
 */
LoginForm.prototype.id = undefined;

/**
 * This indicates one row in the form. The row will have one label. But it may have single or multiple fields.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {Array.<module:model/Row>} row
 */
LoginForm.prototype.row = undefined;

