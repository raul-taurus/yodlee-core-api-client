/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Money} from './Money';

/**
 * The Statement model module.
 * @module model/Statement
 * @version 1.1.0
 */
export class Statement {
  /**
   * Constructs a new <code>Statement</code>.
   * @alias module:model/Statement
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Statement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Statement} obj Optional instance to populate.
   * @return {module:model/Statement} The populated <code>Statement</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Statement();
      if (data.hasOwnProperty('apr'))
        obj.apr = ApiClient.convertToType(data['apr'], 'Number');
      if (data.hasOwnProperty('cashApr'))
        obj.cashApr = ApiClient.convertToType(data['cashApr'], 'Number');
      if (data.hasOwnProperty('billingPeriodStart'))
        obj.billingPeriodStart = ApiClient.convertToType(data['billingPeriodStart'], 'String');
      if (data.hasOwnProperty('dueDate'))
        obj.dueDate = ApiClient.convertToType(data['dueDate'], 'String');
      if (data.hasOwnProperty('interestAmount'))
        obj.interestAmount = Money.constructFromObject(data['interestAmount']);
      if (data.hasOwnProperty('statementDate'))
        obj.statementDate = ApiClient.convertToType(data['statementDate'], 'String');
      if (data.hasOwnProperty('cashAdvance'))
        obj.cashAdvance = Money.constructFromObject(data['cashAdvance']);
      if (data.hasOwnProperty('billingPeriodEnd'))
        obj.billingPeriodEnd = ApiClient.convertToType(data['billingPeriodEnd'], 'String');
      if (data.hasOwnProperty('principalAmount'))
        obj.principalAmount = Money.constructFromObject(data['principalAmount']);
      if (data.hasOwnProperty('loanBalance'))
        obj.loanBalance = Money.constructFromObject(data['loanBalance']);
      if (data.hasOwnProperty('amountDue'))
        obj.amountDue = Money.constructFromObject(data['amountDue']);
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'Number');
      if (data.hasOwnProperty('lastUpdated'))
        obj.lastUpdated = ApiClient.convertToType(data['lastUpdated'], 'String');
      if (data.hasOwnProperty('isLatest'))
        obj.isLatest = ApiClient.convertToType(data['isLatest'], 'Boolean');
      if (data.hasOwnProperty('minimumPayment'))
        obj.minimumPayment = Money.constructFromObject(data['minimumPayment']);
      if (data.hasOwnProperty('lastPaymentDate'))
        obj.lastPaymentDate = ApiClient.convertToType(data['lastPaymentDate'], 'String');
      if (data.hasOwnProperty('lastPaymentAmount'))
        obj.lastPaymentAmount = Money.constructFromObject(data['lastPaymentAmount']);
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('newCharges'))
        obj.newCharges = Money.constructFromObject(data['newCharges']);
    }
    return obj;
  }
}

/**
 * The APR applied to the balance on the credit card account, as available in the statement.<br><b>Note:</b> In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {Number} apr
 */
Statement.prototype.apr = undefined;

/**
 * The APR applicable to cash withdrawals on the credit card account.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {Number} cashApr
 */
Statement.prototype.cashApr = undefined;

/**
 * The start date of the statement period.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {String} billingPeriodStart
 */
Statement.prototype.billingPeriodStart = undefined;

/**
 * The date by when the minimum payment is due to be paid.<br><b>Note:</b> The due date that appears in the statement may differ from the due date at the account-level.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {String} dueDate
 */
Statement.prototype.dueDate = undefined;

/**
 * @member {module:model/Money} interestAmount
 */
Statement.prototype.interestAmount = undefined;

/**
 * The date on which the statement is generated.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {String} statementDate
 */
Statement.prototype.statementDate = undefined;

/**
 * @member {module:model/Money} cashAdvance
 */
Statement.prototype.cashAdvance = undefined;

/**
 * The end date of the statement period.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {String} billingPeriodEnd
 */
Statement.prototype.billingPeriodEnd = undefined;

/**
 * @member {module:model/Money} principalAmount
 */
Statement.prototype.principalAmount = undefined;

/**
 * @member {module:model/Money} loanBalance
 */
Statement.prototype.loanBalance = undefined;

/**
 * @member {module:model/Money} amountDue
 */
Statement.prototype.amountDue = undefined;

/**
 * Account to which the statement belongs to.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {Number} accountId
 */
Statement.prototype.accountId = undefined;

/**
 * The date when the account was last updated by Yodlee.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {String} lastUpdated
 */
Statement.prototype.lastUpdated = undefined;

/**
 * The field is set to true if the statement is the latest generated statement.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {Boolean} isLatest
 */
Statement.prototype.isLatest = undefined;

/**
 * @member {module:model/Money} minimumPayment
 */
Statement.prototype.minimumPayment = undefined;

/**
 * The date on which the last payment was done during the billing cycle.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {String} lastPaymentDate
 */
Statement.prototype.lastPaymentDate = undefined;

/**
 * @member {module:model/Money} lastPaymentAmount
 */
Statement.prototype.lastPaymentAmount = undefined;

/**
 * Unique identifier for the statement.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
 * @member {Number} id
 */
Statement.prototype.id = undefined;

/**
 * @member {module:model/Money} newCharges
 */
Statement.prototype.newCharges = undefined;

