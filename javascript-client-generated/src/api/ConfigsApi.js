/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ConfigsNotificationResponse} from '../model/ConfigsNotificationResponse';
import {CreateConfigsNotificationEventRequest} from '../model/CreateConfigsNotificationEventRequest';
import {UpdateConfigsNotificationEventRequest} from '../model/UpdateConfigsNotificationEventRequest';
import {YodleeError} from '../model/YodleeError';

/**
* Configs service.
* @module api/ConfigsApi
* @version 1.1.0
*/
export class ConfigsApi {

    /**
    * Constructs a new ConfigsApi. 
    * @alias module:api/ConfigsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createSubscriptionNotificationEvent operation.
     * @callback moduleapi/ConfigsApi~createSubscriptionNotificationEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe For Notification Event
     * The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES and LATEST_BALANCE_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
     * @param {module:model/CreateConfigsNotificationEventRequest} body eventRequest
     * @param {module:model/String} eventName eventName
     * @param {module:api/ConfigsApi~createSubscriptionNotificationEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSubscriptionNotificationEvent(body, eventName, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSubscriptionNotificationEvent");
      }
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling createSubscriptionNotificationEvent");
      }

      let pathParams = {
        'eventName': eventName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/configs/notifications/events/{eventName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteSubscribedNotificationEvent operation.
     * @callback moduleapi/ConfigsApi~deleteSubscribedNotificationEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Notification Subscription
     * The delete events service is used to unsubscribe from an events service.&lt;br&gt;
     * @param {module:model/String} eventName eventName
     * @param {module:api/ConfigsApi~deleteSubscribedNotificationEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubscribedNotificationEvent(eventName, callback) {
      
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling deleteSubscribedNotificationEvent");
      }

      let pathParams = {
        'eventName': eventName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/configs/notifications/events/{eventName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSubscribedNotificationEvents operation.
     * @callback moduleapi/ConfigsApi~getSubscribedNotificationEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigsNotificationResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscribed Notification Events
     * The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.eventName eventName
     * @param {module:api/ConfigsApi~getSubscribedNotificationEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSubscribedNotificationEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'eventName': opts['eventName']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ConfigsNotificationResponse;

      return this.apiClient.callApi(
        '/configs/notifications/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateSubscribedNotificationEvent operation.
     * @callback moduleapi/ConfigsApi~updateSubscribedNotificationEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Notification Subscription
     * The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     * @param {module:model/UpdateConfigsNotificationEventRequest} body eventRequest
     * @param {module:model/String} eventName eventName
     * @param {module:api/ConfigsApi~updateSubscribedNotificationEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSubscribedNotificationEvent(body, eventName, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSubscribedNotificationEvent");
      }
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling updateSubscribedNotificationEvent");
      }

      let pathParams = {
        'eventName': eventName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/configs/notifications/events/{eventName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}