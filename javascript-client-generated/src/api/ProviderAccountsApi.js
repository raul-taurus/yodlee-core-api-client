/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ProviderAccountDetailResponse} from '../model/ProviderAccountDetailResponse';
import {ProviderAccountPreferencesRequest} from '../model/ProviderAccountPreferencesRequest';
import {ProviderAccountRefreshRequest} from '../model/ProviderAccountRefreshRequest';
import {ProviderAccountRequest} from '../model/ProviderAccountRequest';
import {ProviderAccountResponse} from '../model/ProviderAccountResponse';
import {ProviderAccountUserProfileResponse} from '../model/ProviderAccountUserProfileResponse';
import {RefreshProviderAccountResponse} from '../model/RefreshProviderAccountResponse';
import {UpdatedProviderAccountResponse} from '../model/UpdatedProviderAccountResponse';
import {YodleeError} from '../model/YodleeError';

/**
* ProviderAccounts service.
* @module api/ProviderAccountsApi
* @version 1.1.0
*/
export class ProviderAccountsApi {

    /**
    * Constructs a new ProviderAccountsApi. 
    * @alias module:api/ProviderAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteProviderAccount operation.
     * @callback moduleapi/ProviderAccountsApi~deleteProviderAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Provider Account
     * The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
     * @param {Number} providerAccountId providerAccountId
     * @param {module:api/ProviderAccountsApi~deleteProviderAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProviderAccount(providerAccountId, callback) {
      
      let postBody = null;
      // verify the required parameter 'providerAccountId' is set
      if (providerAccountId === undefined || providerAccountId === null) {
        throw new Error("Missing the required parameter 'providerAccountId' when calling deleteProviderAccount");
      }

      let pathParams = {
        'providerAccountId': providerAccountId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/providerAccounts/{providerAccountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editCredentialsOrRefreshProviderAccount operation.
     * @callback moduleapi/ProviderAccountsApi~editCredentialsOrRefreshProviderAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatedProviderAccountResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account
     * &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt;The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;-----------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
     * @param {String} providerAccountIds comma separated providerAccountIds
     * @param {Object} opts Optional parameters
     * @param {module:model/ProviderAccountRequest} opts.body loginForm or field entity
     * @param {module:api/ProviderAccountsApi~editCredentialsOrRefreshProviderAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    editCredentialsOrRefreshProviderAccount(providerAccountIds, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'providerAccountIds' is set
      if (providerAccountIds === undefined || providerAccountIds === null) {
        throw new Error("Missing the required parameter 'providerAccountIds' when calling editCredentialsOrRefreshProviderAccount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'providerAccountIds': providerAccountIds
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = UpdatedProviderAccountResponse;

      return this.apiClient.callApi(
        '/providerAccounts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllProviderAccounts operation.
     * @callback moduleapi/ProviderAccountsApi~getAllProviderAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderAccountResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Provider Accounts
     * The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.include include
     * @param {String} opts.providerIds Comma separated providerIds.
     * @param {module:api/ProviderAccountsApi~getAllProviderAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllProviderAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'include': opts['include'],'providerIds': opts['providerIds']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProviderAccountResponse;

      return this.apiClient.callApi(
        '/providerAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProviderAccount operation.
     * @callback moduleapi/ProviderAccountsApi~getProviderAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderAccountDetailResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Provider Account Details
     * The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
     * @param {Number} providerAccountId providerAccountId
     * @param {Object} opts Optional parameters
     * @param {String} opts.include include credentials,questions
     * @param {String} opts.requestId The unique identifier for the request that returns contextual data
     * @param {module:api/ProviderAccountsApi~getProviderAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProviderAccount(providerAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'providerAccountId' is set
      if (providerAccountId === undefined || providerAccountId === null) {
        throw new Error("Missing the required parameter 'providerAccountId' when calling getProviderAccount");
      }

      let pathParams = {
        'providerAccountId': providerAccountId
      };
      let queryParams = {
        'include': opts['include'],'requestId': opts['requestId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProviderAccountDetailResponse;

      return this.apiClient.callApi(
        '/providerAccounts/{providerAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProviderAccountProfiles operation.
     * @callback moduleapi/ProviderAccountsApi~getProviderAccountProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderAccountUserProfileResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Profile Details
     * &lt;b&gt;Refer GET /verification/holderProfile&lt;/b&gt;&lt;br&gt;The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.providerAccountId Comma separated providerAccountIds.
     * @param {module:api/ProviderAccountsApi~getProviderAccountProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProviderAccountProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'providerAccountId': opts['providerAccountId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProviderAccountUserProfileResponse;

      return this.apiClient.callApi(
        '/providerAccounts/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the refreshProviderAccount operation.
     * @callback moduleapi/ProviderAccountsApi~refreshProviderAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshProviderAccountResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh Provider Account
     * This api service will allow you to refresh the Non-MFA provider accounts against a configName, i.e refresh will respect the configurations of the configName while refreshing the account.&lt;br&gt;Note: this service will only work with FastLink 4 users.&lt;br&gt;
     * @param {module:model/ProviderAccountRefreshRequest} body refreshRequest
     * @param {module:api/ProviderAccountsApi~refreshProviderAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    refreshProviderAccount(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refreshProviderAccount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = RefreshProviderAccountResponse;

      return this.apiClient.callApi(
        '/providerAccounts/refresh', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePreferences operation.
     * @callback moduleapi/ProviderAccountsApi~updatePreferencesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Preferences
     * This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
     * @param {module:model/ProviderAccountPreferencesRequest} body preferences
     * @param {Number} providerAccountId providerAccountId
     * @param {module:api/ProviderAccountsApi~updatePreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePreferences(body, providerAccountId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePreferences");
      }
      // verify the required parameter 'providerAccountId' is set
      if (providerAccountId === undefined || providerAccountId === null) {
        throw new Error("Missing the required parameter 'providerAccountId' when calling updatePreferences");
      }

      let pathParams = {
        'providerAccountId': providerAccountId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/providerAccounts/{providerAccountId}/preferences', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}