/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {HoldingAssetClassificationListResponse} from '../model/HoldingAssetClassificationListResponse';
import {HoldingResponse} from '../model/HoldingResponse';
import {HoldingSecuritiesResponse} from '../model/HoldingSecuritiesResponse';
import {HoldingTypeListResponse} from '../model/HoldingTypeListResponse';
import {YodleeError} from '../model/YodleeError';

/**
* Holdings service.
* @module api/HoldingsApi
* @version 1.1.0
*/
export class HoldingsApi {

    /**
    * Constructs a new HoldingsApi. 
    * @alias module:api/HoldingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getAssetClassificationList operation.
     * @callback moduleapi/HoldingsApi~getAssetClassificationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HoldingAssetClassificationListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Asset Classification List
     * The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
     * @param {module:api/HoldingsApi~getAssetClassificationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAssetClassificationList(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = HoldingAssetClassificationListResponse;

      return this.apiClient.callApi(
        '/holdings/assetClassificationList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getHoldingTypeList operation.
     * @callback moduleapi/HoldingsApi~getHoldingTypeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HoldingTypeListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Holding Type List
     * The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
     * @param {module:api/HoldingsApi~getHoldingTypeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHoldingTypeList(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = HoldingTypeListResponse;

      return this.apiClient.callApi(
        '/holdings/holdingTypeList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getHoldings operation.
     * @callback moduleapi/HoldingsApi~getHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HoldingResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Holdings
     * The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId Comma separated accountId
     * @param {String} opts.assetClassificationClassificationType e.g. Country, Sector, etc.
     * @param {String} opts.classificationValue e.g. US
     * @param {String} opts.include assetClassification
     * @param {String} opts.providerAccountId providerAccountId
     * @param {module:api/HoldingsApi~getHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHoldings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accountId': opts['accountId'],'assetClassification.classificationType': opts['assetClassificationClassificationType'],'classificationValue': opts['classificationValue'],'include': opts['include'],'providerAccountId': opts['providerAccountId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = HoldingResponse;

      return this.apiClient.callApi(
        '/holdings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSecurities operation.
     * @callback moduleapi/HoldingsApi~getSecuritiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HoldingSecuritiesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Security Details
     * The get security details service is used to get all the security information for the holdings&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.holdingId Comma separated holdingId
     * @param {module:api/HoldingsApi~getSecuritiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSecurities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'holdingId': opts['holdingId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = HoldingSecuritiesResponse;

      return this.apiClient.callApi(
        '/holdings/securities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}