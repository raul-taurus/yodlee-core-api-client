/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {HolderProfileResponse} from '../model/HolderProfileResponse';
import {UpdateVerificationRequest} from '../model/UpdateVerificationRequest';
import {VerificationRequest} from '../model/VerificationRequest';
import {VerificationResponse} from '../model/VerificationResponse';
import {VerificationStatusResponse} from '../model/VerificationStatusResponse';
import {VerifiedAccountResponse} from '../model/VerifiedAccountResponse';
import {YodleeError} from '../model/YodleeError';

/**
* Verification service.
* @module api/VerificationApi
* @version 1.1.0
*/
export class VerificationApi {

    /**
    * Constructs a new VerificationApi. 
    * @alias module:api/VerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getHolderProfile operation.
     * @callback moduleapi/VerificationApi~getHolderProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HolderProfileResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Holder Profile
     * The Holder Profile API service allows retrieving the user&#x27;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
     * @param {String} providerAccountId providerAccountId.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId accountId
     * @param {module:api/VerificationApi~getHolderProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHolderProfile(providerAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'providerAccountId' is set
      if (providerAccountId === undefined || providerAccountId === null) {
        throw new Error("Missing the required parameter 'providerAccountId' when calling getHolderProfile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accountId': opts['accountId'],'providerAccountId': providerAccountId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = HolderProfileResponse;

      return this.apiClient.callApi(
        '/verification/holderProfile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVerificationStatus operation.
     * @callback moduleapi/VerificationApi~getVerificationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Verification Status
     * &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The get verification status service is used to retrieve the verification status of all accounts for which the CDV process has been initiated.For the CDV process, the account details object returns the user provided account information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId Comma separated accountId
     * @param {String} opts.providerAccountId Comma separated providerAccountId
     * @param {String} opts.verificationType verificationType
     * @param {module:api/VerificationApi~getVerificationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getVerificationStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accountId': opts['accountId'],'providerAccountId': opts['providerAccountId'],'verificationType': opts['verificationType']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = VerificationStatusResponse;

      return this.apiClient.callApi(
        '/verification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVerifiedAccounts operation.
     * @callback moduleapi/VerificationApi~getVerifiedAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifiedAccountResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Verified Accounts
     * The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
     * @param {String} providerAccountId providerAccountId.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId Comma separated accountIds.
     * @param {String} opts.isSelected Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true.
     * @param {String} opts.verificationStatus Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS.
     * @param {module:api/VerificationApi~getVerifiedAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getVerifiedAccounts(providerAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'providerAccountId' is set
      if (providerAccountId === undefined || providerAccountId === null) {
        throw new Error("Missing the required parameter 'providerAccountId' when calling getVerifiedAccounts");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accountId': opts['accountId'],'isSelected': opts['isSelected'],'providerAccountId': providerAccountId,'verificationStatus': opts['verificationStatus']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = VerifiedAccountResponse;

      return this.apiClient.callApi(
        '/verification/verifiedAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the initiateMatchingOrChallengeDepositeVerification operation.
     * @callback moduleapi/VerificationApi~initiateMatchingOrChallengeDepositeVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiaite Challenge Deposit
     * &lt;i&gt;This API implementation notes is intended for FastLink 4 users. For FastLink 3 users, additional integration notes related to this endpoint is available &lt;a href&#x3D;\&quot;https://developer.envestnet.com/resources/yodlee/fastlink-3/docs/api-integrations\&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br&gt;&lt;br&gt; The post verification service is used to initiate the challenge deposit account verification (CDV) process to verify account ownership.The CDV process can verify ownership of only bank accounts (i.e., checking and savings).Once the CDV process is initiated, Yodlee will post the micro-transaction (i.e., credit and debit) in the user&#x27;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;&lt;br&gt;The CDV process is currently supported only in the United States.
     * @param {module:model/VerificationRequest} body verification information
     * @param {module:api/VerificationApi~initiateMatchingOrChallengeDepositeVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    initiateMatchingOrChallengeDepositeVerification(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling initiateMatchingOrChallengeDepositeVerification");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = VerificationResponse;

      return this.apiClient.callApi(
        '/verification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verifyChallengeDeposit operation.
     * @callback moduleapi/VerificationApi~verifyChallengeDepositCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Challenge Deposit
     * The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#x27;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#x27;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
     * @param {module:model/UpdateVerificationRequest} body verification information
     * @param {module:api/VerificationApi~verifyChallengeDepositCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verifyChallengeDeposit(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyChallengeDeposit");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = VerificationResponse;

      return this.apiClient.callApi(
        '/verification', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}