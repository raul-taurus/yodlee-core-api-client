/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.envestnet.com/resources/yodlee/yodlee-api-overview/docs\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DerivedHoldingSummaryResponse} from '../model/DerivedHoldingSummaryResponse';
import {DerivedNetworthResponse} from '../model/DerivedNetworthResponse';
import {DerivedTransactionSummaryResponse} from '../model/DerivedTransactionSummaryResponse';
import {YodleeError} from '../model/YodleeError';

/**
* Derived service.
* @module api/DerivedApi
* @version 1.1.0
*/
export class DerivedApi {

    /**
    * Constructs a new DerivedApi. 
    * @alias module:api/DerivedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getHoldingSummary operation.
     * @callback moduleapi/DerivedApi~getHoldingSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DerivedHoldingSummaryResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Holding Summary
     * The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountIds Comma separated accountIds
     * @param {String} opts.classificationType e.g. Country, Sector, etc.
     * @param {String} opts.include details
     * @param {module:api/DerivedApi~getHoldingSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHoldingSummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accountIds': opts['accountIds'],'classificationType': opts['classificationType'],'include': opts['include']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = DerivedHoldingSummaryResponse;

      return this.apiClient.callApi(
        '/derived/holdingSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNetworth operation.
     * @callback moduleapi/DerivedApi~getNetworthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DerivedNetworthResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Networth Summary
     * The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountIds comma separated accountIds
     * @param {String} opts.container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities
     * @param {String} opts.fromDate from date for balance retrieval (YYYY-MM-DD)
     * @param {String} opts.include details
     * @param {String} opts.interval D-daily, W-weekly or M-monthly
     * @param {Number} opts.skip skip (Min 0)
     * @param {String} opts.toDate toDate for balance retrieval (YYYY-MM-DD)
     * @param {Number} opts.top top (Max 500)
     * @param {module:api/DerivedApi~getNetworthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNetworth(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accountIds': opts['accountIds'],'container': opts['container'],'fromDate': opts['fromDate'],'include': opts['include'],'interval': opts['interval'],'skip': opts['skip'],'toDate': opts['toDate'],'top': opts['top']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = DerivedNetworthResponse;

      return this.apiClient.callApi(
        '/derived/networth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTransactionSummary operation.
     * @callback moduleapi/DerivedApi~getTransactionSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DerivedTransactionSummaryResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transaction Summary
     * The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#x27;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
     * @param {String} groupBy CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId comma separated account Ids
     * @param {String} opts.categoryId comma separated categoryIds
     * @param {String} opts.categoryType INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION
     * @param {String} opts.fromDate YYYY-MM-DD format
     * @param {String} opts.include details
     * @param {Boolean} opts.includeUserCategory TRUE/FALSE
     * @param {String} opts.interval D-daily, W-weekly, M-mothly or Y-yearly
     * @param {String} opts.toDate YYYY-MM-DD format
     * @param {module:api/DerivedApi~getTransactionSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTransactionSummary(groupBy, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupBy' is set
      if (groupBy === undefined || groupBy === null) {
        throw new Error("Missing the required parameter 'groupBy' when calling getTransactionSummary");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accountId': opts['accountId'],'categoryId': opts['categoryId'],'categoryType': opts['categoryType'],'fromDate': opts['fromDate'],'groupBy': groupBy,'include': opts['include'],'includeUserCategory': opts['includeUserCategory'],'interval': opts['interval'],'toDate': opts['toDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = DerivedTransactionSummaryResponse;

      return this.apiClient.callApi(
        '/derived/transactionSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}